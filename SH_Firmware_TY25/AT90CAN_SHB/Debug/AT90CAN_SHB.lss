
AT90CAN_SHB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800100  00800100  00000306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d43  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b79  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a9  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005df  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  0000283b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000289e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f1 c0       	rjmp	.+482    	; 0x224 <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a5 31       	cpi	r26, 0x15	; 21
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	02 d0       	rcall	.+4      	; 0xb6 <main>
  b2:	ed c0       	rjmp	.+474    	; 0x28e <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <main>:

uint8_t wheelspeed = 0;

int main(void)
{
    sys_timer_config();
  b6:	a9 d0       	rcall	.+338    	; 0x20a <sys_timer_config>
	SPI_MasterInit();
  b8:	da d0       	rcall	.+436    	; 0x26e <SPI_MasterInit>
  ba:	78 94       	sei
	
	
	sei();
  bc:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <sys_time>
	
	//	SUPERLOOP STARTS HERE
	
    while (1) 
    {
		if(TIME_PASSED_1_MS)
  c0:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <sys_time+0x1>
  c4:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <sys_time+0x2>
  c8:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <sys_time+0x3>
  cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <time_1ms>
  d0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <time_1ms+0x1>
  d4:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <time_1ms+0x2>
  d8:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <time_1ms+0x3>
  dc:	48 17       	cp	r20, r24
  de:	59 07       	cpc	r21, r25
  e0:	6a 07       	cpc	r22, r26
  e2:	7b 07       	cpc	r23, r27
  e4:	81 f0       	breq	.+32     	; 0x106 <main+0x50>
  e6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sys_time>
		{
			time_1ms = sys_time;
  ea:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sys_time+0x1>
  ee:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <sys_time+0x2>
  f2:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <sys_time+0x3>
  f6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <time_1ms>
  fa:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <time_1ms+0x1>
  fe:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <time_1ms+0x2>
 102:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <time_1ms+0x3>
 106:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sys_time>
		} // end of 1ms
		
		if(TIME_PASSED_10_MS)
 10a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sys_time+0x1>
 10e:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <sys_time+0x2>
 112:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <sys_time+0x3>
 116:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <time_10ms>
 11a:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <time_10ms+0x1>
 11e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <time_10ms+0x2>
 122:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <time_10ms+0x3>
 126:	84 1b       	sub	r24, r20
 128:	95 0b       	sbc	r25, r21
 12a:	a6 0b       	sbc	r26, r22
 12c:	b7 0b       	sbc	r27, r23
 12e:	0a 97       	sbiw	r24, 0x0a	; 10
 130:	a1 05       	cpc	r26, r1
 132:	b1 05       	cpc	r27, r1
 134:	a8 f0       	brcs	.+42     	; 0x160 <main+0xaa>
 136:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sys_time>
		{
			time_10ms = sys_time;
 13a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sys_time+0x1>
 13e:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <sys_time+0x2>
 142:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <sys_time+0x3>
 146:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <time_10ms>
 14a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <time_10ms+0x1>
 14e:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <time_10ms+0x2>
 152:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <time_10ms+0x3>
 156:	82 e2       	ldi	r24, 0x22	; 34
			
			SPI_Data_Reg = 0x22;		// Write the Register will start the conversation
 158:	8e bd       	out	0x2e, r24	; 46
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			SPI_Data_Reg = wheelspeed;
 15e:	8e bd       	out	0x2e, r24	; 46
 160:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sys_time>
			
		} // end of 10ms

		if (TIME_PASSED_100_MS)
 164:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sys_time+0x1>
 168:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <sys_time+0x2>
 16c:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <sys_time+0x3>
 170:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <time_100ms>
 174:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <time_100ms+0x1>
 178:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <time_100ms+0x2>
 17c:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <time_100ms+0x3>
 180:	84 1b       	sub	r24, r20
 182:	95 0b       	sbc	r25, r21
 184:	a6 0b       	sbc	r26, r22
 186:	b7 0b       	sbc	r27, r23
 188:	84 36       	cpi	r24, 0x64	; 100
 18a:	91 05       	cpc	r25, r1
 18c:	a1 05       	cpc	r26, r1
 18e:	b1 05       	cpc	r27, r1
 190:	88 f0       	brcs	.+34     	; 0x1b4 <main+0xfe>
 192:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sys_time>
		{
			time_100ms = sys_time;
 196:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sys_time+0x1>
 19a:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <sys_time+0x2>
 19e:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <sys_time+0x3>
 1a2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time_100ms>
 1a6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <time_100ms+0x1>
 1aa:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <time_100ms+0x2>
 1ae:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <time_100ms+0x3>
			
			sys_tick_heart();
 1b2:	33 d0       	rcall	.+102    	; 0x21a <sys_tick_heart>
 1b4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sys_time>
			
		} // end of 100ms
		
		if (TIME_PASSED_200_MS)
 1b8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sys_time+0x1>
 1bc:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <sys_time+0x2>
 1c0:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <sys_time+0x3>
 1c4:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <time_200ms>
 1c8:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <time_200ms+0x1>
 1cc:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <time_200ms+0x2>
 1d0:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <time_200ms+0x3>
 1d4:	84 1b       	sub	r24, r20
 1d6:	95 0b       	sbc	r25, r21
 1d8:	a6 0b       	sbc	r26, r22
 1da:	b7 0b       	sbc	r27, r23
 1dc:	88 3c       	cpi	r24, 0xC8	; 200
 1de:	91 05       	cpc	r25, r1
 1e0:	a1 05       	cpc	r26, r1
 1e2:	b1 05       	cpc	r27, r1
 1e4:	08 f4       	brcc	.+2      	; 0x1e8 <main+0x132>
 1e6:	6a cf       	rjmp	.-300    	; 0xbc <main+0x6>
 1e8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sys_time>
		{
			time_200ms = sys_time;
 1ec:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sys_time+0x1>
 1f0:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <sys_time+0x2>
 1f4:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <sys_time+0x3>
 1f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time_200ms>
 1fc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <time_200ms+0x1>
 200:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <time_200ms+0x2>
 204:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <time_200ms+0x3>
 208:	59 cf       	rjmp	.-334    	; 0xbc <main+0x6>

0000020a <sys_timer_config>:
 20a:	8b e0       	ldi	r24, 0x0B	; 11
	PORTC &= ~(1<<PC0); //turn off red led in case of no fault
}

void fault_detected()
{
	PORTC |= (1<<PC0); //turn on red led when called (fault present)
 20c:	84 bd       	out	0x24, r24	; 36
 20e:	89 ef       	ldi	r24, 0xF9	; 249
 210:	87 bd       	out	0x27, r24	; 39
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 218:	08 95       	ret

0000021a <sys_tick_heart>:
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	89 27       	eor	r24, r25
 220:	88 b9       	out	0x08, r24	; 8
 222:	08 95       	ret

00000224 <__vector_16>:
}

ISR(TIMER0_COMP_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
	sys_time++;
 236:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sys_time>
 23a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sys_time+0x1>
 23e:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <sys_time+0x2>
 242:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <sys_time+0x3>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	a1 1d       	adc	r26, r1
 24a:	b1 1d       	adc	r27, r1
 24c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sys_time>
 250:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <sys_time+0x1>
 254:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <sys_time+0x2>
 258:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <sys_time+0x3>
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <SPI_MasterInit>:
#include "SPI_lib.h"

void SPI_MasterInit()
{
	//Set MOSI, SCK, all SS as output
	DDRB |= (1<<MOSI) | (1<<SCK);
 26e:	84 b1       	in	r24, 0x04	; 4
 270:	86 60       	ori	r24, 0x06	; 6
 272:	84 b9       	out	0x04, r24	; 4
	DDRE |= (1<<SS_uC) | (1<<SS_TK1) | (1<<SS_TK2);
 274:	8d b1       	in	r24, 0x0d	; 13
 276:	87 60       	ori	r24, 0x07	; 7
 278:	8d b9       	out	0x0d, r24	; 13
	
	//Set MISO as input
	DDRB &= ~(1<<MISO);
 27a:	84 b1       	in	r24, 0x04	; 4
 27c:	87 7f       	andi	r24, 0xF7	; 247
 27e:	84 b9       	out	0x04, r24	; 4
	
	//enables SPI, Master-Mode, configure Clock_Select
	SPI_Control_Reg |= (1<<SPI_Enable) | (1<<SPI_Master) | (1<<SPI_Relation1) | (0<<SPI_Relation0);
 280:	8c b5       	in	r24, 0x2c	; 44
 282:	82 65       	ori	r24, 0x52	; 82
 284:	8c bd       	out	0x2c, r24	; 44
	
	//Set all SS low
	PORTE |= (1<<SS_uC) | (1<<SS_TK1) | (1<<SS_TK2);
 286:	8e b1       	in	r24, 0x0e	; 14
 288:	87 60       	ori	r24, 0x07	; 7
 28a:	8e b9       	out	0x0e, r24	; 14
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
