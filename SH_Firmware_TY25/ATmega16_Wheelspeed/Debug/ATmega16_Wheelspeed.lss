
ATmega16_Wheelspeed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800060  00800060  00000514  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096e  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059c  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00001ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000456  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049f  00000000  00000000  0000238a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002829  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 37       	cpi	r26, 0x7E	; 126
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  74:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <PORT_Config>:
volatile unsigned long time_old = 0;
volatile unsigned long int sys_time_old = 0;
uint16_t delta = 0;


void PORT_Config(){		//enable Pin change Interrupt on Digital_in pin PD3 (PIN 12)
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	
	DDRD &= ~(1 << PD3);					// set digital_input as Input
  84:	81 e3       	ldi	r24, 0x31	; 49
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	21 e3       	ldi	r18, 0x31	; 49
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	f9 01       	movw	r30, r18
  8e:	20 81       	ld	r18, Z
  90:	27 7f       	andi	r18, 0xF7	; 247
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18
	
	// Konfiguriere INT0 für fallende Flanke
	MCUCR |= (1 << ISC11);				// MCUCR = SMCU Control_Reg
  96:	85 e5       	ldi	r24, 0x55	; 85
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	25 e5       	ldi	r18, 0x55	; 85
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	20 81       	ld	r18, Z
  a2:	28 60       	ori	r18, 0x08	; 8
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	MCUCR |= (1 << ISC10);
  a8:	85 e5       	ldi	r24, 0x55	; 85
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	25 e5       	ldi	r18, 0x55	; 85
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	f9 01       	movw	r30, r18
  b2:	20 81       	ld	r18, Z
  b4:	24 60       	ori	r18, 0x04	; 4
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
	
	// Aktiviere INT0
	GICR |= (1 << INT1);
  ba:	8b e5       	ldi	r24, 0x5B	; 91
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2b e5       	ldi	r18, 0x5B	; 91
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	20 68       	ori	r18, 0x80	; 128
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
}
  cc:	00 00       	nop
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <__vector_2>:

ISR(INT1_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
	
	//delta berechnen
	//quasie die zeit um 360° zu rotieren
	delta = (sys_time - sys_time_old) * 16;
 100:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <sys_time>
 104:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <sys_time+0x1>
 108:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <sys_time+0x2>
 10c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <sys_time+0x3>
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 118:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 11c:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 120:	79 01       	movw	r14, r18
 122:	8a 01       	movw	r16, r20
 124:	e8 1a       	sub	r14, r24
 126:	f9 0a       	sbc	r15, r25
 128:	0a 0b       	sbc	r16, r26
 12a:	1b 0b       	sbc	r17, r27
 12c:	d8 01       	movw	r26, r16
 12e:	c7 01       	movw	r24, r14
 130:	82 95       	swap	r24
 132:	92 95       	swap	r25
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	98 27       	eor	r25, r24
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	98 27       	eor	r25, r24
 13c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delta+0x1>
 140:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delta>
	
	sys_time_old = sys_time; 
 144:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sys_time>
 148:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sys_time+0x1>
 14c:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <sys_time+0x2>
 150:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <sys_time+0x3>
 154:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 158:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 160:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>

}
 164:	00 00       	nop
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	0f 90       	pop	r0
 184:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <main>:

#include "main.h"


int main(void)
{
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	sys_timer_config();
 19e:	0e 94 89 01 	call	0x312	; 0x312 <sys_timer_config>
	SPI_SlaveInit();
 1a2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SPI_SlaveInit>
	PORT_Config();
 1a6:	0e 94 3e 00 	call	0x7c	; 0x7c <PORT_Config>
	
	sei();
 1aa:	78 94       	sei

    while (1) 
    {
		//data = SPI_SlaveReceive();
		
		if(TIME_PASSED_1_MS)
 1ac:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <sys_time>
 1b0:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <sys_time+0x1>
 1b4:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <sys_time+0x2>
 1b8:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <sys_time+0x3>
 1bc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <time_1ms>
 1c0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <time_1ms+0x1>
 1c4:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <time_1ms+0x2>
 1c8:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <time_1ms+0x3>
 1cc:	28 17       	cp	r18, r24
 1ce:	39 07       	cpc	r19, r25
 1d0:	4a 07       	cpc	r20, r26
 1d2:	5b 07       	cpc	r21, r27
 1d4:	b1 f0       	breq	.+44     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
		{
			time_1ms = sys_time;
 1d6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sys_time>
 1da:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sys_time+0x1>
 1de:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <sys_time+0x2>
 1e2:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <sys_time+0x3>
 1e6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <time_1ms>
 1ea:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <time_1ms+0x1>
 1ee:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <time_1ms+0x2>
 1f2:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <time_1ms+0x3>
				//MCUCR |= (1 << ISC00);
			//}else{
				//MCUCR &= ~(1 << ISC00);
			//}	// Interrupt 1 Sense Control look calc_wheelspeed.c [Table MCU_Control_Reg_1]
			
			SPI_Data_Reg = wheelspeed;
 1f6:	8f e2       	ldi	r24, 0x2F	; 47
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <wheelspeed>
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18

		} // end of 1ms
		
		if(TIME_PASSED_10_MS)
 202:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <sys_time>
 206:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <sys_time+0x1>
 20a:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <sys_time+0x2>
 20e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <sys_time+0x3>
 212:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <time_10ms>
 216:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <time_10ms+0x1>
 21a:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <time_10ms+0x2>
 21e:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <time_10ms+0x3>
 222:	79 01       	movw	r14, r18
 224:	8a 01       	movw	r16, r20
 226:	e8 1a       	sub	r14, r24
 228:	f9 0a       	sbc	r15, r25
 22a:	0a 0b       	sbc	r16, r26
 22c:	1b 0b       	sbc	r17, r27
 22e:	d8 01       	movw	r26, r16
 230:	c7 01       	movw	r24, r14
 232:	0a 97       	sbiw	r24, 0x0a	; 10
 234:	a1 05       	cpc	r26, r1
 236:	b1 05       	cpc	r27, r1
 238:	80 f0       	brcs	.+32     	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
		{
			time_10ms = sys_time;
 23a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sys_time>
 23e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sys_time+0x1>
 242:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <sys_time+0x2>
 246:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <sys_time+0x3>
 24a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <time_10ms>
 24e:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <time_10ms+0x1>
 252:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <time_10ms+0x2>
 256:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <time_10ms+0x3>
			
			
		} // end of 10ms

		if (TIME_PASSED_100_MS)
 25a:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <sys_time>
 25e:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <sys_time+0x1>
 262:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <sys_time+0x2>
 266:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <sys_time+0x3>
 26a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <time_100ms>
 26e:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <time_100ms+0x1>
 272:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <time_100ms+0x2>
 276:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <time_100ms+0x3>
 27a:	79 01       	movw	r14, r18
 27c:	8a 01       	movw	r16, r20
 27e:	e8 1a       	sub	r14, r24
 280:	f9 0a       	sbc	r15, r25
 282:	0a 0b       	sbc	r16, r26
 284:	1b 0b       	sbc	r17, r27
 286:	d8 01       	movw	r26, r16
 288:	c7 01       	movw	r24, r14
 28a:	84 36       	cpi	r24, 0x64	; 100
 28c:	91 05       	cpc	r25, r1
 28e:	a1 05       	cpc	r26, r1
 290:	b1 05       	cpc	r27, r1
 292:	80 f0       	brcs	.+32     	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
		{
			time_100ms = sys_time;
 294:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sys_time>
 298:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sys_time+0x1>
 29c:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <sys_time+0x2>
 2a0:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <sys_time+0x3>
 2a4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <time_100ms>
 2a8:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <time_100ms+0x1>
 2ac:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <time_100ms+0x2>
 2b0:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <time_100ms+0x3>
			
			//sys_tick_heart();
			
		} // end of 100ms
		
		if (TIME_PASSED_200_MS)
 2b4:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <sys_time>
 2b8:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <sys_time+0x1>
 2bc:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <sys_time+0x2>
 2c0:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <sys_time+0x3>
 2c4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <time_200ms>
 2c8:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <time_200ms+0x1>
 2cc:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <time_200ms+0x2>
 2d0:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <time_200ms+0x3>
 2d4:	79 01       	movw	r14, r18
 2d6:	8a 01       	movw	r16, r20
 2d8:	e8 1a       	sub	r14, r24
 2da:	f9 0a       	sbc	r15, r25
 2dc:	0a 0b       	sbc	r16, r26
 2de:	1b 0b       	sbc	r17, r27
 2e0:	d8 01       	movw	r26, r16
 2e2:	c7 01       	movw	r24, r14
 2e4:	88 3c       	cpi	r24, 0xC8	; 200
 2e6:	91 05       	cpc	r25, r1
 2e8:	a1 05       	cpc	r26, r1
 2ea:	b1 05       	cpc	r27, r1
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <__EEPROM_REGION_LENGTH__+0xf0>
 2ee:	5e cf       	rjmp	.-324    	; 0x1ac <main+0x1e>
		{
			time_200ms = sys_time;
 2f0:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sys_time>
 2f4:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sys_time+0x1>
 2f8:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <sys_time+0x2>
 2fc:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <sys_time+0x3>
 300:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <time_200ms>
 304:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <time_200ms+0x1>
 308:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <time_200ms+0x2>
 30c:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <time_200ms+0x3>
			
		} // end of 200ms
    }
 310:	4d cf       	rjmp	.-358    	; 0x1ac <main+0x1e>

00000312 <sys_timer_config>:
}

void fault_detected()
{
	//PORT_ |= (1<<P__); //turn on red led when called (fault present)
}
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	83 e5       	ldi	r24, 0x53	; 83
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	2b e0       	ldi	r18, 0x0B	; 11
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
 324:	89 e5       	ldi	r24, 0x59	; 89
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	29 e5       	ldi	r18, 0x59	; 89
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	f9 01       	movw	r30, r18
 32e:	20 81       	ld	r18, Z
 330:	23 60       	ori	r18, 0x03	; 3
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
 336:	8c e5       	ldi	r24, 0x5C	; 92
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	29 ef       	ldi	r18, 0xF9	; 249
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
 340:	00 00       	nop
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	sys_time++;
 364:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <sys_time>
 368:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <sys_time+0x1>
 36c:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <sys_time+0x2>
 370:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <sys_time+0x3>
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	a1 1d       	adc	r26, r1
 378:	b1 1d       	adc	r27, r1
 37a:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <sys_time>
 37e:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <sys_time+0x1>
 382:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <sys_time+0x2>
 386:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <sys_time+0x3>
 38a:	00 00       	nop
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	0f 90       	pop	r0
 39a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <SPI_SlaveInit>:
{																//
	/* Wait for reception complete */							//
	while(!(SPI_Status_Reg & (1<<SPI_Interrupft_Flag)));		//
	/* Return data register */									//
	return SPI_Data_Reg;										//
}																//
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	87 e3       	ldi	r24, 0x37	; 55
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	27 e3       	ldi	r18, 0x37	; 55
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	2f 74       	andi	r18, 0x4F	; 79
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
 3be:	87 e3       	ldi	r24, 0x37	; 55
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	27 e3       	ldi	r18, 0x37	; 55
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	f9 01       	movw	r30, r18
 3c8:	20 81       	ld	r18, Z
 3ca:	20 64       	ori	r18, 0x40	; 64
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
 3d0:	8d e2       	ldi	r24, 0x2D	; 45
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	2d e2       	ldi	r18, 0x2D	; 45
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	f9 01       	movw	r30, r18
 3da:	20 81       	ld	r18, Z
 3dc:	20 6c       	ori	r18, 0xC0	; 192
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
 3e2:	8a e3       	ldi	r24, 0x3A	; 58
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	2a e3       	ldi	r18, 0x3A	; 58
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	f9 01       	movw	r30, r18
 3ec:	20 81       	ld	r18, Z
 3ee:	2f 7e       	andi	r18, 0xEF	; 239
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
 3f4:	00 00       	nop
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <__vector_10>:

ISR(SPI_STC_vect)
{
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	2f 93       	push	r18
 40a:	3f 93       	push	r19
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
	if (SPDR == 0x22)
 41c:	8f e2       	ldi	r24, 0x2F	; 47
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	fc 01       	movw	r30, r24
 422:	80 81       	ld	r24, Z
 424:	82 32       	cpi	r24, 0x22	; 34
 426:	51 f4       	brne	.+20     	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
	{
		PORTA |= (1<<PA4);
 428:	8b e3       	ldi	r24, 0x3B	; 59
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	2b e3       	ldi	r18, 0x3B	; 59
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	f9 01       	movw	r30, r18
 432:	20 81       	ld	r18, Z
 434:	20 61       	ori	r18, 0x10	; 16
 436:	fc 01       	movw	r30, r24
 438:	20 83       	st	Z, r18
 43a:	09 c0       	rjmp	.+18     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
	}else
	{
		PORTA &= ~(1<<PA4);
 43c:	8b e3       	ldi	r24, 0x3B	; 59
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	2b e3       	ldi	r18, 0x3B	; 59
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	f9 01       	movw	r30, r18
 446:	20 81       	ld	r18, Z
 448:	2f 7e       	andi	r18, 0xEF	; 239
 44a:	fc 01       	movw	r30, r24
 44c:	20 83       	st	Z, r18
	}
	if(k==0)
 44e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <k>
 452:	88 23       	and	r24, r24
 454:	61 f4       	brne	.+24     	; 0x46e <__stack+0xf>
	{
		SPI_Data_Reg = spi_data[0];
 456:	8f e2       	ldi	r24, 0x2F	; 47
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <spi_data>
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
		k++;
 462:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <k>
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <k>
	else
	{
		SPI_Data_Reg = spi_data[1];
		k=0;
	}
 46c:	08 c0       	rjmp	.+16     	; 0x47e <__stack+0x1f>
		SPI_Data_Reg = spi_data[0];
		k++;
	}
	else
	{
		SPI_Data_Reg = spi_data[1];
 46e:	8f e2       	ldi	r24, 0x2F	; 47
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <spi_data+0x1>
 476:	fc 01       	movw	r30, r24
 478:	20 83       	st	Z, r18
		k=0;
 47a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <k>
	}
 47e:	00 00       	nop
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
