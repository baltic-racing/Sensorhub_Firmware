
ATmega16_Wheelspeed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  0000016a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f1  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000669  00000000  00000000  00000a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000411  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  0000192d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000199d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
float timediffinterval = 0;


int main(void)
{
	SPI_SlaveInit();
  7c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_SlaveInit>
	uint8_t data = 0;
    /* Replace with your application code */
    while (1) 
    {
		data = SPI_SlaveReceive();
  80:	0e 94 75 00 	call	0xea	; 0xea <SPI_SlaveReceive>
		
		if((sys_time-time_old) >= 1)
  84:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sys_time>
  88:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <sys_time+0x1>
  8c:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <sys_time+0x2>
  90:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <sys_time+0x3>
  94:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <time_old>
  98:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <time_old+0x1>
  9c:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <time_old+0x2>
  a0:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <time_old+0x3>
  a4:	84 17       	cp	r24, r20
  a6:	95 07       	cpc	r25, r21
  a8:	a6 07       	cpc	r26, r22
  aa:	b7 07       	cpc	r27, r23
  ac:	69 f0       	breq	.+26     	; 0xc8 <main+0x4c>
		{
			time_old = sys_time;
  ae:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <time_old>
  b2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <time_old+0x1>
  b6:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <time_old+0x2>
  ba:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <time_old+0x3>
			sys_time_10++;
  be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		
		if(sys_time_10 >= 10)
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	8a 30       	cpi	r24, 0x0A	; 10
  ce:	c0 f2       	brcs	.-80     	; 0x80 <main+0x4>
		{
			sys_time_10 = 0;
  d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	d5 cf       	rjmp	.-86     	; 0x80 <main+0x4>

000000d6 <SPI_SlaveInit>:
}

void SPI_SlaveInit()
{
	//Set MOSI, SCK, SS as input
	DDRB &= ~((1<<MOSI) | (1<<SCK) | (1<<SS_uC));
  d6:	87 b3       	in	r24, 0x17	; 23
  d8:	8f 74       	andi	r24, 0x4F	; 79
  da:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as output
	DDRB |= (1<<MISO);
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	87 bb       	out	0x17, r24	; 23
	
	//enables SPI
	SPI_Control_Reg |= (1<<SPI_Enable);
  e2:	8d b1       	in	r24, 0x0d	; 13
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	8d b9       	out	0x0d, r24	; 13
  e8:	08 95       	ret

000000ea <SPI_SlaveReceive>:
}

char SPI_SlaveReceive()
{
	/* Wait for reception complete */
	while(!(SPI_Status_Reg & (1<<SPI_Interrupft_Flag)));
  ea:	77 9b       	sbis	0x0e, 7	; 14
  ec:	fe cf       	rjmp	.-4      	; 0xea <SPI_SlaveReceive>
	/* Return data register */
	return SPI_Data_Reg;
  ee:	8f b1       	in	r24, 0x0f	; 15
  f0:	08 95       	ret

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
