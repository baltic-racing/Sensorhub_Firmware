
sensorhub_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001c96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c22  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800100  00800100  00001c96  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001c96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f8  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000daa  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be3  00000000  00000000  0000407a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00004c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000997  00000000  00000000  00005124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000099c  00000000  00000000  00005abb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
       2:	00 00       	nop
       4:	99 c0       	rjmp	.+306    	; 0x138 <__bad_interrupt>
       6:	00 00       	nop
       8:	97 c0       	rjmp	.+302    	; 0x138 <__bad_interrupt>
       a:	00 00       	nop
       c:	95 c0       	rjmp	.+298    	; 0x138 <__bad_interrupt>
       e:	00 00       	nop
      10:	93 c0       	rjmp	.+294    	; 0x138 <__bad_interrupt>
      12:	00 00       	nop
      14:	91 c0       	rjmp	.+290    	; 0x138 <__bad_interrupt>
      16:	00 00       	nop
      18:	8f c0       	rjmp	.+286    	; 0x138 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8d c0       	rjmp	.+282    	; 0x138 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8b c0       	rjmp	.+278    	; 0x138 <__bad_interrupt>
      22:	00 00       	nop
      24:	89 c0       	rjmp	.+274    	; 0x138 <__bad_interrupt>
      26:	00 00       	nop
      28:	87 c0       	rjmp	.+270    	; 0x138 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	85 c0       	rjmp	.+266    	; 0x138 <__bad_interrupt>
      2e:	00 00       	nop
      30:	83 c0       	rjmp	.+262    	; 0x138 <__bad_interrupt>
      32:	00 00       	nop
      34:	81 c0       	rjmp	.+258    	; 0x138 <__bad_interrupt>
      36:	00 00       	nop
      38:	7f c0       	rjmp	.+254    	; 0x138 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7d c0       	rjmp	.+250    	; 0x138 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c6       	rjmp	.+3346   	; 0xd54 <__vector_16>
      42:	00 00       	nop
      44:	79 c0       	rjmp	.+242    	; 0x138 <__bad_interrupt>
      46:	00 00       	nop
      48:	77 c0       	rjmp	.+238    	; 0x138 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	75 c0       	rjmp	.+234    	; 0x138 <__bad_interrupt>
      4e:	00 00       	nop
      50:	02 c5       	rjmp	.+2564   	; 0xa56 <__vector_20>
      52:	00 00       	nop
      54:	71 c0       	rjmp	.+226    	; 0x138 <__bad_interrupt>
      56:	00 00       	nop
      58:	6f c0       	rjmp	.+222    	; 0x138 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6d c0       	rjmp	.+218    	; 0x138 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6b c0       	rjmp	.+214    	; 0x138 <__bad_interrupt>
      62:	00 00       	nop
      64:	a0 c0       	rjmp	.+320    	; 0x1a6 <__vector_25>
      66:	00 00       	nop
      68:	67 c0       	rjmp	.+206    	; 0x138 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	65 c0       	rjmp	.+202    	; 0x138 <__bad_interrupt>
      6e:	00 00       	nop
      70:	63 c0       	rjmp	.+198    	; 0x138 <__bad_interrupt>
      72:	00 00       	nop
      74:	61 c0       	rjmp	.+194    	; 0x138 <__bad_interrupt>
      76:	00 00       	nop
      78:	5f c0       	rjmp	.+190    	; 0x138 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5d c0       	rjmp	.+186    	; 0x138 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5b c0       	rjmp	.+182    	; 0x138 <__bad_interrupt>
      82:	00 00       	nop
      84:	59 c0       	rjmp	.+178    	; 0x138 <__bad_interrupt>
      86:	00 00       	nop
      88:	57 c0       	rjmp	.+174    	; 0x138 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	55 c0       	rjmp	.+170    	; 0x138 <__bad_interrupt>
      8e:	00 00       	nop
      90:	53 c0       	rjmp	.+166    	; 0x138 <__bad_interrupt>
      92:	00 00       	nop
      94:	08 00       	.word	0x0008	; ????
      96:	00 00       	nop
      98:	be 92       	st	-X, r11
      9a:	24 49       	sbci	r18, 0x94	; 148
      9c:	12 3e       	cpi	r17, 0xE2	; 226
      9e:	ab aa       	std	Y+51, r10	; 0x33
      a0:	aa 2a       	or	r10, r26
      a2:	be cd       	rjmp	.-1156   	; 0xfffffc20 <__eeprom_end+0xff7efc20>
      a4:	cc cc       	rjmp	.-1640   	; 0xfffffa3e <__eeprom_end+0xff7efa3e>
      a6:	4c 3e       	cpi	r20, 0xEC	; 236
      a8:	00 00       	nop
      aa:	00 80       	ld	r0, Z
      ac:	be ab       	std	Y+54, r27	; 0x36
      ae:	aa aa       	std	Y+50, r10	; 0x32
      b0:	aa 3e       	cpi	r26, 0xEA	; 234
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	bf 00       	.word	0x00bf	; ????
      b8:	00 00       	nop
      ba:	80 3f       	cpi	r24, 0xF0	; 240
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	00 08       	sbc	r0, r0
      c2:	41 78       	andi	r20, 0x81	; 129
      c4:	d3 bb       	out	0x13, r29	; 19
      c6:	43 87       	std	Z+11, r20	; 0x0b
      c8:	d1 13       	cpse	r29, r17
      ca:	3d 19       	sub	r19, r13
      cc:	0e 3c       	cpi	r16, 0xCE	; 206
      ce:	c3 bd       	out	0x23, r28	; 35
      d0:	42 82       	std	Z+2, r4	; 0x02
      d2:	ad 2b       	or	r26, r29
      d4:	3e 68       	ori	r19, 0x8E	; 142
      d6:	ec 82       	std	Y+4, r14	; 0x04
      d8:	76 be       	out	0x36, r7	; 54
      da:	d9 8f       	std	Y+25, r29	; 0x19
      dc:	e1 a9       	ldd	r30, Z+49	; 0x31
      de:	3e 4c       	sbci	r19, 0xCE	; 206
      e0:	80 ef       	ldi	r24, 0xF0	; 240
      e2:	ff be       	out	0x3f, r15	; 63
      e4:	01 c4       	rjmp	.+2050   	; 0x8e8 <main+0x214>
      e6:	ff 7f       	andi	r31, 0xFF	; 255
      e8:	3f 00       	.word	0x003f	; ????
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	07 63       	ori	r16, 0x37	; 55
      f0:	42 36       	cpi	r20, 0x62	; 98
      f2:	b7 9b       	sbis	0x16, 7	; 22
      f4:	d8 a7       	std	Y+40, r29	; 0x28
      f6:	1a 39       	cpi	r17, 0x9A	; 154
      f8:	68 56       	subi	r22, 0x68	; 104
      fa:	18 ae       	std	Y+56, r1	; 0x38
      fc:	ba ab       	std	Y+50, r27	; 0x32
      fe:	55 8c       	ldd	r5, Z+29	; 0x1d
     100:	1d 3c       	cpi	r17, 0xCD	; 205
     102:	b7 cc       	rjmp	.-1682   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
     104:	57 63       	ori	r21, 0x37	; 55
     106:	bd 6d       	ori	r27, 0xDD	; 221
     108:	ed fd       	.word	0xfded	; ????
     10a:	75 3e       	cpi	r23, 0xE5	; 229
     10c:	f6 17       	cp	r31, r22
     10e:	72 31       	cpi	r23, 0x12	; 18
     110:	bf 00       	.word	0x00bf	; ????
     112:	00 00       	nop
     114:	80 3f       	cpi	r24, 0xF0	; 240

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d0 e1       	ldi	r29, 0x10	; 16
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_clear_bss>:
     122:	21 e0       	ldi	r18, 0x01	; 1
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	ac 33       	cpi	r26, 0x3C	; 60
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	d0 d2       	rcall	.+1440   	; 0x6d4 <main>
     134:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <_exit>

00000138 <__bad_interrupt>:
     138:	63 cf       	rjmp	.-314    	; 0x0 <__vectors>

0000013a <adc_config>:
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	21 e4       	ldi	r18, 0x41	; 65
     148:	fc 01       	movw	r30, r24
     14a:	20 83       	st	Z, r18
     14c:	8a e7       	ldi	r24, 0x7A	; 122
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	2c e8       	ldi	r18, 0x8C	; 140
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
     156:	8a e7       	ldi	r24, 0x7A	; 122
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	2a e7       	ldi	r18, 0x7A	; 122
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	f9 01       	movw	r30, r18
     160:	20 81       	ld	r18, Z
     162:	20 64       	ori	r18, 0x40	; 64
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
     168:	8e e7       	ldi	r24, 0x7E	; 126
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	2e e7       	ldi	r18, 0x7E	; 126
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	f9 01       	movw	r30, r18
     172:	20 81       	ld	r18, Z
     174:	21 60       	ori	r18, 0x01	; 1
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
     17a:	00 00       	nop
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <adc_start_conversion>:
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	8a e7       	ldi	r24, 0x7A	; 122
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	2d ec       	ldi	r18, 0xCD	; 205
     190:	fc 01       	movw	r30, r24
     192:	20 83       	st	Z, r18
     194:	83 e5       	ldi	r24, 0x53	; 83
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	22 e0       	ldi	r18, 0x02	; 2
     19a:	fc 01       	movw	r30, r24
     19c:	20 83       	st	Z, r18
     19e:	00 00       	nop
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <__vector_25>:
     1a6:	1f 92       	push	r1
     1a8:	0f 92       	push	r0
     1aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     1b6:	0f 92       	push	r0
     1b8:	2f 93       	push	r18
     1ba:	3f 93       	push	r19
     1bc:	8f 93       	push	r24
     1be:	9f 93       	push	r25
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     1d0:	88 2f       	mov	r24, r24
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	28 e7       	ldi	r18, 0x78	; 120
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	f9 01       	movw	r30, r18
     1da:	20 81       	ld	r18, Z
     1dc:	31 81       	ldd	r19, Z+1	; 0x01
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	80 5f       	subi	r24, 0xF0	; 240
     1e4:	9e 4f       	sbci	r25, 0xFE	; 254
     1e6:	fc 01       	movw	r30, r24
     1e8:	31 83       	std	Z+1, r19	; 0x01
     1ea:	20 83       	st	Z, r18
     1ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     1f0:	8f 5f       	subi	r24, 0xFF	; 255
     1f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     1f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     1fa:	85 30       	cpi	r24, 0x05	; 5
     1fc:	11 f4       	brne	.+4      	; 0x202 <__vector_25+0x5c>
     1fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     202:	8c e7       	ldi	r24, 0x7C	; 124
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     20a:	20 64       	ori	r18, 0x40	; 64
     20c:	fc 01       	movw	r30, r24
     20e:	20 83       	st	Z, r18
     210:	00 00       	nop
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	ff 91       	pop	r31
     218:	ef 91       	pop	r30
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	3f 91       	pop	r19
     220:	2f 91       	pop	r18
     222:	0f 90       	pop	r0
     224:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     228:	0f 90       	pop	r0
     22a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti

00000234 <adc_get_1>:
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	00 d0       	rcall	.+0      	; 0x23a <adc_get_1+0x6>
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <adc_values>
     242:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <adc_values+0x1>
     246:	9a 83       	std	Y+2, r25	; 0x02
     248:	89 83       	std	Y+1, r24	; 0x01
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	08 95       	ret

00000258 <adc_get_2>:
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	00 d0       	rcall	.+0      	; 0x25e <adc_get_2+0x6>
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adc_values+0x2>
     266:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <adc_values+0x3>
     26a:	9a 83       	std	Y+2, r25	; 0x02
     26c:	89 83       	std	Y+1, r24	; 0x01
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	9a 81       	ldd	r25, Y+2	; 0x02
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <adc_get_3>:
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	00 d0       	rcall	.+0      	; 0x282 <adc_get_3+0x6>
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <adc_values+0x4>
     28a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <adc_values+0x5>
     28e:	9a 83       	std	Y+2, r25	; 0x02
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <adc_get_4>:
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <adc_get_4+0x6>
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <adc_values+0x6>
     2ae:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <adc_values+0x7>
     2b2:	9a 83       	std	Y+2, r25	; 0x02
     2b4:	89 83       	std	Y+1, r24	; 0x01
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <adc_get_5>:
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <adc_get_5+0x6>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_values+0x8>
     2d2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <adc_values+0x9>
     2d6:	9a 83       	std	Y+2, r25	; 0x02
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <can_check_free>:

#include "canlib.h"
#include <avr/io.h>


uint8_t can_check_free(uint8_t mobnum){
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <can_check_free+0x6>
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t mob_status = 0;
     2f4:	19 82       	std	Y+1, r1	; 0x01
	
	if(mobnum >7){
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	88 30       	cpi	r24, 0x08	; 8
     2fa:	c0 f0       	brcs	.+48     	; 0x32c <can_check_free+0x44>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
     2fc:	8d ed       	ldi	r24, 0xDD	; 221
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	fc 01       	movw	r30, r24
     302:	80 81       	ld	r24, Z
     304:	88 2f       	mov	r24, r24
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	2a 81       	ldd	r18, Y+2	; 0x02
     30a:	22 2f       	mov	r18, r18
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	28 50       	subi	r18, 0x08	; 8
     310:	31 09       	sbc	r19, r1
     312:	02 c0       	rjmp	.+4      	; 0x318 <can_check_free+0x30>
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	2a 95       	dec	r18
     31a:	e2 f7       	brpl	.-8      	; 0x314 <can_check_free+0x2c>
     31c:	81 70       	andi	r24, 0x01	; 1
     31e:	99 27       	eor	r25, r25
     320:	21 e0       	ldi	r18, 0x01	; 1
     322:	89 2b       	or	r24, r25
     324:	09 f0       	breq	.+2      	; 0x328 <can_check_free+0x40>
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	29 83       	std	Y+1, r18	; 0x01
     32a:	15 c0       	rjmp	.+42     	; 0x356 <can_check_free+0x6e>


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
     32c:	8c ed       	ldi	r24, 0xDC	; 220
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	80 81       	ld	r24, Z
     334:	88 2f       	mov	r24, r24
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	2a 81       	ldd	r18, Y+2	; 0x02
     33a:	22 2f       	mov	r18, r18
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	02 c0       	rjmp	.+4      	; 0x344 <can_check_free+0x5c>
     340:	95 95       	asr	r25
     342:	87 95       	ror	r24
     344:	2a 95       	dec	r18
     346:	e2 f7       	brpl	.-8      	; 0x340 <can_check_free+0x58>
     348:	81 70       	andi	r24, 0x01	; 1
     34a:	99 27       	eor	r25, r25
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	89 2b       	or	r24, r25
     350:	09 f0       	breq	.+2      	; 0x354 <can_check_free+0x6c>
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	29 83       	std	Y+1, r18	; 0x01
	}

	return mob_status;
     356:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <can_cfg>:
void can_cfg(){
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	00 d0       	rcall	.+0      	; 0x368 <can_cfg+0x6>
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
	
	CANGCON = 0; // Disable CAN
     36c:	88 ed       	ldi	r24, 0xD8	; 216
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	fc 01       	movw	r30, r24
     372:	10 82       	st	Z, r1
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     374:	19 82       	std	Y+1, r1	; 0x01
     376:	56 c0       	rjmp	.+172    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
     378:	8d ee       	ldi	r24, 0xED	; 237
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	29 81       	ldd	r18, Y+1	; 0x01
     37e:	22 2f       	mov	r18, r18
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	22 95       	swap	r18
     384:	32 95       	swap	r19
     386:	30 7f       	andi	r19, 0xF0	; 240
     388:	32 27       	eor	r19, r18
     38a:	20 7f       	andi	r18, 0xF0	; 240
     38c:	32 27       	eor	r19, r18
     38e:	28 60       	ori	r18, 0x08	; 8
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18
		CANSTMOB = 0;
     394:	8e ee       	ldi	r24, 0xEE	; 238
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	fc 01       	movw	r30, r24
     39a:	10 82       	st	Z, r1
		CANCDMOB = 0;
     39c:	8f ee       	ldi	r24, 0xEF	; 239
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	10 82       	st	Z, r1
		CANIDT4 = 0;
     3a4:	80 ef       	ldi	r24, 0xF0	; 240
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	fc 01       	movw	r30, r24
     3aa:	10 82       	st	Z, r1
		CANIDT3 = 0;
     3ac:	81 ef       	ldi	r24, 0xF1	; 241
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	fc 01       	movw	r30, r24
     3b2:	10 82       	st	Z, r1
		CANIDT2 = 0;
     3b4:	82 ef       	ldi	r24, 0xF2	; 242
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	10 82       	st	Z, r1
		CANIDT1 = 0;
     3bc:	83 ef       	ldi	r24, 0xF3	; 243
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	fc 01       	movw	r30, r24
     3c2:	10 82       	st	Z, r1
		CANIDM4 = 0;
     3c4:	84 ef       	ldi	r24, 0xF4	; 244
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fc 01       	movw	r30, r24
     3ca:	10 82       	st	Z, r1
		CANIDM3 = 0;
     3cc:	85 ef       	ldi	r24, 0xF5	; 245
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	fc 01       	movw	r30, r24
     3d2:	10 82       	st	Z, r1
		CANIDM2 = 0;
     3d4:	86 ef       	ldi	r24, 0xF6	; 246
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	10 82       	st	Z, r1
		CANIDM1 = 0;
     3dc:	87 ef       	ldi	r24, 0xF7	; 247
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	fc 01       	movw	r30, r24
     3e2:	10 82       	st	Z, r1
		for (uint8_t byte = 0; byte < 8; byte++){
     3e4:	1a 82       	std	Y+2, r1	; 0x02
     3e6:	18 c0       	rjmp	.+48     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
     3e8:	8d ee       	ldi	r24, 0xED	; 237
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	29 81       	ldd	r18, Y+1	; 0x01
     3ee:	22 2f       	mov	r18, r18
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	22 95       	swap	r18
     3f4:	32 95       	swap	r19
     3f6:	30 7f       	andi	r19, 0xF0	; 240
     3f8:	32 27       	eor	r19, r18
     3fa:	20 7f       	andi	r18, 0xF0	; 240
     3fc:	32 27       	eor	r19, r18
     3fe:	32 2f       	mov	r19, r18
     400:	2a 81       	ldd	r18, Y+2	; 0x02
     402:	23 2b       	or	r18, r19
     404:	28 60       	ori	r18, 0x08	; 8
     406:	fc 01       	movw	r30, r24
     408:	20 83       	st	Z, r18
			CANMSG = 0;
     40a:	8a ef       	ldi	r24, 0xFA	; 250
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	fc 01       	movw	r30, r24
     410:	10 82       	st	Z, r1
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	8a 83       	std	Y+2, r24	; 0x02
     418:	8a 81       	ldd	r24, Y+2	; 0x02
     41a:	88 30       	cpi	r24, 0x08	; 8
     41c:	28 f3       	brcs	.-54     	; 0x3e8 <can_cfg+0x86>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	8f 5f       	subi	r24, 0xFF	; 255
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	8f 30       	cpi	r24, 0x0F	; 15
     428:	08 f4       	brcc	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	a6 cf       	rjmp	.-180    	; 0x378 <can_cfg+0x16>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x02;// Set Baudrate
     42c:	82 ee       	ldi	r24, 0xE2	; 226
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	22 e0       	ldi	r18, 0x02	; 2
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
	CANBT2 = 0x0C;// 500kBaud according
     436:	83 ee       	ldi	r24, 0xE3	; 227
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2c e0       	ldi	r18, 0x0C	; 12
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
	CANBT3 = 0x37;// to Datasheet S. 267 with 16Mhz Oszi
     440:	84 ee       	ldi	r24, 0xE4	; 228
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	27 e3       	ldi	r18, 0x37	; 55
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18

	CANGIE = 0;
     44a:	8b ed       	ldi	r24, 0xDB	; 219
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	fc 01       	movw	r30, r24
     450:	10 82       	st	Z, r1

	CANGCON |= (1<<ENASTB); // Enable CAN
     452:	88 ed       	ldi	r24, 0xD8	; 216
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	28 ed       	ldi	r18, 0xD8	; 216
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	f9 01       	movw	r30, r18
     45c:	20 81       	ld	r18, Z
     45e:	22 60       	ori	r18, 0x02	; 2
     460:	fc 01       	movw	r30, r24
     462:	20 83       	st	Z, r18
	
	
	
}
     464:	00 00       	nop
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <can_rx>:
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	00 d0       	rcall	.+0      	; 0x476 <can_rx+0x6>
     476:	00 d0       	rcall	.+0      	; 0x478 <can_rx+0x8>
     478:	1f 92       	push	r1
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	9b 83       	std	Y+3, r25	; 0x03
     480:	8a 83       	std	Y+2, r24	; 0x02
     482:	7d 83       	std	Y+5, r23	; 0x05
     484:	6c 83       	std	Y+4, r22	; 0x04
	
	CANPAGE = to_receive->mob_number << MOBNB0;
     486:	8d ee       	ldi	r24, 0xED	; 237
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	2a 81       	ldd	r18, Y+2	; 0x02
     48c:	3b 81       	ldd	r19, Y+3	; 0x03
     48e:	f9 01       	movw	r30, r18
     490:	24 81       	ldd	r18, Z+4	; 0x04
     492:	22 95       	swap	r18
     494:	20 7f       	andi	r18, 0xF0	; 240
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	if (can_check_free(to_receive->mob_number)){
     49a:	8a 81       	ldd	r24, Y+2	; 0x02
     49c:	9b 81       	ldd	r25, Y+3	; 0x03
     49e:	fc 01       	movw	r30, r24
     4a0:	84 81       	ldd	r24, Z+4	; 0x04
     4a2:	22 df       	rcall	.-444    	; 0x2e8 <can_check_free>
     4a4:	88 23       	and	r24, r24
     4a6:	09 f4       	brne	.+2      	; 0x4aa <can_rx+0x3a>
     4a8:	50 c0       	rjmp	.+160    	; 0x54a <can_rx+0xda>
		/* load the id 11 bit */
		CANIDT1 = to_receive->mob_id >>3;
     4aa:	83 ef       	ldi	r24, 0xF3	; 243
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	2a 81       	ldd	r18, Y+2	; 0x02
     4b0:	3b 81       	ldd	r19, Y+3	; 0x03
     4b2:	f9 01       	movw	r30, r18
     4b4:	20 81       	ld	r18, Z
     4b6:	31 81       	ldd	r19, Z+1	; 0x01
     4b8:	36 95       	lsr	r19
     4ba:	27 95       	ror	r18
     4bc:	36 95       	lsr	r19
     4be:	27 95       	ror	r18
     4c0:	36 95       	lsr	r19
     4c2:	27 95       	ror	r18
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
		CANIDT2 = (to_receive->mob_id << 5)&0b11100000;
     4c8:	82 ef       	ldi	r24, 0xF2	; 242
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	2a 81       	ldd	r18, Y+2	; 0x02
     4ce:	3b 81       	ldd	r19, Y+3	; 0x03
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	31 81       	ldd	r19, Z+1	; 0x01
     4d6:	22 95       	swap	r18
     4d8:	22 0f       	add	r18, r18
     4da:	20 7e       	andi	r18, 0xE0	; 224
     4dc:	fc 01       	movw	r30, r24
     4de:	20 83       	st	Z, r18
		CANIDT3 = 0;
     4e0:	81 ef       	ldi	r24, 0xF1	; 241
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	fc 01       	movw	r30, r24
     4e6:	10 82       	st	Z, r1
		CANIDT4 = 1<<RTRTAG;
     4e8:	80 ef       	ldi	r24, 0xF0	; 240
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	24 e0       	ldi	r18, 0x04	; 4
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 83       	st	Z, r18
		CANIDM1 = to_receive->mob_idmask >>3;
     4f2:	87 ef       	ldi	r24, 0xF7	; 247
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	2a 81       	ldd	r18, Y+2	; 0x02
     4f8:	3b 81       	ldd	r19, Y+3	; 0x03
     4fa:	f9 01       	movw	r30, r18
     4fc:	22 81       	ldd	r18, Z+2	; 0x02
     4fe:	33 81       	ldd	r19, Z+3	; 0x03
     500:	36 95       	lsr	r19
     502:	27 95       	ror	r18
     504:	36 95       	lsr	r19
     506:	27 95       	ror	r18
     508:	36 95       	lsr	r19
     50a:	27 95       	ror	r18
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
		CANIDM2 = (to_receive->mob_idmask <<5)&0b11100000;
     510:	86 ef       	ldi	r24, 0xF6	; 246
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	2a 81       	ldd	r18, Y+2	; 0x02
     516:	3b 81       	ldd	r19, Y+3	; 0x03
     518:	f9 01       	movw	r30, r18
     51a:	22 81       	ldd	r18, Z+2	; 0x02
     51c:	33 81       	ldd	r19, Z+3	; 0x03
     51e:	22 95       	swap	r18
     520:	22 0f       	add	r18, r18
     522:	20 7e       	andi	r18, 0xE0	; 224
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
		CANIDM3 = 0;
     528:	85 ef       	ldi	r24, 0xF5	; 245
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	fc 01       	movw	r30, r24
     52e:	10 82       	st	Z, r1
		CANIDM4 = 0;
     530:	84 ef       	ldi	r24, 0xF4	; 244
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	fc 01       	movw	r30, r24
     536:	10 82       	st	Z, r1
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
     538:	8f ee       	ldi	r24, 0xEF	; 239
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	28 ec       	ldi	r18, 0xC8	; 200
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
		CANSTMOB = 0;
     542:	8e ee       	ldi	r24, 0xEE	; 238
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	fc 01       	movw	r30, r24
     548:	10 82       	st	Z, r1
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     54a:	19 82       	std	Y+1, r1	; 0x01
     54c:	24 c0       	rjmp	.+72     	; 0x596 <can_rx+0x126>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
     54e:	8d ee       	ldi	r24, 0xED	; 237
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	2a 81       	ldd	r18, Y+2	; 0x02
     554:	3b 81       	ldd	r19, Y+3	; 0x03
     556:	f9 01       	movw	r30, r18
     558:	24 81       	ldd	r18, Z+4	; 0x04
     55a:	22 2f       	mov	r18, r18
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	22 95       	swap	r18
     560:	32 95       	swap	r19
     562:	30 7f       	andi	r19, 0xF0	; 240
     564:	32 27       	eor	r19, r18
     566:	20 7f       	andi	r18, 0xF0	; 240
     568:	32 27       	eor	r19, r18
     56a:	32 2f       	mov	r19, r18
     56c:	29 81       	ldd	r18, Y+1	; 0x01
     56e:	23 2b       	or	r18, r19
     570:	28 60       	ori	r18, 0x08	; 8
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
		data[byte] = CANMSG;
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	88 2f       	mov	r24, r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	2c 81       	ldd	r18, Y+4	; 0x04
     57e:	3d 81       	ldd	r19, Y+5	; 0x05
     580:	82 0f       	add	r24, r18
     582:	93 1f       	adc	r25, r19
     584:	2a ef       	ldi	r18, 0xFA	; 250
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	f9 01       	movw	r30, r18
     58a:	20 81       	ld	r18, Z
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	8f 5f       	subi	r24, 0xFF	; 255
     594:	89 83       	std	Y+1, r24	; 0x01
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	88 30       	cpi	r24, 0x08	; 8
     59a:	c8 f2       	brcs	.-78     	; 0x54e <can_rx+0xde>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
     59c:	00 00       	nop
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <can_tx+0x6>
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <can_tx+0x8>
     5b6:	1f 92       	push	r1
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	9b 83       	std	Y+3, r25	; 0x03
     5be:	8a 83       	std	Y+2, r24	; 0x02
     5c0:	7d 83       	std	Y+5, r23	; 0x05
     5c2:	6c 83       	std	Y+4, r22	; 0x04
	
	for(uint8_t byte = 0; byte <8; byte++){
     5c4:	19 82       	std	Y+1, r1	; 0x01
     5c6:	24 c0       	rjmp	.+72     	; 0x610 <can_tx+0x62>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
     5c8:	8d ee       	ldi	r24, 0xED	; 237
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	2a 81       	ldd	r18, Y+2	; 0x02
     5ce:	3b 81       	ldd	r19, Y+3	; 0x03
     5d0:	f9 01       	movw	r30, r18
     5d2:	24 81       	ldd	r18, Z+4	; 0x04
     5d4:	22 2f       	mov	r18, r18
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	22 95       	swap	r18
     5da:	32 95       	swap	r19
     5dc:	30 7f       	andi	r19, 0xF0	; 240
     5de:	32 27       	eor	r19, r18
     5e0:	20 7f       	andi	r18, 0xF0	; 240
     5e2:	32 27       	eor	r19, r18
     5e4:	32 2f       	mov	r19, r18
     5e6:	29 81       	ldd	r18, Y+1	; 0x01
     5e8:	23 2b       	or	r18, r19
     5ea:	28 60       	ori	r18, 0x08	; 8
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18
		CANMSG = data[byte];
     5f0:	8a ef       	ldi	r24, 0xFA	; 250
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	29 81       	ldd	r18, Y+1	; 0x01
     5f6:	22 2f       	mov	r18, r18
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	4c 81       	ldd	r20, Y+4	; 0x04
     5fc:	5d 81       	ldd	r21, Y+5	; 0x05
     5fe:	24 0f       	add	r18, r20
     600:	35 1f       	adc	r19, r21
     602:	f9 01       	movw	r30, r18
     604:	20 81       	ld	r18, Z
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	8f 5f       	subi	r24, 0xFF	; 255
     60e:	89 83       	std	Y+1, r24	; 0x01
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	88 30       	cpi	r24, 0x08	; 8
     614:	c8 f2       	brcs	.-78     	; 0x5c8 <can_tx+0x1a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
     616:	8d ee       	ldi	r24, 0xED	; 237
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	2a 81       	ldd	r18, Y+2	; 0x02
     61c:	3b 81       	ldd	r19, Y+3	; 0x03
     61e:	f9 01       	movw	r30, r18
     620:	24 81       	ldd	r18, Z+4	; 0x04
     622:	22 95       	swap	r18
     624:	20 7f       	andi	r18, 0xF0	; 240
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
	if (can_check_free(to_send->mob_number)){
     62a:	8a 81       	ldd	r24, Y+2	; 0x02
     62c:	9b 81       	ldd	r25, Y+3	; 0x03
     62e:	fc 01       	movw	r30, r24
     630:	84 81       	ldd	r24, Z+4	; 0x04
     632:	5a de       	rcall	.-844    	; 0x2e8 <can_check_free>
     634:	88 23       	and	r24, r24
     636:	09 f4       	brne	.+2      	; 0x63a <can_tx+0x8c>
     638:	44 c0       	rjmp	.+136    	; 0x6c2 <can_tx+0x114>
		CANSTMOB = 0;
     63a:	8e ee       	ldi	r24, 0xEE	; 238
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	fc 01       	movw	r30, r24
     640:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
     642:	83 ef       	ldi	r24, 0xF3	; 243
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	2a 81       	ldd	r18, Y+2	; 0x02
     648:	3b 81       	ldd	r19, Y+3	; 0x03
     64a:	f9 01       	movw	r30, r18
     64c:	20 81       	ld	r18, Z
     64e:	31 81       	ldd	r19, Z+1	; 0x01
     650:	36 95       	lsr	r19
     652:	27 95       	ror	r18
     654:	36 95       	lsr	r19
     656:	27 95       	ror	r18
     658:	36 95       	lsr	r19
     65a:	27 95       	ror	r18
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
     660:	82 ef       	ldi	r24, 0xF2	; 242
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	2a 81       	ldd	r18, Y+2	; 0x02
     666:	3b 81       	ldd	r19, Y+3	; 0x03
     668:	f9 01       	movw	r30, r18
     66a:	20 81       	ld	r18, Z
     66c:	31 81       	ldd	r19, Z+1	; 0x01
     66e:	22 95       	swap	r18
     670:	22 0f       	add	r18, r18
     672:	20 7e       	andi	r18, 0xE0	; 224
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18
		CANIDT3 = 0;
     678:	81 ef       	ldi	r24, 0xF1	; 241
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	fc 01       	movw	r30, r24
     67e:	10 82       	st	Z, r1
		CANIDT4 = 0;
     680:	80 ef       	ldi	r24, 0xF0	; 240
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	fc 01       	movw	r30, r24
     686:	10 82       	st	Z, r1
		CANIDM1 = 0; //0b11111111;
     688:	87 ef       	ldi	r24, 0xF7	; 247
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	fc 01       	movw	r30, r24
     68e:	10 82       	st	Z, r1
		CANIDM2 = 0; //0b11100000;
     690:	86 ef       	ldi	r24, 0xF6	; 246
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	fc 01       	movw	r30, r24
     696:	10 82       	st	Z, r1
		CANIDM3 = 0;
     698:	85 ef       	ldi	r24, 0xF5	; 245
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	fc 01       	movw	r30, r24
     69e:	10 82       	st	Z, r1
		CANIDM4 = 0;
     6a0:	84 ef       	ldi	r24, 0xF4	; 244
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	fc 01       	movw	r30, r24
     6a6:	10 82       	st	Z, r1
		CANSTMOB = 0;
     6a8:	8e ee       	ldi	r24, 0xEE	; 238
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fc 01       	movw	r30, r24
     6ae:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
     6b0:	8f ee       	ldi	r24, 0xEF	; 239
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	28 e4       	ldi	r18, 0x48	; 72
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
		CANSTMOB = 0;
     6ba:	8e ee       	ldi	r24, 0xEE	; 238
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	fc 01       	movw	r30, r24
     6c0:	10 82       	st	Z, r1
	}
	
}
     6c2:	00 00       	nop
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <main>:
uint16_t adc_data_1;
uint16_t adc_data_2;
uint16_t adc_data_3;

int main(void)
{
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	a7 97       	sbiw	r28, 0x27	; 39
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
	can_cfg();
     6fa:	33 de       	rcall	.-922    	; 0x362 <can_cfg>
	sys_timer_config();
     6fc:	14 d3       	rcall	.+1576   	; 0xd26 <sys_timer_config>
	port_config();
     6fe:	df d2       	rcall	.+1470   	; 0xcbe <port_config>
	adc_config();
     700:	1c dd       	rcall	.-1480   	; 0x13a <adc_config>
     702:	48 d1       	rcall	.+656    	; 0x994 <SPI_config>
	SPI_config();
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	95 e0       	ldi	r25, 0x05	; 5
	
	// Struct for the CAN Message that contains the sampled Sensor Data

	struct CAN_MOB can_SH_mob1;
	can_SH_mob1.mob_id = 0x500;
     708:	9a 83       	std	Y+2, r25	; 0x02
     70a:	89 83       	std	Y+1, r24	; 0x01
     70c:	1c 82       	std	Y+4, r1	; 0x04
     70e:	1b 82       	std	Y+3, r1	; 0x03
	can_SH_mob1.mob_idmask = 0; //We are sending this CAN Message Object (MOB) therefore we do not need an ID MASK
     710:	1d 82       	std	Y+5, r1	; 0x05
     712:	81 e0       	ldi	r24, 0x01	; 1
	can_SH_mob1.mob_number = 0;
     714:	95 e0       	ldi	r25, 0x05	; 5
	uint8_t SH_databytes1[8]; 
	
	struct CAN_MOB can_SH_mob2;
	can_SH_mob2.mob_id = 0x501;
     716:	9f 87       	std	Y+15, r25	; 0x0f
     718:	8e 87       	std	Y+14, r24	; 0x0e
     71a:	19 8a       	std	Y+17, r1	; 0x11
     71c:	18 8a       	std	Y+16, r1	; 0x10
	can_SH_mob2.mob_idmask = 0; //We are sending this CAN Message Object (MOB) therefore we do not need an ID MASK
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	8a 8b       	std	Y+18, r24	; 0x12
	can_SH_mob2.mob_number = 1;
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	95 e0       	ldi	r25, 0x05	; 5
	uint8_t SH_databytes2[8];
	
	struct CAN_MOB can_SH_mob3;
	can_SH_mob3.mob_id = 0x502;
     726:	9c 8f       	std	Y+28, r25	; 0x1c
     728:	8b 8f       	std	Y+27, r24	; 0x1b
     72a:	1e 8e       	std	Y+30, r1	; 0x1e
     72c:	1d 8e       	std	Y+29, r1	; 0x1d
	can_SH_mob3.mob_idmask = 0; //We are sending this CAN Message Object (MOB) therefore we do not need an ID MASK
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	8f 8f       	std	Y+31, r24	; 0x1f
	can_SH_mob3.mob_number = 2;
     732:	78 94       	sei
     734:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <sys_time>
	
    while (1) {
		
		//1ms loop 1000Hz
		
		if((sys_time - time_old) >= 1){ 
     738:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <sys_time+0x1>
     73c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <sys_time+0x2>
     740:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <sys_time+0x3>
     744:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_old>
     748:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <time_old+0x1>
     74c:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <time_old+0x2>
     750:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <time_old+0x3>
     754:	28 17       	cp	r18, r24
     756:	39 07       	cpc	r19, r25
     758:	4a 07       	cpc	r20, r26
     75a:	5b 07       	cpc	r21, r27
     75c:	09 f4       	brne	.+2      	; 0x760 <main+0x8c>
     75e:	79 c0       	rjmp	.+242    	; 0x852 <main+0x17e>
     760:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sys_time>
			
			time_old = sys_time;
     764:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sys_time+0x1>
     768:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sys_time+0x2>
     76c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sys_time+0x3>
     770:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time_old>
     774:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <time_old+0x1>
     778:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <time_old+0x2>
     77c:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <time_old+0x3>
     780:	00 dd       	rcall	.-1536   	; 0x182 <adc_start_conversion>
			adc_start_conversion();
     782:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sys_time_10>
			sys_time_10++;
     786:	8f 5f       	subi	r24, 0xFF	; 255
     788:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sys_time_10>
     78c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sys_time_10>
			
			
		//10ms loop 100Hz
		
		if (sys_time_10 >= 10){  
     790:	8a 30       	cpi	r24, 0x0A	; 10
     792:	08 f4       	brcc	.+2      	; 0x796 <main+0xc2>
     794:	5e c0       	rjmp	.+188    	; 0x852 <main+0x17e>
     796:	4e dd       	rcall	.-1380   	; 0x234 <adc_get_1>
			
			
			
			adc_data_1 = adc_get_1();
     798:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <adc_data_1+0x1>
     79c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <adc_data_1>
     7a0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_data_1>
			SH_databytes1[0] = ADC2Sensor(adc_data_1,0,5,100,10,5,10) & 0xff; //Brake Pressure Front
     7a4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_data_1+0x1>
     7a8:	0f 2e       	mov	r0, r31
     7aa:	fa e0       	ldi	r31, 0x0A	; 10
     7ac:	8f 2e       	mov	r8, r31
     7ae:	91 2c       	mov	r9, r1
     7b0:	f0 2d       	mov	r31, r0
     7b2:	0f 2e       	mov	r0, r31
     7b4:	f5 e0       	ldi	r31, 0x05	; 5
     7b6:	af 2e       	mov	r10, r31
     7b8:	f0 2d       	mov	r31, r0
     7ba:	0f 2e       	mov	r0, r31
     7bc:	fa e0       	ldi	r31, 0x0A	; 10
     7be:	cf 2e       	mov	r12, r31
     7c0:	d1 2c       	mov	r13, r1
     7c2:	f0 2d       	mov	r31, r0
     7c4:	0f 2e       	mov	r0, r31
     7c6:	f4 e6       	ldi	r31, 0x64	; 100
     7c8:	ef 2e       	mov	r14, r31
     7ca:	f0 2d       	mov	r31, r0
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	10 e0       	ldi	r17, 0x00	; 0
     7d0:	20 ea       	ldi	r18, 0xA0	; 160
     7d2:	30 e4       	ldi	r19, 0x40	; 64
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	ba 01       	movw	r22, r20
     7da:	e2 d3       	rcall	.+1988   	; 0xfa0 <ADC2Sensor>
     7dc:	8e 83       	std	Y+6, r24	; 0x06
     7de:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_data_1>
			SH_databytes1[1] = ADC2Sensor(adc_data_1,0,5,100,10,5,10) >> 8;
     7e2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_data_1+0x1>
     7e6:	0f 2e       	mov	r0, r31
     7e8:	fa e0       	ldi	r31, 0x0A	; 10
     7ea:	8f 2e       	mov	r8, r31
     7ec:	91 2c       	mov	r9, r1
     7ee:	f0 2d       	mov	r31, r0
     7f0:	0f 2e       	mov	r0, r31
     7f2:	f5 e0       	ldi	r31, 0x05	; 5
     7f4:	af 2e       	mov	r10, r31
     7f6:	f0 2d       	mov	r31, r0
     7f8:	0f 2e       	mov	r0, r31
     7fa:	fa e0       	ldi	r31, 0x0A	; 10
     7fc:	cf 2e       	mov	r12, r31
     7fe:	d1 2c       	mov	r13, r1
     800:	f0 2d       	mov	r31, r0
     802:	0f 2e       	mov	r0, r31
     804:	f4 e6       	ldi	r31, 0x64	; 100
     806:	ef 2e       	mov	r14, r31
     808:	f0 2d       	mov	r31, r0
     80a:	00 e0       	ldi	r16, 0x00	; 0
     80c:	10 e0       	ldi	r17, 0x00	; 0
     80e:	20 ea       	ldi	r18, 0xA0	; 160
     810:	30 e4       	ldi	r19, 0x40	; 64
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	ba 01       	movw	r22, r20
     818:	c3 d3       	rcall	.+1926   	; 0xfa0 <ADC2Sensor>
     81a:	89 2f       	mov	r24, r25
     81c:	99 27       	eor	r25, r25
     81e:	8f 83       	std	Y+7, r24	; 0x07
			SH_databytes1[2] = Speed_getdata1();
     820:	2a d2       	rcall	.+1108   	; 0xc76 <Speed_getdata1>
     822:	88 87       	std	Y+8, r24	; 0x08
     824:	3a d2       	rcall	.+1140   	; 0xc9a <Speed_getdata2>
			SH_databytes1[3] = Speed_getdata2();
     826:	89 87       	std	Y+9, r24	; 0x09
     828:	88 e0       	ldi	r24, 0x08	; 8
     82a:	8a 87       	std	Y+10, r24	; 0x0a
			SH_databytes1[4] = 8;
     82c:	87 e0       	ldi	r24, 0x07	; 7
     82e:	8b 87       	std	Y+11, r24	; 0x0b
			SH_databytes1[5] = 7;
     830:	86 e0       	ldi	r24, 0x06	; 6
			SH_databytes1[6] = 6;
     832:	8c 87       	std	Y+12, r24	; 0x0c
     834:	85 e0       	ldi	r24, 0x05	; 5
			SH_databytes1[7] = 5;
     836:	8d 87       	std	Y+13, r24	; 0x0d
     838:	ce 01       	movw	r24, r28

			can_tx(&can_SH_mob1, SH_databytes1); //send the CAN Message		
     83a:	06 96       	adiw	r24, 0x06	; 6
     83c:	bc 01       	movw	r22, r24
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	b5 de       	rcall	.-662    	; 0x5ae <can_tx>
     844:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <sys_time_10>
						
			sys_time_10 = 0;
			sys_time_50++;
     848:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sys_time_50>
     84c:	8f 5f       	subi	r24, 0xFF	; 255
     84e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sys_time_50>
			}
		}
		//50ms loop 20Hz
		
		adc_data_2 = adc_get_2();
     852:	02 dd       	rcall	.-1532   	; 0x258 <adc_get_2>
     854:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <adc_data_2+0x1>
     858:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <adc_data_2>
		adc_data_3 = adc_get_3();
     85c:	0f dd       	rcall	.-1506   	; 0x27c <adc_get_3>
     85e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <adc_data_3+0x1>
     862:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <adc_data_3>
     866:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sys_time_50>
		
		if(sys_time_50 >= 5){
     86a:	85 30       	cpi	r24, 0x05	; 5
     86c:	08 f4       	brcc	.+2      	; 0x870 <main+0x19c>
     86e:	6f c0       	rjmp	.+222    	; 0x94e <main+0x27a>
     870:	d3 d0       	rcall	.+422    	; 0xa18 <SPI_read>
			SPI_read(); //Starts the SPI Procedure
     872:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <sys_time_50>
			sys_time_50 = 0;
     876:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_data_2>
			SH_databytes2[0] = ADC2NTCtemp(adc_data_2,3450,10000,5,1024,1500)	& 0xff;	//CLTRR
     87a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_data_2+0x1>
     87e:	0f 2e       	mov	r0, r31
     880:	fc ed       	ldi	r31, 0xDC	; 220
     882:	ef 2e       	mov	r14, r31
     884:	f5 e0       	ldi	r31, 0x05	; 5
     886:	ff 2e       	mov	r15, r31
     888:	f0 2d       	mov	r31, r0
     88a:	00 e0       	ldi	r16, 0x00	; 0
     88c:	14 e0       	ldi	r17, 0x04	; 4
     88e:	25 e0       	ldi	r18, 0x05	; 5
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e1       	ldi	r20, 0x10	; 16
     894:	57 e2       	ldi	r21, 0x27	; 39
     896:	6a e7       	ldi	r22, 0x7A	; 122
     898:	7d e0       	ldi	r23, 0x0D	; 13
     89a:	8a d2       	rcall	.+1300   	; 0xdb0 <ADC2NTCtemp>
     89c:	8b 8b       	std	Y+19, r24	; 0x13
     89e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_data_2>
			SH_databytes2[1] = ADC2NTCtemp(adc_data_2,3450,10000,5,1024,1500)	>> 8;
     8a2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_data_2+0x1>
     8a6:	0f 2e       	mov	r0, r31
     8a8:	fc ed       	ldi	r31, 0xDC	; 220
     8aa:	ef 2e       	mov	r14, r31
     8ac:	f5 e0       	ldi	r31, 0x05	; 5
     8ae:	ff 2e       	mov	r15, r31
     8b0:	f0 2d       	mov	r31, r0
     8b2:	00 e0       	ldi	r16, 0x00	; 0
     8b4:	14 e0       	ldi	r17, 0x04	; 4
     8b6:	25 e0       	ldi	r18, 0x05	; 5
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e1       	ldi	r20, 0x10	; 16
     8bc:	57 e2       	ldi	r21, 0x27	; 39
     8be:	6a e7       	ldi	r22, 0x7A	; 122
     8c0:	7d e0       	ldi	r23, 0x0D	; 13
     8c2:	76 d2       	rcall	.+1260   	; 0xdb0 <ADC2NTCtemp>
     8c4:	89 2f       	mov	r24, r25
     8c6:	99 27       	eor	r25, r25
     8c8:	8c 8b       	std	Y+20, r24	; 0x14
     8ca:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <adc_data_3>
			SH_databytes2[2] = ADC2NTCtemp(adc_data_3,3450,10000,5,1024,1500)	& 0xff;	//CLTVR
     8ce:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adc_data_3+0x1>
     8d2:	0f 2e       	mov	r0, r31
     8d4:	fc ed       	ldi	r31, 0xDC	; 220
     8d6:	ef 2e       	mov	r14, r31
     8d8:	f5 e0       	ldi	r31, 0x05	; 5
     8da:	ff 2e       	mov	r15, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	00 e0       	ldi	r16, 0x00	; 0
     8e0:	14 e0       	ldi	r17, 0x04	; 4
     8e2:	25 e0       	ldi	r18, 0x05	; 5
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e1       	ldi	r20, 0x10	; 16
     8e8:	57 e2       	ldi	r21, 0x27	; 39
     8ea:	6a e7       	ldi	r22, 0x7A	; 122
     8ec:	7d e0       	ldi	r23, 0x0D	; 13
     8ee:	60 d2       	rcall	.+1216   	; 0xdb0 <ADC2NTCtemp>
     8f0:	8d 8b       	std	Y+21, r24	; 0x15
     8f2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <adc_data_3>
			SH_databytes2[3] = ADC2NTCtemp(adc_data_3,3450,10000,5,1024,1500)	>> 8;
     8f6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adc_data_3+0x1>
     8fa:	0f 2e       	mov	r0, r31
     8fc:	fc ed       	ldi	r31, 0xDC	; 220
     8fe:	ef 2e       	mov	r14, r31
     900:	f5 e0       	ldi	r31, 0x05	; 5
     902:	ff 2e       	mov	r15, r31
     904:	f0 2d       	mov	r31, r0
     906:	00 e0       	ldi	r16, 0x00	; 0
     908:	14 e0       	ldi	r17, 0x04	; 4
     90a:	25 e0       	ldi	r18, 0x05	; 5
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e1       	ldi	r20, 0x10	; 16
     910:	57 e2       	ldi	r21, 0x27	; 39
     912:	6a e7       	ldi	r22, 0x7A	; 122
     914:	7d e0       	ldi	r23, 0x0D	; 13
     916:	4c d2       	rcall	.+1176   	; 0xdb0 <ADC2NTCtemp>
     918:	89 2f       	mov	r24, r25
     91a:	99 27       	eor	r25, r25
     91c:	8e 8b       	std	Y+22, r24	; 0x16
     91e:	80 e5       	ldi	r24, 0x50	; 80
     920:	91 e0       	ldi	r25, 0x01	; 1
			SH_databytes2[4] = adc_get_4;
     922:	8f 8b       	std	Y+23, r24	; 0x17
     924:	80 e5       	ldi	r24, 0x50	; 80
     926:	91 e0       	ldi	r25, 0x01	; 1
			SH_databytes2[5] = adc_get_4;
     928:	88 8f       	std	Y+24, r24	; 0x18
     92a:	82 e6       	ldi	r24, 0x62	; 98
     92c:	91 e0       	ldi	r25, 0x01	; 1
			SH_databytes2[6] = adc_get_5;
     92e:	89 8f       	std	Y+25, r24	; 0x19
     930:	82 e6       	ldi	r24, 0x62	; 98
     932:	91 e0       	ldi	r25, 0x01	; 1
			SH_databytes2[7] = adc_get_5;
     934:	8a 8f       	std	Y+26, r24	; 0x1a
     936:	9e 01       	movw	r18, r28

			can_tx(&can_SH_mob2, SH_databytes2); //send the CAN Message
     938:	2d 5e       	subi	r18, 0xED	; 237
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	ce 01       	movw	r24, r28
     93e:	0e 96       	adiw	r24, 0x0e	; 14
     940:	b9 01       	movw	r22, r18
     942:	35 de       	rcall	.-918    	; 0x5ae <can_tx>
						
			sys_time_200++;
     944:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sys_time_200>
     948:	8f 5f       	subi	r24, 0xFF	; 255
		}
		//200ms loop 5Hz	
		if(sys_time_200 >= 4){
     94a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sys_time_200>
     94e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sys_time_200>
     952:	84 30       	cpi	r24, 0x04	; 4
			sys_tick();
     954:	08 f4       	brcc	.+2      	; 0x958 <main+0x284>
     956:	ee ce       	rjmp	.-548    	; 0x734 <main+0x60>
			TKTF = 1; //indicate that we want to talk to the TYPK IC
     958:	d4 d1       	rcall	.+936    	; 0xd02 <sys_tick>
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TKTF>
			
			SH_databytes3[0] = TYPK_getdata1()	& 0xff;	//CLTRR
     960:	4a d1       	rcall	.+660    	; 0xbf6 <TYPK_getdata1>
			SH_databytes3[1] = TYPK_getdata1()	>> 8;
     962:	88 a3       	std	Y+32, r24	; 0x20
     964:	48 d1       	rcall	.+656    	; 0xbf6 <TYPK_getdata1>
     966:	89 2f       	mov	r24, r25
     968:	99 27       	eor	r25, r25
     96a:	89 a3       	std	Y+33, r24	; 0x21
			SH_databytes3[2] = TYPK_getdata2()	& 0xff;	//CLTVR
     96c:	64 d1       	rcall	.+712    	; 0xc36 <TYPK_getdata2>
     96e:	8a a3       	std	Y+34, r24	; 0x22
     970:	62 d1       	rcall	.+708    	; 0xc36 <TYPK_getdata2>
			SH_databytes3[3] = TYPK_getdata2()	>> 8;
     972:	89 2f       	mov	r24, r25
     974:	99 27       	eor	r25, r25
     976:	8b a3       	std	Y+35, r24	; 0x23
     978:	1c a2       	std	Y+36, r1	; 0x24
     97a:	1d a2       	std	Y+37, r1	; 0x25
			SH_databytes3[4] = 0;
     97c:	1e a2       	std	Y+38, r1	; 0x26
			SH_databytes3[5] = 0;
     97e:	1f a2       	std	Y+39, r1	; 0x27
			SH_databytes3[6] = 0;
     980:	9e 01       	movw	r18, r28
			SH_databytes3[7] = 0;
     982:	20 5e       	subi	r18, 0xE0	; 224
			
			can_tx(&can_SH_mob3, SH_databytes3); //send the CAN Message
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	ce 01       	movw	r24, r28
     988:	4b 96       	adiw	r24, 0x1b	; 27
     98a:	b9 01       	movw	r22, r18
     98c:	10 de       	rcall	.-992    	; 0x5ae <can_tx>
     98e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sys_time_200>
     992:	d0 ce       	rjmp	.-608    	; 0x734 <main+0x60>

00000994 <SPI_config>:
			
			sys_time_200 = 0;
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
		}		
	}
     998:	cd b7       	in	r28, 0x3d	; 61
uint8_t SPIcount_TK = 0;
uint8_t SPIcount_Speed = 0;
volatile uint8_t TKTF = 0;	//TypK Transmission Flag, indicates that a SPI TypK read Transmission should be initiated
volatile uint8_t TKTFISR = 0;

void SPI_config(){
     99a:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2); // define SS, SCK & MOSI as Output
     99c:	84 e2       	ldi	r24, 0x24	; 36
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	24 e2       	ldi	r18, 0x24	; 36
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	f9 01       	movw	r30, r18
     9a6:	20 81       	ld	r18, Z
     9a8:	27 60       	ori	r18, 0x07	; 7
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
	DDRB &= ~(1<<PB3); // define MISO as input
     9ae:	84 e2       	ldi	r24, 0x24	; 36
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	24 e2       	ldi	r18, 0x24	; 36
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	20 81       	ld	r18, Z
     9ba:	27 7f       	andi	r18, 0xF7	; 247
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18
	DDRE |= (1<<PE0) | (1<<PE1) | (1<<PE2) | (1<<PE3); // define CS as Output
     9c0:	8d e2       	ldi	r24, 0x2D	; 45
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	2d e2       	ldi	r18, 0x2D	; 45
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	f9 01       	movw	r30, r18
     9ca:	20 81       	ld	r18, Z
     9cc:	2f 60       	ori	r18, 0x0F	; 15
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
	PORTB |= (1<<PB0); //Switch SS off
     9d2:	85 e2       	ldi	r24, 0x25	; 37
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	25 e2       	ldi	r18, 0x25	; 37
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	f9 01       	movw	r30, r18
     9dc:	20 81       	ld	r18, Z
     9de:	21 60       	ori	r18, 0x01	; 1
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
	PORTE |= (1<<PE0) | (1<<PE1) | (1<<PE2) | (1<<PE3); //Switch CS off
     9e4:	8e e2       	ldi	r24, 0x2E	; 46
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	2e e2       	ldi	r18, 0x2E	; 46
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	f9 01       	movw	r30, r18
     9ee:	20 81       	ld	r18, Z
     9f0:	2f 60       	ori	r18, 0x0F	; 15
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
	SPCR = (1<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(1<<CPHA)|(1<<SPR1)|(1<<SPR0);
     9f6:	8c e4       	ldi	r24, 0x4C	; 76
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	27 ed       	ldi	r18, 0xD7	; 215
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
	SPSR &= ~(0<<SPI2X);
     a00:	8d e4       	ldi	r24, 0x4D	; 77
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	2d e4       	ldi	r18, 0x4D	; 77
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	f9 01       	movw	r30, r18
     a0a:	20 81       	ld	r18, Z
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18
	//SPIE activates SPI Interrupt; SPE Enable SPI; DORD to MSB first see. MAX6675 Datasheet; MSTR set AT90CAN as Master;  
	//CPOL/CPHA set to read Data on falling edge & have clock to pulse from low to High; SPI2X/SPR1/SPR0 set clock divider to 64 = 250Khz max freq. for MAX6675 10Mhz (100ns on time)
}
     a10:	00 00       	nop
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <SPI_read>:

void SPI_read(){			//initiate dummy transmission to get into the ISR
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1<<PB0);		//Switch SS on
     a20:	85 e2       	ldi	r24, 0x25	; 37
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	25 e2       	ldi	r18, 0x25	; 37
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	f9 01       	movw	r30, r18
     a2a:	20 81       	ld	r18, Z
     a2c:	2e 7f       	andi	r18, 0xFE	; 254
     a2e:	fc 01       	movw	r30, r24
     a30:	20 83       	st	Z, r18
	PORTE &= ~(1<<PE2);		//Switch CS_Speed_1 on
     a32:	8e e2       	ldi	r24, 0x2E	; 46
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	2e e2       	ldi	r18, 0x2E	; 46
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	f9 01       	movw	r30, r18
     a3c:	20 81       	ld	r18, Z
     a3e:	2b 7f       	andi	r18, 0xFB	; 251
     a40:	fc 01       	movw	r30, r24
     a42:	20 83       	st	Z, r18
	SPDR = 0x11;			//send empty byte to initiate data Transmission
     a44:	8e e4       	ldi	r24, 0x4E	; 78
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	21 e1       	ldi	r18, 0x11	; 17
     a4a:	fc 01       	movw	r30, r24
     a4c:	20 83       	st	Z, r18
}
     a4e:	00 00       	nop
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <__vector_20>:
	
ISR(SPI_STC_vect){
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     a66:	0f 92       	push	r0
     a68:	2f 93       	push	r18
     a6a:	3f 93       	push	r19
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	ef 93       	push	r30
     a72:	ff 93       	push	r31
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
		if (TKTFISR == 1){						//When the TKTF has been set and a speed read has completed we go into here
     a7c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TKTFISR>
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	09 f0       	breq	.+2      	; 0xa86 <__vector_20+0x30>
     a84:	4a c0       	rjmp	.+148    	; 0xb1a <__vector_20+0xc4>
			SPI_typK_data[SPIcount_TK] = SPDR;		//Push the data from the SPDR into the TYPK Array
     a86:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <SPIcount_TK>
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	2e e4       	ldi	r18, 0x4E	; 78
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	f9 01       	movw	r30, r18
     a94:	20 81       	ld	r18, Z
     a96:	80 5e       	subi	r24, 0xE0	; 224
     a98:	9e 4f       	sbci	r25, 0xFE	; 254
     a9a:	fc 01       	movw	r30, r24
     a9c:	20 83       	st	Z, r18
			SPIcount_TK++;
     a9e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <SPIcount_TK>
     aa2:	8f 5f       	subi	r24, 0xFF	; 255
     aa4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <SPIcount_TK>
			if (SPIcount_TK == 2){					//If 2 Bytes have been transmitted, change to the other Chip
     aa8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <SPIcount_TK>
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	91 f4       	brne	.+36     	; 0xad4 <__vector_20+0x7e>
				PORTE |= (1<<PE0);				//Switch CS_TYPK_1 off
     ab0:	8e e2       	ldi	r24, 0x2E	; 46
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	2e e2       	ldi	r18, 0x2E	; 46
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	20 81       	ld	r18, Z
     abc:	21 60       	ori	r18, 0x01	; 1
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
				PORTE &= ~(1<<PE1);				//Switch CS_TYPK_2 on
     ac2:	8e e2       	ldi	r24, 0x2E	; 46
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	2e e2       	ldi	r18, 0x2E	; 46
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	f9 01       	movw	r30, r18
     acc:	20 81       	ld	r18, Z
     ace:	2d 7f       	andi	r18, 0xFD	; 253
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 83       	st	Z, r18
			}
			if (SPIcount_TK >= 4){					//If the entire message has been transmitted terminate the SPI transmission
     ad4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <SPIcount_TK>
     ad8:	84 30       	cpi	r24, 0x04	; 4
     ada:	c8 f0       	brcs	.+50     	; 0xb0e <__vector_20+0xb8>
				PORTE |= (1<<PE1);				//Switch CS_TYPK_2 off
     adc:	8e e2       	ldi	r24, 0x2E	; 46
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	2e e2       	ldi	r18, 0x2E	; 46
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	f9 01       	movw	r30, r18
     ae6:	20 81       	ld	r18, Z
     ae8:	22 60       	ori	r18, 0x02	; 2
     aea:	fc 01       	movw	r30, r24
     aec:	20 83       	st	Z, r18
				PORTB |= (1<<PB0);				// Switch SS off
     aee:	85 e2       	ldi	r24, 0x25	; 37
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	25 e2       	ldi	r18, 0x25	; 37
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	f9 01       	movw	r30, r18
     af8:	20 81       	ld	r18, Z
     afa:	21 60       	ori	r18, 0x01	; 1
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
				SPIcount_TK=0;						//Resetting counter for next SPI transmission
     b00:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <SPIcount_TK>
				TKTF =0;						//Indicate that the TYPK transmission has been successful
     b04:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TKTF>
				TKTFISR = 0;					//Indicate that the TYPK transmission has been successful
     b08:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TKTFISR>
			else{
												//Initiate the next SPI transmission to get the remaining Bytes
			SPDR=0x11;							//send empty byte to initiate data Transmission
			}
		}
	}
     b0c:	62 c0       	rjmp	.+196    	; 0xbd2 <__vector_20+0x17c>
				SPIcount_TK=0;						//Resetting counter for next SPI transmission
				TKTF =0;						//Indicate that the TYPK transmission has been successful
				TKTFISR = 0;					//Indicate that the TYPK transmission has been successful
			}					
			else{								//Initiate the next SPI transmission to get the remaining Bytes											
				SPDR=0x11;						//send empty byte to initiate data Transmission	
     b0e:	8e e4       	ldi	r24, 0x4E	; 78
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	21 e1       	ldi	r18, 0x11	; 17
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
			else{
												//Initiate the next SPI transmission to get the remaining Bytes
			SPDR=0x11;							//send empty byte to initiate data Transmission
			}
		}
	}
     b18:	5c c0       	rjmp	.+184    	; 0xbd2 <__vector_20+0x17c>
			else{								//Initiate the next SPI transmission to get the remaining Bytes											
				SPDR=0x11;						//send empty byte to initiate data Transmission	
			}
		}
		else{ //TKTFISR = 0 We will enter here if there is no need to go into the TYPK transmission Routine
			SPI_Speed_data[SPIcount_Speed] = SPDR;	//Push the data from the SPDR into the Speed Array
     b1a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SPIcount_Speed>
     b1e:	88 2f       	mov	r24, r24
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	2e e4       	ldi	r18, 0x4E	; 78
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	8c 5d       	subi	r24, 0xDC	; 220
     b2c:	9e 4f       	sbci	r25, 0xFE	; 254
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
			SPIcount_Speed++;							//incrementing the counter that indicates the number of bytes that has been transmitted
     b32:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SPIcount_Speed>
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <SPIcount_Speed>
			if (SPIcount_Speed == 1){					//If 2 Bytes have been transmitted, change to the other Chip
     b3c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SPIcount_Speed>
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	99 f4       	brne	.+38     	; 0xb6a <__vector_20+0x114>
				PORTE |= (1<<PE2);				//Switch CS_Speed_1 off
     b44:	8e e2       	ldi	r24, 0x2E	; 46
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	2e e2       	ldi	r18, 0x2E	; 46
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	f9 01       	movw	r30, r18
     b4e:	20 81       	ld	r18, Z
     b50:	24 60       	ori	r18, 0x04	; 4
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
				PORTE &= ~(1<<PE3);				//Switch CS_Speed_2 on
     b56:	8e e2       	ldi	r24, 0x2E	; 46
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	2e e2       	ldi	r18, 0x2E	; 46
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	f9 01       	movw	r30, r18
     b60:	20 81       	ld	r18, Z
     b62:	27 7f       	andi	r18, 0xF7	; 247
     b64:	fc 01       	movw	r30, r24
     b66:	20 83       	st	Z, r18
			else{
												//Initiate the next SPI transmission to get the remaining Bytes
			SPDR=0x11;							//send empty byte to initiate data Transmission
			}
		}
	}
     b68:	34 c0       	rjmp	.+104    	; 0xbd2 <__vector_20+0x17c>
			SPIcount_Speed++;							//incrementing the counter that indicates the number of bytes that has been transmitted
			if (SPIcount_Speed == 1){					//If 2 Bytes have been transmitted, change to the other Chip
				PORTE |= (1<<PE2);				//Switch CS_Speed_1 off
				PORTE &= ~(1<<PE3);				//Switch CS_Speed_2 on
			}
			else if (SPIcount_Speed>=2){					//If the entire message has been transmitted check whether we want a TYPK transmission
     b6a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SPIcount_Speed>
     b6e:	82 30       	cpi	r24, 0x02	; 2
     b70:	58 f1       	brcs	.+86     	; 0xbc8 <__vector_20+0x172>
				PORTE |= (1<<PE3);				//Switch CS_TYPK_2 off
     b72:	8e e2       	ldi	r24, 0x2E	; 46
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	2e e2       	ldi	r18, 0x2E	; 46
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	f9 01       	movw	r30, r18
     b7c:	20 81       	ld	r18, Z
     b7e:	28 60       	ori	r18, 0x08	; 8
     b80:	fc 01       	movw	r30, r24
     b82:	20 83       	st	Z, r18
				SPIcount_Speed=0;						//Resetting counter for next SPI transmission
     b84:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <SPIcount_Speed>
				if (TKTF==1){					//check whether the flag for the TYPK transmission has been set 
     b88:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TKTF>
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	91 f4       	brne	.+36     	; 0xbb4 <__vector_20+0x15e>
					PORTE &= ~(1<<PE0);			//Switch CS_TYPK_1 on
     b90:	8e e2       	ldi	r24, 0x2E	; 46
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	2e e2       	ldi	r18, 0x2E	; 46
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	f9 01       	movw	r30, r18
     b9a:	20 81       	ld	r18, Z
     b9c:	2e 7f       	andi	r18, 0xFE	; 254
     b9e:	fc 01       	movw	r30, r24
     ba0:	20 83       	st	Z, r18
					SPDR = 0x11;				//send empty byte to initiate data Transmission
     ba2:	8e e4       	ldi	r24, 0x4E	; 78
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	21 e1       	ldi	r18, 0x11	; 17
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18
					TKTFISR = 1;				//Indicate that in the next iteration of the ISR we have to switch differently between the CS
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <TKTFISR>
			else{
												//Initiate the next SPI transmission to get the remaining Bytes
			SPDR=0x11;							//send empty byte to initiate data Transmission
			}
		}
	}
     bb2:	0f c0       	rjmp	.+30     	; 0xbd2 <__vector_20+0x17c>
					PORTE &= ~(1<<PE0);			//Switch CS_TYPK_1 on
					SPDR = 0x11;				//send empty byte to initiate data Transmission
					TKTFISR = 1;				//Indicate that in the next iteration of the ISR we have to switch differently between the CS
				}
				else{							//IF no TYPK Transmission is requested simply terminate the SPI Transmission
					PORTB |= (1<<PB0);			//Switch SS off, High=off, Low=on terminate the SPI data transfer by pulling SS low
     bb4:	85 e2       	ldi	r24, 0x25	; 37
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	25 e2       	ldi	r18, 0x25	; 37
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	f9 01       	movw	r30, r18
     bbe:	20 81       	ld	r18, Z
     bc0:	21 60       	ori	r18, 0x01	; 1
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
			else{
												//Initiate the next SPI transmission to get the remaining Bytes
			SPDR=0x11;							//send empty byte to initiate data Transmission
			}
		}
	}
     bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <__vector_20+0x17c>
				}
			
			}
			else{
												//Initiate the next SPI transmission to get the remaining Bytes
			SPDR=0x11;							//send empty byte to initiate data Transmission
     bc8:	8e e4       	ldi	r24, 0x4E	; 78
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	21 e1       	ldi	r18, 0x11	; 17
     bce:	fc 01       	movw	r30, r24
     bd0:	20 83       	st	Z, r18
			}
		}
	}
     bd2:	00 00       	nop
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	0f 90       	pop	r0
     be6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     bea:	0f 90       	pop	r0
     bec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <TYPK_getdata1>:
		
	uint16_t TYPK_getdata1(){
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <TYPK_getdata1+0x6>
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
	//cli(); //disable Interrupts so that the SPI transfer will not corrupt our data in a way that we get the MSB of n and LSB of n-1
	uint16_t TYPkDATA1 =  ((SPI_typK_data[0] << 8) | SPI_typK_data[1]) >> 3;//PUT MSB shifted to left by 8 in place and or together with LSB then shift to right by three to get rid of Status bits
     c00:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <SPI_typK_data>
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	38 2f       	mov	r19, r24
     c0a:	22 27       	eor	r18, r18
     c0c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <SPI_typK_data+0x1>
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	82 2b       	or	r24, r18
     c16:	93 2b       	or	r25, r19
     c18:	95 95       	asr	r25
     c1a:	87 95       	ror	r24
     c1c:	95 95       	asr	r25
     c1e:	87 95       	ror	r24
     c20:	95 95       	asr	r25
     c22:	87 95       	ror	r24
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	89 83       	std	Y+1, r24	; 0x01
	//sei(); // enable Interrupts again
	return TYPkDATA1;	
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <TYPK_getdata2>:

uint16_t TYPK_getdata2(){
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <TYPK_getdata2+0x6>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	//cli(); //disable Interrupts so that the SPI transfer will not corrupt our data in a way that we get the MSB of n and LSB of n-1
	uint16_t TYPkDATA2 =  ((SPI_typK_data[2] << 8) | SPI_typK_data[3]) >> 3;//PUT MSB shifted to left by 8 in place and or together with LSB then shift to right by three to get rid of Status bits
     c40:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <SPI_typK_data+0x2>
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	38 2f       	mov	r19, r24
     c4a:	22 27       	eor	r18, r18
     c4c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <SPI_typK_data+0x3>
     c50:	88 2f       	mov	r24, r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	82 2b       	or	r24, r18
     c56:	93 2b       	or	r25, r19
     c58:	95 95       	asr	r25
     c5a:	87 95       	ror	r24
     c5c:	95 95       	asr	r25
     c5e:	87 95       	ror	r24
     c60:	95 95       	asr	r25
     c62:	87 95       	ror	r24
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
	//sei(); // enable Interrupts again
	return TYPkDATA2;										
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <Speed_getdata1>:

uint16_t Speed_getdata1(){
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <Speed_getdata1+0x6>
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
	//cli(); //disable Interrupts so that the SPI transfer will not corrupt our data in a way that we get the MSB of n and LSB of n-1
	uint16_t SpeedDATA1 = SPI_Speed_data[0];//PUT MSB shifted to left by 8 in place and or together with LSB then shift to right by three to get rid of Status bits
     c80:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <SPI_Speed_data>
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
	//sei(); // enable Interrupts again
	return SpeedDATA1;	
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <Speed_getdata2>:

uint16_t Speed_getdata2(){
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <Speed_getdata2+0x6>
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
	//cli(); //disable Interrupts so that the SPI transfer will not corrupt our data in a way that we get the MSB of n and LSB of n-1
	uint16_t SpeedDATA2 = SPI_Speed_data[1];//PUT MSB shifted to left by 8 in place and or together with LSB then shift to right by three to get rid of Status bits
     ca4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <SPI_Speed_data+0x1>
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
	return SpeedDATA2;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
	//sei(); // enable Interrupts again						
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <port_config>:
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	81 e2       	ldi	r24, 0x21	; 33
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	fc 01       	movw	r30, r24
     ccc:	10 82       	st	Z, r1
     cce:	84 e2       	ldi	r24, 0x24	; 36
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	fc 01       	movw	r30, r24
     cd4:	10 82       	st	Z, r1
     cd6:	87 e2       	ldi	r24, 0x27	; 39
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	25 e0       	ldi	r18, 0x05	; 5
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
     ce0:	8a e2       	ldi	r24, 0x2A	; 42
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	fc 01       	movw	r30, r24
     ce6:	10 82       	st	Z, r1
     ce8:	8d e2       	ldi	r24, 0x2D	; 45
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	2f e0       	ldi	r18, 0x0F	; 15
     cee:	fc 01       	movw	r30, r24
     cf0:	20 83       	st	Z, r18
     cf2:	80 e3       	ldi	r24, 0x30	; 48
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	fc 01       	movw	r30, r24
     cf8:	10 82       	st	Z, r1
     cfa:	00 00       	nop
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <sys_tick>:
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	88 e2       	ldi	r24, 0x28	; 40
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	28 e2       	ldi	r18, 0x28	; 40
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	f9 01       	movw	r30, r18
     d14:	30 81       	ld	r19, Z
     d16:	24 e0       	ldi	r18, 0x04	; 4
     d18:	23 27       	eor	r18, r19
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 83       	st	Z, r18
     d1e:	00 00       	nop
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <sys_timer_config>:
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	84 e4       	ldi	r24, 0x44	; 68
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	2b e0       	ldi	r18, 0x0B	; 11
     d34:	fc 01       	movw	r30, r24
     d36:	20 83       	st	Z, r18
     d38:	8e e6       	ldi	r24, 0x6E	; 110
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	22 e0       	ldi	r18, 0x02	; 2
     d3e:	fc 01       	movw	r30, r24
     d40:	20 83       	st	Z, r18
     d42:	87 e4       	ldi	r24, 0x47	; 71
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	29 ef       	ldi	r18, 0xF9	; 249
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18
     d4c:	00 00       	nop
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <__vector_16>:
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sys_time>
     d74:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sys_time+0x1>
     d78:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sys_time+0x2>
     d7c:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sys_time+0x3>
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	a1 1d       	adc	r26, r1
     d84:	b1 1d       	adc	r27, r1
     d86:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sys_time>
     d8a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <sys_time+0x1>
     d8e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <sys_time+0x2>
     d92:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <sys_time+0x3>
     d96:	00 00       	nop
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	bf 91       	pop	r27
     d9e:	af 91       	pop	r26
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	0f 90       	pop	r0
     da6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <ADC2NTCtemp>:
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	6a 97       	sbiw	r28, 0x1a	; 26
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	98 8b       	std	Y+16, r25	; 0x10
     dd2:	8f 87       	std	Y+15, r24	; 0x0f
     dd4:	7a 8b       	std	Y+18, r23	; 0x12
     dd6:	69 8b       	std	Y+17, r22	; 0x11
     dd8:	5c 8b       	std	Y+20, r21	; 0x14
     dda:	4b 8b       	std	Y+19, r20	; 0x13
     ddc:	3e 8b       	std	Y+22, r19	; 0x16
     dde:	2d 8b       	std	Y+21, r18	; 0x15
     de0:	18 8f       	std	Y+24, r17	; 0x18
     de2:	0f 8b       	std	Y+23, r16	; 0x17
     de4:	fa 8e       	std	Y+26, r15	; 0x1a
     de6:	e9 8e       	std	Y+25, r14	; 0x19
     de8:	1a 82       	std	Y+2, r1	; 0x02
     dea:	19 82       	std	Y+1, r1	; 0x01
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	34 e0       	ldi	r19, 0x04	; 4
     df0:	8f 85       	ldd	r24, Y+15	; 0x0f
     df2:	98 89       	ldd	r25, Y+16	; 0x10
     df4:	a9 01       	movw	r20, r18
     df6:	48 1b       	sub	r20, r24
     df8:	59 0b       	sbc	r21, r25
     dfa:	ca 01       	movw	r24, r20
     dfc:	98 8b       	std	Y+16, r25	; 0x10
     dfe:	8f 87       	std	Y+15, r24	; 0x0f
     e00:	8d 89       	ldd	r24, Y+21	; 0x15
     e02:	9e 89       	ldd	r25, Y+22	; 0x16
     e04:	cc 01       	movw	r24, r24
     e06:	a0 e0       	ldi	r26, 0x00	; 0
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	bc 01       	movw	r22, r24
     e0c:	cd 01       	movw	r24, r26
     e0e:	44 d4       	rcall	.+2184   	; 0x1698 <__floatunsisf>
     e10:	6b 01       	movw	r12, r22
     e12:	7c 01       	movw	r14, r24
     e14:	8f 89       	ldd	r24, Y+23	; 0x17
     e16:	98 8d       	ldd	r25, Y+24	; 0x18
     e18:	cc 01       	movw	r24, r24
     e1a:	a0 e0       	ldi	r26, 0x00	; 0
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	3a d4       	rcall	.+2164   	; 0x1698 <__floatunsisf>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	9c 01       	movw	r18, r24
     e2a:	ad 01       	movw	r20, r26
     e2c:	c7 01       	movw	r24, r14
     e2e:	b6 01       	movw	r22, r12
     e30:	9f d3       	rcall	.+1854   	; 0x1570 <__divsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	6c 01       	movw	r12, r24
     e38:	7d 01       	movw	r14, r26
     e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3c:	98 89       	ldd	r25, Y+16	; 0x10
     e3e:	cc 01       	movw	r24, r24
     e40:	a0 e0       	ldi	r26, 0x00	; 0
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	27 d4       	rcall	.+2126   	; 0x1698 <__floatunsisf>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	9c 01       	movw	r18, r24
     e50:	ad 01       	movw	r20, r26
     e52:	c7 01       	movw	r24, r14
     e54:	b6 01       	movw	r22, r12
     e56:	51 d5       	rcall	.+2722   	; 0x18fa <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	8b 83       	std	Y+3, r24	; 0x03
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	ad 83       	std	Y+5, r26	; 0x05
     e62:	be 83       	std	Y+6, r27	; 0x06
     e64:	89 8d       	ldd	r24, Y+25	; 0x19
     e66:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e68:	cc 01       	movw	r24, r24
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	12 d4       	rcall	.+2084   	; 0x1698 <__floatunsisf>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	2b 81       	ldd	r18, Y+3	; 0x03
     e7a:	3c 81       	ldd	r19, Y+4	; 0x04
     e7c:	4d 81       	ldd	r20, Y+5	; 0x05
     e7e:	5e 81       	ldd	r21, Y+6	; 0x06
     e80:	bc 01       	movw	r22, r24
     e82:	cd 01       	movw	r24, r26
     e84:	3a d5       	rcall	.+2676   	; 0x18fa <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	6c 01       	movw	r12, r24
     e8c:	7d 01       	movw	r14, r26
     e8e:	8d 89       	ldd	r24, Y+21	; 0x15
     e90:	9e 89       	ldd	r25, Y+22	; 0x16
     e92:	cc 01       	movw	r24, r24
     e94:	a0 e0       	ldi	r26, 0x00	; 0
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	fd d3       	rcall	.+2042   	; 0x1698 <__floatunsisf>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	2b 81       	ldd	r18, Y+3	; 0x03
     ea4:	3c 81       	ldd	r19, Y+4	; 0x04
     ea6:	4d 81       	ldd	r20, Y+5	; 0x05
     ea8:	5e 81       	ldd	r21, Y+6	; 0x06
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	f7 d2       	rcall	.+1518   	; 0x149e <__subsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	9c 01       	movw	r18, r24
     eb6:	ad 01       	movw	r20, r26
     eb8:	c7 01       	movw	r24, r14
     eba:	b6 01       	movw	r22, r12
     ebc:	59 d3       	rcall	.+1714   	; 0x1570 <__divsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	8f 83       	std	Y+7, r24	; 0x07
     ec4:	98 87       	std	Y+8, r25	; 0x08
     ec6:	a9 87       	std	Y+9, r26	; 0x09
     ec8:	ba 87       	std	Y+10, r27	; 0x0a
     eca:	8b 89       	ldd	r24, Y+19	; 0x13
     ecc:	9c 89       	ldd	r25, Y+20	; 0x14
     ece:	cc 01       	movw	r24, r24
     ed0:	a0 e0       	ldi	r26, 0x00	; 0
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	df d3       	rcall	.+1982   	; 0x1698 <__floatunsisf>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9c 01       	movw	r18, r24
     ee0:	ad 01       	movw	r20, r26
     ee2:	6f 81       	ldd	r22, Y+7	; 0x07
     ee4:	78 85       	ldd	r23, Y+8	; 0x08
     ee6:	89 85       	ldd	r24, Y+9	; 0x09
     ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eea:	42 d3       	rcall	.+1668   	; 0x1570 <__divsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	bc 01       	movw	r22, r24
     ef2:	cd 01       	movw	r24, r26
     ef4:	88 d4       	rcall	.+2320   	; 0x1806 <log>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8b 87       	std	Y+11, r24	; 0x0b
     efc:	9c 87       	std	Y+12, r25	; 0x0c
     efe:	ad 87       	std	Y+13, r26	; 0x0d
     f00:	be 87       	std	Y+14, r27	; 0x0e
     f02:	89 89       	ldd	r24, Y+17	; 0x11
     f04:	9a 89       	ldd	r25, Y+18	; 0x12
     f06:	cc 01       	movw	r24, r24
     f08:	a0 e0       	ldi	r26, 0x00	; 0
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	c3 d3       	rcall	.+1926   	; 0x1698 <__floatunsisf>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	9c 01       	movw	r18, r24
     f18:	ad 01       	movw	r20, r26
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	9f e3       	ldi	r25, 0x3F	; 63
     f22:	26 d3       	rcall	.+1612   	; 0x1570 <__divsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	2b 85       	ldd	r18, Y+11	; 0x0b
     f2a:	3c 85       	ldd	r19, Y+12	; 0x0c
     f2c:	4d 85       	ldd	r20, Y+13	; 0x0d
     f2e:	5e 85       	ldd	r21, Y+14	; 0x0e
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	e2 d4       	rcall	.+2500   	; 0x18fa <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	2f e0       	ldi	r18, 0x0F	; 15
     f3c:	3f ec       	ldi	r19, 0xCF	; 207
     f3e:	4b e5       	ldi	r20, 0x5B	; 91
     f40:	5b e3       	ldi	r21, 0x3B	; 59
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	ac d2       	rcall	.+1368   	; 0x14a0 <__addsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9c 01       	movw	r18, r24
     f4e:	ad 01       	movw	r20, r26
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	80 e8       	ldi	r24, 0x80	; 128
     f56:	9f e3       	ldi	r25, 0x3F	; 63
     f58:	0b d3       	rcall	.+1558   	; 0x1570 <__divsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e2       	ldi	r20, 0x20	; 32
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	c7 d4       	rcall	.+2446   	; 0x18fa <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	65 d3       	rcall	.+1738   	; 0x1640 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	6a 96       	adiw	r28, 0x1a	; 26
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	08 95       	ret

00000fa0 <ADC2Sensor>:
     fa0:	8f 92       	push	r8
     fa2:	9f 92       	push	r9
     fa4:	af 92       	push	r10
     fa6:	cf 92       	push	r12
     fa8:	df 92       	push	r13
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	6e 97       	sbiw	r28, 0x1e	; 30
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	98 8b       	std	Y+16, r25	; 0x10
     fc8:	8f 87       	std	Y+15, r24	; 0x0f
     fca:	49 8b       	std	Y+17, r20	; 0x11
     fcc:	5a 8b       	std	Y+18, r21	; 0x12
     fce:	6b 8b       	std	Y+19, r22	; 0x13
     fd0:	7c 8b       	std	Y+20, r23	; 0x14
     fd2:	0d 8b       	std	Y+21, r16	; 0x15
     fd4:	1e 8b       	std	Y+22, r17	; 0x16
     fd6:	2f 8b       	std	Y+23, r18	; 0x17
     fd8:	38 8f       	std	Y+24, r19	; 0x18
     fda:	e9 8e       	std	Y+25, r14	; 0x19
     fdc:	db 8e       	std	Y+27, r13	; 0x1b
     fde:	ca 8e       	std	Y+26, r12	; 0x1a
     fe0:	ac 8e       	std	Y+28, r10	; 0x1c
     fe2:	9e 8e       	std	Y+30, r9	; 0x1e
     fe4:	8d 8e       	std	Y+29, r8	; 0x1d
     fe6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fe8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fea:	cc 01       	movw	r24, r24
     fec:	a0 e0       	ldi	r26, 0x00	; 0
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	51 d3       	rcall	.+1698   	; 0x1698 <__floatunsisf>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 01       	movw	r18, r24
     ffc:	ad 01       	movw	r20, r26
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e4       	ldi	r25, 0x40	; 64
    1006:	dc d4       	rcall	.+2488   	; 0x19c0 <pow>
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
    100c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	09 2e       	mov	r0, r25
    1014:	00 0c       	add	r0, r0
    1016:	aa 0b       	sbc	r26, r26
    1018:	bb 0b       	sbc	r27, r27
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	3e d3       	rcall	.+1660   	; 0x169c <__floatsisf>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9c 01       	movw	r18, r24
    1026:	ad 01       	movw	r20, r26
    1028:	c7 01       	movw	r24, r14
    102a:	b6 01       	movw	r22, r12
    102c:	a1 d2       	rcall	.+1346   	; 0x1570 <__divsf3>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	29 89       	ldd	r18, Y+17	; 0x11
    1034:	3a 89       	ldd	r19, Y+18	; 0x12
    1036:	4b 89       	ldd	r20, Y+19	; 0x13
    1038:	5c 89       	ldd	r21, Y+20	; 0x14
    103a:	bc 01       	movw	r22, r24
    103c:	cd 01       	movw	r24, r26
    103e:	5d d4       	rcall	.+2234   	; 0x18fa <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	bc 01       	movw	r22, r24
    1046:	cd 01       	movw	r24, r26
    1048:	fb d2       	rcall	.+1526   	; 0x1640 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1054:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1056:	cc 01       	movw	r24, r24
    1058:	a0 e0       	ldi	r26, 0x00	; 0
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	1b d3       	rcall	.+1590   	; 0x1698 <__floatunsisf>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	9c 01       	movw	r18, r24
    1068:	ad 01       	movw	r20, r26
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e4       	ldi	r25, 0x40	; 64
    1072:	a6 d4       	rcall	.+2380   	; 0x19c0 <pow>
    1074:	6b 01       	movw	r12, r22
    1076:	7c 01       	movw	r14, r24
    1078:	8c 8d       	ldd	r24, Y+28	; 0x1c
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	09 2e       	mov	r0, r25
    1080:	00 0c       	add	r0, r0
    1082:	aa 0b       	sbc	r26, r26
    1084:	bb 0b       	sbc	r27, r27
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	08 d3       	rcall	.+1552   	; 0x169c <__floatsisf>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	9c 01       	movw	r18, r24
    1092:	ad 01       	movw	r20, r26
    1094:	c7 01       	movw	r24, r14
    1096:	b6 01       	movw	r22, r12
    1098:	6b d2       	rcall	.+1238   	; 0x1570 <__divsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	2d 89       	ldd	r18, Y+21	; 0x15
    10a0:	3e 89       	ldd	r19, Y+22	; 0x16
    10a2:	4f 89       	ldd	r20, Y+23	; 0x17
    10a4:	58 8d       	ldd	r21, Y+24	; 0x18
    10a6:	bc 01       	movw	r22, r24
    10a8:	cd 01       	movw	r24, r26
    10aa:	27 d4       	rcall	.+2126   	; 0x18fa <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	c5 d2       	rcall	.+1418   	; 0x1640 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	2d 81       	ldd	r18, Y+5	; 0x05
    10c0:	3e 81       	ldd	r19, Y+6	; 0x06
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	a9 01       	movw	r20, r18
    10c8:	48 1b       	sub	r20, r24
    10ca:	59 0b       	sbc	r21, r25
    10cc:	ca 01       	movw	r24, r20
    10ce:	cc 01       	movw	r24, r24
    10d0:	a0 e0       	ldi	r26, 0x00	; 0
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	df d2       	rcall	.+1470   	; 0x1698 <__floatunsisf>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	8f 83       	std	Y+7, r24	; 0x07
    10e0:	98 87       	std	Y+8, r25	; 0x08
    10e2:	a9 87       	std	Y+9, r26	; 0x09
    10e4:	ba 87       	std	Y+10, r27	; 0x0a
    10e6:	89 8d       	ldd	r24, Y+25	; 0x19
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	09 2e       	mov	r0, r25
    10ee:	00 0c       	add	r0, r0
    10f0:	aa 0b       	sbc	r26, r26
    10f2:	bb 0b       	sbc	r27, r27
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	d1 d2       	rcall	.+1442   	; 0x169c <__floatsisf>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1100:	38 85       	ldd	r19, Y+8	; 0x08
    1102:	49 85       	ldd	r20, Y+9	; 0x09
    1104:	5a 85       	ldd	r21, Y+10	; 0x0a
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	32 d2       	rcall	.+1124   	; 0x1570 <__divsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	8b 87       	std	Y+11, r24	; 0x0b
    1112:	9c 87       	std	Y+12, r25	; 0x0c
    1114:	ad 87       	std	Y+13, r26	; 0x0d
    1116:	be 87       	std	Y+14, r27	; 0x0e
    1118:	2f 85       	ldd	r18, Y+15	; 0x0f
    111a:	38 89       	ldd	r19, Y+16	; 0x10
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	a9 01       	movw	r20, r18
    1122:	48 1b       	sub	r20, r24
    1124:	59 0b       	sbc	r21, r25
    1126:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1128:	3e 8d       	ldd	r19, Y+30	; 0x1e
    112a:	42 9f       	mul	r20, r18
    112c:	c0 01       	movw	r24, r0
    112e:	43 9f       	mul	r20, r19
    1130:	90 0d       	add	r25, r0
    1132:	52 9f       	mul	r21, r18
    1134:	90 0d       	add	r25, r0
    1136:	11 24       	eor	r1, r1
    1138:	cc 01       	movw	r24, r24
    113a:	a0 e0       	ldi	r26, 0x00	; 0
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	aa d2       	rcall	.+1364   	; 0x1698 <__floatunsisf>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	2b 85       	ldd	r18, Y+11	; 0x0b
    114a:	3c 85       	ldd	r19, Y+12	; 0x0c
    114c:	4d 85       	ldd	r20, Y+13	; 0x0d
    114e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	d2 d3       	rcall	.+1956   	; 0x18fa <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	70 d2       	rcall	.+1248   	; 0x1640 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	2f 85       	ldd	r18, Y+15	; 0x0f
    116a:	38 89       	ldd	r19, Y+16	; 0x10
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	28 17       	cp	r18, r24
    1172:	39 07       	cpc	r19, r25
    1174:	10 f4       	brcc	.+4      	; 0x117a <__stack+0x7b>
    1176:	1a 82       	std	Y+2, r1	; 0x02
    1178:	19 82       	std	Y+1, r1	; 0x01
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	6e 96       	adiw	r28, 0x1e	; 30
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	af 90       	pop	r10
    119c:	9f 90       	pop	r9
    119e:	8f 90       	pop	r8
    11a0:	08 95       	ret

000011a2 <ticks2speed>:
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	a0 97       	sbiw	r28, 0x20	; 32
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	98 a3       	std	Y+32, r25	; 0x20
    11c0:	8f 8f       	std	Y+31, r24	; 0x1f
    11c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11c4:	98 a1       	ldd	r25, Y+32	; 0x20
    11c6:	cc 01       	movw	r24, r24
    11c8:	a0 e0       	ldi	r26, 0x00	; 0
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	63 d2       	rcall	.+1222   	; 0x1698 <__floatunsisf>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	c6 d1       	rcall	.+908    	; 0x1570 <__divsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	44 e3       	ldi	r20, 0x34	; 52
    11ee:	51 e4       	ldi	r21, 0x41	; 65
    11f0:	bc 01       	movw	r22, r24
    11f2:	cd 01       	movw	r24, r26
    11f4:	bd d1       	rcall	.+890    	; 0x1570 <__divsf3>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	89 87       	std	Y+9, r24	; 0x09
    11fc:	9a 87       	std	Y+10, r25	; 0x0a
    11fe:	ab 87       	std	Y+11, r26	; 0x0b
    1200:	bc 87       	std	Y+12, r27	; 0x0c
    1202:	29 85       	ldd	r18, Y+9	; 0x09
    1204:	3a 85       	ldd	r19, Y+10	; 0x0a
    1206:	4b 85       	ldd	r20, Y+11	; 0x0b
    1208:	5c 85       	ldd	r21, Y+12	; 0x0c
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	80 e8       	ldi	r24, 0x80	; 128
    1210:	9f e3       	ldi	r25, 0x3F	; 63
    1212:	ae d1       	rcall	.+860    	; 0x1570 <__divsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	89 87       	std	Y+9, r24	; 0x09
    121a:	9a 87       	std	Y+10, r25	; 0x0a
    121c:	ab 87       	std	Y+11, r26	; 0x0b
    121e:	bc 87       	std	Y+12, r27	; 0x0c
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	44 eb       	ldi	r20, 0xB4	; 180
    1226:	53 e4       	ldi	r21, 0x43	; 67
    1228:	69 85       	ldd	r22, Y+9	; 0x09
    122a:	7a 85       	ldd	r23, Y+10	; 0x0a
    122c:	8b 85       	ldd	r24, Y+11	; 0x0b
    122e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1230:	9f d1       	rcall	.+830    	; 0x1570 <__divsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a e7       	ldi	r20, 0x7A	; 122
    123c:	54 e4       	ldi	r21, 0x44	; 68
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	5b d3       	rcall	.+1718   	; 0x18fa <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8d 87       	std	Y+13, r24	; 0x0d
    124a:	9e 87       	std	Y+14, r25	; 0x0e
    124c:	af 87       	std	Y+15, r26	; 0x0f
    124e:	b8 8b       	std	Y+16, r27	; 0x10
    1250:	1a 82       	std	Y+2, r1	; 0x02
    1252:	19 82       	std	Y+1, r1	; 0x01
    1254:	88 e0       	ldi	r24, 0x08	; 8
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	1a c0       	rjmp	.+52     	; 0x128e <ticks2speed+0xec>
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	08 2e       	mov	r0, r24
    125e:	00 0c       	add	r0, r0
    1260:	99 0b       	sbc	r25, r25
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	2b 81       	ldd	r18, Y+3	; 0x03
    1266:	02 2e       	mov	r0, r18
    1268:	00 0c       	add	r0, r0
    126a:	33 0b       	sbc	r19, r19
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	28 5d       	subi	r18, 0xD8	; 216
    1272:	3e 4f       	sbci	r19, 0xFE	; 254
    1274:	f9 01       	movw	r30, r18
    1276:	20 81       	ld	r18, Z
    1278:	31 81       	ldd	r19, Z+1	; 0x01
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	88 5d       	subi	r24, 0xD8	; 216
    1280:	9e 4f       	sbci	r25, 0xFE	; 254
    1282:	fc 01       	movw	r30, r24
    1284:	31 83       	std	Z+1, r19	; 0x01
    1286:	20 83       	st	Z, r18
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	81 50       	subi	r24, 0x01	; 1
    128c:	8b 83       	std	Y+3, r24	; 0x03
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	88 23       	and	r24, r24
    1292:	1c f7       	brge	.-58     	; 0x125a <ticks2speed+0xb8>
    1294:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1296:	98 a1       	ldd	r25, Y+32	; 0x20
    1298:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <timediff+0x1>
    129c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <timediff>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	44 eb       	ldi	r20, 0xB4	; 180
    12a6:	53 e4       	ldi	r21, 0x43	; 67
    12a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    12aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    12ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ae:	98 89       	ldd	r25, Y+16	; 0x10
    12b0:	24 d3       	rcall	.+1608   	; 0x18fa <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	48 ec       	ldi	r20, 0xC8	; 200
    12bc:	52 e4       	ldi	r21, 0x42	; 66
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	56 d1       	rcall	.+684    	; 0x1570 <__divsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	89 8b       	std	Y+17, r24	; 0x11
    12ca:	9a 8b       	std	Y+18, r25	; 0x12
    12cc:	ab 8b       	std	Y+19, r26	; 0x13
    12ce:	bc 8b       	std	Y+20, r27	; 0x14
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	44 e3       	ldi	r20, 0x34	; 52
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	69 89       	ldd	r22, Y+17	; 0x11
    12da:	7a 89       	ldd	r23, Y+18	; 0x12
    12dc:	8b 89       	ldd	r24, Y+19	; 0x13
    12de:	9c 89       	ldd	r25, Y+20	; 0x14
    12e0:	47 d1       	rcall	.+654    	; 0x1570 <__divsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	8d 8b       	std	Y+21, r24	; 0x15
    12e8:	9e 8b       	std	Y+22, r25	; 0x16
    12ea:	af 8b       	std	Y+23, r26	; 0x17
    12ec:	b8 8f       	std	Y+24, r27	; 0x18
    12ee:	8d 89       	ldd	r24, Y+21	; 0x15
    12f0:	9e 89       	ldd	r25, Y+22	; 0x16
    12f2:	af 89       	ldd	r26, Y+23	; 0x17
    12f4:	b8 8d       	ldd	r27, Y+24	; 0x18
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	c5 d2       	rcall	.+1418   	; 0x1886 <lrint>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	cb d1       	rcall	.+918    	; 0x169c <__floatsisf>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	44 e3       	ldi	r20, 0x34	; 52
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	f1 d2       	rcall	.+1506   	; 0x18fa <__mulsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	8c 83       	std	Y+4, r24	; 0x04
    131e:	9d 83       	std	Y+5, r25	; 0x05
    1320:	ae 83       	std	Y+6, r26	; 0x06
    1322:	bf 83       	std	Y+7, r27	; 0x07
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	a9 01       	movw	r20, r18
    132a:	6c 81       	ldd	r22, Y+4	; 0x04
    132c:	7d 81       	ldd	r23, Y+5	; 0x05
    132e:	8e 81       	ldd	r24, Y+6	; 0x06
    1330:	9f 81       	ldd	r25, Y+7	; 0x07
    1332:	1a d1       	rcall	.+564    	; 0x1568 <__cmpsf2>
    1334:	88 23       	and	r24, r24
    1336:	41 f4       	brne	.+16     	; 0x1348 <ticks2speed+0x1a6>
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a4 e3       	ldi	r26, 0x34	; 52
    133e:	b1 e4       	ldi	r27, 0x41	; 65
    1340:	8c 83       	std	Y+4, r24	; 0x04
    1342:	9d 83       	std	Y+5, r25	; 0x05
    1344:	ae 83       	std	Y+6, r26	; 0x06
    1346:	bf 83       	std	Y+7, r27	; 0x07
    1348:	18 86       	std	Y+8, r1	; 0x08
    134a:	13 c0       	rjmp	.+38     	; 0x1372 <ticks2speed+0x1d0>
    134c:	88 85       	ldd	r24, Y+8	; 0x08
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	88 5d       	subi	r24, 0xD8	; 216
    1358:	9e 4f       	sbci	r25, 0xFE	; 254
    135a:	fc 01       	movw	r30, r24
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	29 81       	ldd	r18, Y+1	; 0x01
    1362:	3a 81       	ldd	r19, Y+2	; 0x02
    1364:	82 0f       	add	r24, r18
    1366:	93 1f       	adc	r25, r19
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	88 85       	ldd	r24, Y+8	; 0x08
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	88 87       	std	Y+8, r24	; 0x08
    1372:	88 85       	ldd	r24, Y+8	; 0x08
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	09 2e       	mov	r0, r25
    137a:	00 0c       	add	r0, r0
    137c:	aa 0b       	sbc	r26, r26
    137e:	bb 0b       	sbc	r27, r27
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	8b d1       	rcall	.+790    	; 0x169c <__floatsisf>
    1386:	6b 01       	movw	r12, r22
    1388:	7c 01       	movw	r14, r24
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	44 e3       	ldi	r20, 0x34	; 52
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	6c 81       	ldd	r22, Y+4	; 0x04
    1394:	7d 81       	ldd	r23, Y+5	; 0x05
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	ea d0       	rcall	.+468    	; 0x1570 <__divsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	78 d0       	rcall	.+240    	; 0x149e <__subsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	9c 01       	movw	r18, r24
    13b4:	ad 01       	movw	r20, r26
    13b6:	c7 01       	movw	r24, r14
    13b8:	b6 01       	movw	r22, r12
    13ba:	d6 d0       	rcall	.+428    	; 0x1568 <__cmpsf2>
    13bc:	18 16       	cp	r1, r24
    13be:	34 f6       	brge	.-116    	; 0x134c <ticks2speed+0x1aa>
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	9c 01       	movw	r18, r24
    13c6:	ad ec       	ldi	r26, 0xCD	; 205
    13c8:	bc ec       	ldi	r27, 0xCC	; 204
    13ca:	1a d4       	rcall	.+2100   	; 0x1c00 <__umulhisi3>
    13cc:	96 95       	lsr	r25
    13ce:	87 95       	ror	r24
    13d0:	96 95       	lsr	r25
    13d2:	87 95       	ror	r24
    13d4:	96 95       	lsr	r25
    13d6:	87 95       	ror	r24
    13d8:	cc 01       	movw	r24, r24
    13da:	a0 e0       	ldi	r26, 0x00	; 0
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	5a d1       	rcall	.+692    	; 0x1698 <__floatunsisf>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ea:	3d 81       	ldd	r19, Y+5	; 0x05
    13ec:	4e 81       	ldd	r20, Y+6	; 0x06
    13ee:	5f 81       	ldd	r21, Y+7	; 0x07
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	bd d0       	rcall	.+378    	; 0x1570 <__divsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	9c 01       	movw	r18, r24
    13fc:	ad 01       	movw	r20, r26
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	80 e8       	ldi	r24, 0x80	; 128
    1404:	9f e3       	ldi	r25, 0x3F	; 63
    1406:	b4 d0       	rcall	.+360    	; 0x1570 <__divsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	44 eb       	ldi	r20, 0xB4	; 180
    1412:	53 e4       	ldi	r21, 0x43	; 67
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	ab d0       	rcall	.+342    	; 0x1570 <__divsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a e7       	ldi	r20, 0x7A	; 122
    1424:	54 e4       	ldi	r21, 0x44	; 68
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	67 d2       	rcall	.+1230   	; 0x18fa <__mulsf3>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	89 8f       	std	Y+25, r24	; 0x19
    1432:	9a 8f       	std	Y+26, r25	; 0x1a
    1434:	ab 8f       	std	Y+27, r26	; 0x1b
    1436:	bc 8f       	std	Y+28, r27	; 0x1c
    1438:	2a e8       	ldi	r18, 0x8A	; 138
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4c eb       	ldi	r20, 0xBC	; 188
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	69 8d       	ldd	r22, Y+25	; 0x19
    1442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1448:	58 d2       	rcall	.+1200   	; 0x18fa <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	48 ec       	ldi	r20, 0xC8	; 200
    1454:	52 e4       	ldi	r21, 0x42	; 66
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	4f d2       	rcall	.+1182   	; 0x18fa <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	26 e6       	ldi	r18, 0x66	; 102
    1462:	36 e6       	ldi	r19, 0x66	; 102
    1464:	46 e6       	ldi	r20, 0x66	; 102
    1466:	50 e4       	ldi	r21, 0x40	; 64
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	46 d2       	rcall	.+1164   	; 0x18fa <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	e4 d0       	rcall	.+456    	; 0x1640 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9e 8f       	std	Y+30, r25	; 0x1e
    147e:	8d 8f       	std	Y+29, r24	; 0x1d
    1480:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1482:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1484:	a0 96       	adiw	r28, 0x20	; 32
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
    149c:	08 95       	ret

0000149e <__subsf3>:
    149e:	50 58       	subi	r21, 0x80	; 128

000014a0 <__addsf3>:
    14a0:	bb 27       	eor	r27, r27
    14a2:	aa 27       	eor	r26, r26
    14a4:	0e d0       	rcall	.+28     	; 0x14c2 <__addsf3x>
    14a6:	70 c1       	rjmp	.+736    	; 0x1788 <__fp_round>
    14a8:	61 d1       	rcall	.+706    	; 0x176c <__fp_pscA>
    14aa:	30 f0       	brcs	.+12     	; 0x14b8 <__addsf3+0x18>
    14ac:	66 d1       	rcall	.+716    	; 0x177a <__fp_pscB>
    14ae:	20 f0       	brcs	.+8      	; 0x14b8 <__addsf3+0x18>
    14b0:	31 f4       	brne	.+12     	; 0x14be <__addsf3+0x1e>
    14b2:	9f 3f       	cpi	r25, 0xFF	; 255
    14b4:	11 f4       	brne	.+4      	; 0x14ba <__addsf3+0x1a>
    14b6:	1e f4       	brtc	.+6      	; 0x14be <__addsf3+0x1e>
    14b8:	56 c1       	rjmp	.+684    	; 0x1766 <__fp_nan>
    14ba:	0e f4       	brtc	.+2      	; 0x14be <__addsf3+0x1e>
    14bc:	e0 95       	com	r30
    14be:	e7 fb       	bst	r30, 7
    14c0:	4c c1       	rjmp	.+664    	; 0x175a <__fp_inf>

000014c2 <__addsf3x>:
    14c2:	e9 2f       	mov	r30, r25
    14c4:	72 d1       	rcall	.+740    	; 0x17aa <__fp_split3>
    14c6:	80 f3       	brcs	.-32     	; 0x14a8 <__addsf3+0x8>
    14c8:	ba 17       	cp	r27, r26
    14ca:	62 07       	cpc	r22, r18
    14cc:	73 07       	cpc	r23, r19
    14ce:	84 07       	cpc	r24, r20
    14d0:	95 07       	cpc	r25, r21
    14d2:	18 f0       	brcs	.+6      	; 0x14da <__addsf3x+0x18>
    14d4:	71 f4       	brne	.+28     	; 0x14f2 <__addsf3x+0x30>
    14d6:	9e f5       	brtc	.+102    	; 0x153e <__addsf3x+0x7c>
    14d8:	8a c1       	rjmp	.+788    	; 0x17ee <__fp_zero>
    14da:	0e f4       	brtc	.+2      	; 0x14de <__addsf3x+0x1c>
    14dc:	e0 95       	com	r30
    14de:	0b 2e       	mov	r0, r27
    14e0:	ba 2f       	mov	r27, r26
    14e2:	a0 2d       	mov	r26, r0
    14e4:	0b 01       	movw	r0, r22
    14e6:	b9 01       	movw	r22, r18
    14e8:	90 01       	movw	r18, r0
    14ea:	0c 01       	movw	r0, r24
    14ec:	ca 01       	movw	r24, r20
    14ee:	a0 01       	movw	r20, r0
    14f0:	11 24       	eor	r1, r1
    14f2:	ff 27       	eor	r31, r31
    14f4:	59 1b       	sub	r21, r25
    14f6:	99 f0       	breq	.+38     	; 0x151e <__addsf3x+0x5c>
    14f8:	59 3f       	cpi	r21, 0xF9	; 249
    14fa:	50 f4       	brcc	.+20     	; 0x1510 <__addsf3x+0x4e>
    14fc:	50 3e       	cpi	r21, 0xE0	; 224
    14fe:	68 f1       	brcs	.+90     	; 0x155a <__addsf3x+0x98>
    1500:	1a 16       	cp	r1, r26
    1502:	f0 40       	sbci	r31, 0x00	; 0
    1504:	a2 2f       	mov	r26, r18
    1506:	23 2f       	mov	r18, r19
    1508:	34 2f       	mov	r19, r20
    150a:	44 27       	eor	r20, r20
    150c:	58 5f       	subi	r21, 0xF8	; 248
    150e:	f3 cf       	rjmp	.-26     	; 0x14f6 <__addsf3x+0x34>
    1510:	46 95       	lsr	r20
    1512:	37 95       	ror	r19
    1514:	27 95       	ror	r18
    1516:	a7 95       	ror	r26
    1518:	f0 40       	sbci	r31, 0x00	; 0
    151a:	53 95       	inc	r21
    151c:	c9 f7       	brne	.-14     	; 0x1510 <__addsf3x+0x4e>
    151e:	7e f4       	brtc	.+30     	; 0x153e <__addsf3x+0x7c>
    1520:	1f 16       	cp	r1, r31
    1522:	ba 0b       	sbc	r27, r26
    1524:	62 0b       	sbc	r22, r18
    1526:	73 0b       	sbc	r23, r19
    1528:	84 0b       	sbc	r24, r20
    152a:	ba f0       	brmi	.+46     	; 0x155a <__addsf3x+0x98>
    152c:	91 50       	subi	r25, 0x01	; 1
    152e:	a1 f0       	breq	.+40     	; 0x1558 <__addsf3x+0x96>
    1530:	ff 0f       	add	r31, r31
    1532:	bb 1f       	adc	r27, r27
    1534:	66 1f       	adc	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	c2 f7       	brpl	.-16     	; 0x152c <__addsf3x+0x6a>
    153c:	0e c0       	rjmp	.+28     	; 0x155a <__addsf3x+0x98>
    153e:	ba 0f       	add	r27, r26
    1540:	62 1f       	adc	r22, r18
    1542:	73 1f       	adc	r23, r19
    1544:	84 1f       	adc	r24, r20
    1546:	48 f4       	brcc	.+18     	; 0x155a <__addsf3x+0x98>
    1548:	87 95       	ror	r24
    154a:	77 95       	ror	r23
    154c:	67 95       	ror	r22
    154e:	b7 95       	ror	r27
    1550:	f7 95       	ror	r31
    1552:	9e 3f       	cpi	r25, 0xFE	; 254
    1554:	08 f0       	brcs	.+2      	; 0x1558 <__addsf3x+0x96>
    1556:	b3 cf       	rjmp	.-154    	; 0x14be <__addsf3+0x1e>
    1558:	93 95       	inc	r25
    155a:	88 0f       	add	r24, r24
    155c:	08 f0       	brcs	.+2      	; 0x1560 <__addsf3x+0x9e>
    155e:	99 27       	eor	r25, r25
    1560:	ee 0f       	add	r30, r30
    1562:	97 95       	ror	r25
    1564:	87 95       	ror	r24
    1566:	08 95       	ret

00001568 <__cmpsf2>:
    1568:	d4 d0       	rcall	.+424    	; 0x1712 <__fp_cmp>
    156a:	08 f4       	brcc	.+2      	; 0x156e <__cmpsf2+0x6>
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	08 95       	ret

00001570 <__divsf3>:
    1570:	0c d0       	rcall	.+24     	; 0x158a <__divsf3x>
    1572:	0a c1       	rjmp	.+532    	; 0x1788 <__fp_round>
    1574:	02 d1       	rcall	.+516    	; 0x177a <__fp_pscB>
    1576:	40 f0       	brcs	.+16     	; 0x1588 <__divsf3+0x18>
    1578:	f9 d0       	rcall	.+498    	; 0x176c <__fp_pscA>
    157a:	30 f0       	brcs	.+12     	; 0x1588 <__divsf3+0x18>
    157c:	21 f4       	brne	.+8      	; 0x1586 <__divsf3+0x16>
    157e:	5f 3f       	cpi	r21, 0xFF	; 255
    1580:	19 f0       	breq	.+6      	; 0x1588 <__divsf3+0x18>
    1582:	eb c0       	rjmp	.+470    	; 0x175a <__fp_inf>
    1584:	51 11       	cpse	r21, r1
    1586:	34 c1       	rjmp	.+616    	; 0x17f0 <__fp_szero>
    1588:	ee c0       	rjmp	.+476    	; 0x1766 <__fp_nan>

0000158a <__divsf3x>:
    158a:	0f d1       	rcall	.+542    	; 0x17aa <__fp_split3>
    158c:	98 f3       	brcs	.-26     	; 0x1574 <__divsf3+0x4>

0000158e <__divsf3_pse>:
    158e:	99 23       	and	r25, r25
    1590:	c9 f3       	breq	.-14     	; 0x1584 <__divsf3+0x14>
    1592:	55 23       	and	r21, r21
    1594:	b1 f3       	breq	.-20     	; 0x1582 <__divsf3+0x12>
    1596:	95 1b       	sub	r25, r21
    1598:	55 0b       	sbc	r21, r21
    159a:	bb 27       	eor	r27, r27
    159c:	aa 27       	eor	r26, r26
    159e:	62 17       	cp	r22, r18
    15a0:	73 07       	cpc	r23, r19
    15a2:	84 07       	cpc	r24, r20
    15a4:	38 f0       	brcs	.+14     	; 0x15b4 <__divsf3_pse+0x26>
    15a6:	9f 5f       	subi	r25, 0xFF	; 255
    15a8:	5f 4f       	sbci	r21, 0xFF	; 255
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	44 1f       	adc	r20, r20
    15b0:	aa 1f       	adc	r26, r26
    15b2:	a9 f3       	breq	.-22     	; 0x159e <__divsf3_pse+0x10>
    15b4:	33 d0       	rcall	.+102    	; 0x161c <__divsf3_pse+0x8e>
    15b6:	0e 2e       	mov	r0, r30
    15b8:	3a f0       	brmi	.+14     	; 0x15c8 <__divsf3_pse+0x3a>
    15ba:	e0 e8       	ldi	r30, 0x80	; 128
    15bc:	30 d0       	rcall	.+96     	; 0x161e <__divsf3_pse+0x90>
    15be:	91 50       	subi	r25, 0x01	; 1
    15c0:	50 40       	sbci	r21, 0x00	; 0
    15c2:	e6 95       	lsr	r30
    15c4:	00 1c       	adc	r0, r0
    15c6:	ca f7       	brpl	.-14     	; 0x15ba <__divsf3_pse+0x2c>
    15c8:	29 d0       	rcall	.+82     	; 0x161c <__divsf3_pse+0x8e>
    15ca:	fe 2f       	mov	r31, r30
    15cc:	27 d0       	rcall	.+78     	; 0x161c <__divsf3_pse+0x8e>
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	bb 1f       	adc	r27, r27
    15d6:	26 17       	cp	r18, r22
    15d8:	37 07       	cpc	r19, r23
    15da:	48 07       	cpc	r20, r24
    15dc:	ab 07       	cpc	r26, r27
    15de:	b0 e8       	ldi	r27, 0x80	; 128
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <__divsf3_pse+0x56>
    15e2:	bb 0b       	sbc	r27, r27
    15e4:	80 2d       	mov	r24, r0
    15e6:	bf 01       	movw	r22, r30
    15e8:	ff 27       	eor	r31, r31
    15ea:	93 58       	subi	r25, 0x83	; 131
    15ec:	5f 4f       	sbci	r21, 0xFF	; 255
    15ee:	2a f0       	brmi	.+10     	; 0x15fa <__divsf3_pse+0x6c>
    15f0:	9e 3f       	cpi	r25, 0xFE	; 254
    15f2:	51 05       	cpc	r21, r1
    15f4:	68 f0       	brcs	.+26     	; 0x1610 <__divsf3_pse+0x82>
    15f6:	b1 c0       	rjmp	.+354    	; 0x175a <__fp_inf>
    15f8:	fb c0       	rjmp	.+502    	; 0x17f0 <__fp_szero>
    15fa:	5f 3f       	cpi	r21, 0xFF	; 255
    15fc:	ec f3       	brlt	.-6      	; 0x15f8 <__divsf3_pse+0x6a>
    15fe:	98 3e       	cpi	r25, 0xE8	; 232
    1600:	dc f3       	brlt	.-10     	; 0x15f8 <__divsf3_pse+0x6a>
    1602:	86 95       	lsr	r24
    1604:	77 95       	ror	r23
    1606:	67 95       	ror	r22
    1608:	b7 95       	ror	r27
    160a:	f7 95       	ror	r31
    160c:	9f 5f       	subi	r25, 0xFF	; 255
    160e:	c9 f7       	brne	.-14     	; 0x1602 <__divsf3_pse+0x74>
    1610:	88 0f       	add	r24, r24
    1612:	91 1d       	adc	r25, r1
    1614:	96 95       	lsr	r25
    1616:	87 95       	ror	r24
    1618:	97 f9       	bld	r25, 7
    161a:	08 95       	ret
    161c:	e1 e0       	ldi	r30, 0x01	; 1
    161e:	66 0f       	add	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	88 1f       	adc	r24, r24
    1624:	bb 1f       	adc	r27, r27
    1626:	62 17       	cp	r22, r18
    1628:	73 07       	cpc	r23, r19
    162a:	84 07       	cpc	r24, r20
    162c:	ba 07       	cpc	r27, r26
    162e:	20 f0       	brcs	.+8      	; 0x1638 <__divsf3_pse+0xaa>
    1630:	62 1b       	sub	r22, r18
    1632:	73 0b       	sbc	r23, r19
    1634:	84 0b       	sbc	r24, r20
    1636:	ba 0b       	sbc	r27, r26
    1638:	ee 1f       	adc	r30, r30
    163a:	88 f7       	brcc	.-30     	; 0x161e <__divsf3_pse+0x90>
    163c:	e0 95       	com	r30
    163e:	08 95       	ret

00001640 <__fixunssfsi>:
    1640:	bc d0       	rcall	.+376    	; 0x17ba <__fp_splitA>
    1642:	88 f0       	brcs	.+34     	; 0x1666 <__fixunssfsi+0x26>
    1644:	9f 57       	subi	r25, 0x7F	; 127
    1646:	90 f0       	brcs	.+36     	; 0x166c <__fixunssfsi+0x2c>
    1648:	b9 2f       	mov	r27, r25
    164a:	99 27       	eor	r25, r25
    164c:	b7 51       	subi	r27, 0x17	; 23
    164e:	a0 f0       	brcs	.+40     	; 0x1678 <__fixunssfsi+0x38>
    1650:	d1 f0       	breq	.+52     	; 0x1686 <__fixunssfsi+0x46>
    1652:	66 0f       	add	r22, r22
    1654:	77 1f       	adc	r23, r23
    1656:	88 1f       	adc	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	1a f0       	brmi	.+6      	; 0x1662 <__fixunssfsi+0x22>
    165c:	ba 95       	dec	r27
    165e:	c9 f7       	brne	.-14     	; 0x1652 <__fixunssfsi+0x12>
    1660:	12 c0       	rjmp	.+36     	; 0x1686 <__fixunssfsi+0x46>
    1662:	b1 30       	cpi	r27, 0x01	; 1
    1664:	81 f0       	breq	.+32     	; 0x1686 <__fixunssfsi+0x46>
    1666:	c3 d0       	rcall	.+390    	; 0x17ee <__fp_zero>
    1668:	b1 e0       	ldi	r27, 0x01	; 1
    166a:	08 95       	ret
    166c:	c0 c0       	rjmp	.+384    	; 0x17ee <__fp_zero>
    166e:	67 2f       	mov	r22, r23
    1670:	78 2f       	mov	r23, r24
    1672:	88 27       	eor	r24, r24
    1674:	b8 5f       	subi	r27, 0xF8	; 248
    1676:	39 f0       	breq	.+14     	; 0x1686 <__fixunssfsi+0x46>
    1678:	b9 3f       	cpi	r27, 0xF9	; 249
    167a:	cc f3       	brlt	.-14     	; 0x166e <__fixunssfsi+0x2e>
    167c:	86 95       	lsr	r24
    167e:	77 95       	ror	r23
    1680:	67 95       	ror	r22
    1682:	b3 95       	inc	r27
    1684:	d9 f7       	brne	.-10     	; 0x167c <__fixunssfsi+0x3c>
    1686:	3e f4       	brtc	.+14     	; 0x1696 <__fixunssfsi+0x56>
    1688:	90 95       	com	r25
    168a:	80 95       	com	r24
    168c:	70 95       	com	r23
    168e:	61 95       	neg	r22
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	08 95       	ret

00001698 <__floatunsisf>:
    1698:	e8 94       	clt
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <__floatsisf+0x12>

0000169c <__floatsisf>:
    169c:	97 fb       	bst	r25, 7
    169e:	3e f4       	brtc	.+14     	; 0x16ae <__floatsisf+0x12>
    16a0:	90 95       	com	r25
    16a2:	80 95       	com	r24
    16a4:	70 95       	com	r23
    16a6:	61 95       	neg	r22
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	99 23       	and	r25, r25
    16b0:	a9 f0       	breq	.+42     	; 0x16dc <__floatsisf+0x40>
    16b2:	f9 2f       	mov	r31, r25
    16b4:	96 e9       	ldi	r25, 0x96	; 150
    16b6:	bb 27       	eor	r27, r27
    16b8:	93 95       	inc	r25
    16ba:	f6 95       	lsr	r31
    16bc:	87 95       	ror	r24
    16be:	77 95       	ror	r23
    16c0:	67 95       	ror	r22
    16c2:	b7 95       	ror	r27
    16c4:	f1 11       	cpse	r31, r1
    16c6:	f8 cf       	rjmp	.-16     	; 0x16b8 <__floatsisf+0x1c>
    16c8:	fa f4       	brpl	.+62     	; 0x1708 <__floatsisf+0x6c>
    16ca:	bb 0f       	add	r27, r27
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <__floatsisf+0x36>
    16ce:	60 ff       	sbrs	r22, 0
    16d0:	1b c0       	rjmp	.+54     	; 0x1708 <__floatsisf+0x6c>
    16d2:	6f 5f       	subi	r22, 0xFF	; 255
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 4f       	sbci	r24, 0xFF	; 255
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	16 c0       	rjmp	.+44     	; 0x1708 <__floatsisf+0x6c>
    16dc:	88 23       	and	r24, r24
    16de:	11 f0       	breq	.+4      	; 0x16e4 <__floatsisf+0x48>
    16e0:	96 e9       	ldi	r25, 0x96	; 150
    16e2:	11 c0       	rjmp	.+34     	; 0x1706 <__floatsisf+0x6a>
    16e4:	77 23       	and	r23, r23
    16e6:	21 f0       	breq	.+8      	; 0x16f0 <__floatsisf+0x54>
    16e8:	9e e8       	ldi	r25, 0x8E	; 142
    16ea:	87 2f       	mov	r24, r23
    16ec:	76 2f       	mov	r23, r22
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <__floatsisf+0x5e>
    16f0:	66 23       	and	r22, r22
    16f2:	71 f0       	breq	.+28     	; 0x1710 <__floatsisf+0x74>
    16f4:	96 e8       	ldi	r25, 0x86	; 134
    16f6:	86 2f       	mov	r24, r22
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	2a f0       	brmi	.+10     	; 0x1708 <__floatsisf+0x6c>
    16fe:	9a 95       	dec	r25
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	da f7       	brpl	.-10     	; 0x16fe <__floatsisf+0x62>
    1708:	88 0f       	add	r24, r24
    170a:	96 95       	lsr	r25
    170c:	87 95       	ror	r24
    170e:	97 f9       	bld	r25, 7
    1710:	08 95       	ret

00001712 <__fp_cmp>:
    1712:	99 0f       	add	r25, r25
    1714:	00 08       	sbc	r0, r0
    1716:	55 0f       	add	r21, r21
    1718:	aa 0b       	sbc	r26, r26
    171a:	e0 e8       	ldi	r30, 0x80	; 128
    171c:	fe ef       	ldi	r31, 0xFE	; 254
    171e:	16 16       	cp	r1, r22
    1720:	17 06       	cpc	r1, r23
    1722:	e8 07       	cpc	r30, r24
    1724:	f9 07       	cpc	r31, r25
    1726:	c0 f0       	brcs	.+48     	; 0x1758 <__fp_cmp+0x46>
    1728:	12 16       	cp	r1, r18
    172a:	13 06       	cpc	r1, r19
    172c:	e4 07       	cpc	r30, r20
    172e:	f5 07       	cpc	r31, r21
    1730:	98 f0       	brcs	.+38     	; 0x1758 <__fp_cmp+0x46>
    1732:	62 1b       	sub	r22, r18
    1734:	73 0b       	sbc	r23, r19
    1736:	84 0b       	sbc	r24, r20
    1738:	95 0b       	sbc	r25, r21
    173a:	39 f4       	brne	.+14     	; 0x174a <__fp_cmp+0x38>
    173c:	0a 26       	eor	r0, r26
    173e:	61 f0       	breq	.+24     	; 0x1758 <__fp_cmp+0x46>
    1740:	23 2b       	or	r18, r19
    1742:	24 2b       	or	r18, r20
    1744:	25 2b       	or	r18, r21
    1746:	21 f4       	brne	.+8      	; 0x1750 <__fp_cmp+0x3e>
    1748:	08 95       	ret
    174a:	0a 26       	eor	r0, r26
    174c:	09 f4       	brne	.+2      	; 0x1750 <__fp_cmp+0x3e>
    174e:	a1 40       	sbci	r26, 0x01	; 1
    1750:	a6 95       	lsr	r26
    1752:	8f ef       	ldi	r24, 0xFF	; 255
    1754:	81 1d       	adc	r24, r1
    1756:	81 1d       	adc	r24, r1
    1758:	08 95       	ret

0000175a <__fp_inf>:
    175a:	97 f9       	bld	r25, 7
    175c:	9f 67       	ori	r25, 0x7F	; 127
    175e:	80 e8       	ldi	r24, 0x80	; 128
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	08 95       	ret

00001766 <__fp_nan>:
    1766:	9f ef       	ldi	r25, 0xFF	; 255
    1768:	80 ec       	ldi	r24, 0xC0	; 192
    176a:	08 95       	ret

0000176c <__fp_pscA>:
    176c:	00 24       	eor	r0, r0
    176e:	0a 94       	dec	r0
    1770:	16 16       	cp	r1, r22
    1772:	17 06       	cpc	r1, r23
    1774:	18 06       	cpc	r1, r24
    1776:	09 06       	cpc	r0, r25
    1778:	08 95       	ret

0000177a <__fp_pscB>:
    177a:	00 24       	eor	r0, r0
    177c:	0a 94       	dec	r0
    177e:	12 16       	cp	r1, r18
    1780:	13 06       	cpc	r1, r19
    1782:	14 06       	cpc	r1, r20
    1784:	05 06       	cpc	r0, r21
    1786:	08 95       	ret

00001788 <__fp_round>:
    1788:	09 2e       	mov	r0, r25
    178a:	03 94       	inc	r0
    178c:	00 0c       	add	r0, r0
    178e:	11 f4       	brne	.+4      	; 0x1794 <__fp_round+0xc>
    1790:	88 23       	and	r24, r24
    1792:	52 f0       	brmi	.+20     	; 0x17a8 <__fp_round+0x20>
    1794:	bb 0f       	add	r27, r27
    1796:	40 f4       	brcc	.+16     	; 0x17a8 <__fp_round+0x20>
    1798:	bf 2b       	or	r27, r31
    179a:	11 f4       	brne	.+4      	; 0x17a0 <__fp_round+0x18>
    179c:	60 ff       	sbrs	r22, 0
    179e:	04 c0       	rjmp	.+8      	; 0x17a8 <__fp_round+0x20>
    17a0:	6f 5f       	subi	r22, 0xFF	; 255
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	8f 4f       	sbci	r24, 0xFF	; 255
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	08 95       	ret

000017aa <__fp_split3>:
    17aa:	57 fd       	sbrc	r21, 7
    17ac:	90 58       	subi	r25, 0x80	; 128
    17ae:	44 0f       	add	r20, r20
    17b0:	55 1f       	adc	r21, r21
    17b2:	59 f0       	breq	.+22     	; 0x17ca <__fp_splitA+0x10>
    17b4:	5f 3f       	cpi	r21, 0xFF	; 255
    17b6:	71 f0       	breq	.+28     	; 0x17d4 <__fp_splitA+0x1a>
    17b8:	47 95       	ror	r20

000017ba <__fp_splitA>:
    17ba:	88 0f       	add	r24, r24
    17bc:	97 fb       	bst	r25, 7
    17be:	99 1f       	adc	r25, r25
    17c0:	61 f0       	breq	.+24     	; 0x17da <__fp_splitA+0x20>
    17c2:	9f 3f       	cpi	r25, 0xFF	; 255
    17c4:	79 f0       	breq	.+30     	; 0x17e4 <__fp_splitA+0x2a>
    17c6:	87 95       	ror	r24
    17c8:	08 95       	ret
    17ca:	12 16       	cp	r1, r18
    17cc:	13 06       	cpc	r1, r19
    17ce:	14 06       	cpc	r1, r20
    17d0:	55 1f       	adc	r21, r21
    17d2:	f2 cf       	rjmp	.-28     	; 0x17b8 <__fp_split3+0xe>
    17d4:	46 95       	lsr	r20
    17d6:	f1 df       	rcall	.-30     	; 0x17ba <__fp_splitA>
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <__fp_splitA+0x30>
    17da:	16 16       	cp	r1, r22
    17dc:	17 06       	cpc	r1, r23
    17de:	18 06       	cpc	r1, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	f1 cf       	rjmp	.-30     	; 0x17c6 <__fp_splitA+0xc>
    17e4:	86 95       	lsr	r24
    17e6:	71 05       	cpc	r23, r1
    17e8:	61 05       	cpc	r22, r1
    17ea:	08 94       	sec
    17ec:	08 95       	ret

000017ee <__fp_zero>:
    17ee:	e8 94       	clt

000017f0 <__fp_szero>:
    17f0:	bb 27       	eor	r27, r27
    17f2:	66 27       	eor	r22, r22
    17f4:	77 27       	eor	r23, r23
    17f6:	cb 01       	movw	r24, r22
    17f8:	97 f9       	bld	r25, 7
    17fa:	08 95       	ret
    17fc:	0e f0       	brts	.+2      	; 0x1800 <__fp_szero+0x10>
    17fe:	5d c1       	rjmp	.+698    	; 0x1aba <__fp_mpack>
    1800:	b2 cf       	rjmp	.-156    	; 0x1766 <__fp_nan>
    1802:	68 94       	set
    1804:	aa cf       	rjmp	.-172    	; 0x175a <__fp_inf>

00001806 <log>:
    1806:	d9 df       	rcall	.-78     	; 0x17ba <__fp_splitA>
    1808:	c8 f3       	brcs	.-14     	; 0x17fc <__fp_szero+0xc>
    180a:	99 23       	and	r25, r25
    180c:	d1 f3       	breq	.-12     	; 0x1802 <__fp_szero+0x12>
    180e:	c6 f3       	brts	.-16     	; 0x1800 <__fp_szero+0x10>
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	1f 93       	push	r17
    1816:	0f 93       	push	r16
    1818:	ff 92       	push	r15
    181a:	c9 2f       	mov	r28, r25
    181c:	dd 27       	eor	r29, r29
    181e:	88 23       	and	r24, r24
    1820:	2a f0       	brmi	.+10     	; 0x182c <log+0x26>
    1822:	21 97       	sbiw	r28, 0x01	; 1
    1824:	66 0f       	add	r22, r22
    1826:	77 1f       	adc	r23, r23
    1828:	88 1f       	adc	r24, r24
    182a:	da f7       	brpl	.-10     	; 0x1822 <log+0x1c>
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e8       	ldi	r20, 0x80	; 128
    1832:	5f eb       	ldi	r21, 0xBF	; 191
    1834:	9f e3       	ldi	r25, 0x3F	; 63
    1836:	88 39       	cpi	r24, 0x98	; 152
    1838:	20 f0       	brcs	.+8      	; 0x1842 <log+0x3c>
    183a:	80 3e       	cpi	r24, 0xE0	; 224
    183c:	30 f0       	brcs	.+12     	; 0x184a <log+0x44>
    183e:	21 96       	adiw	r28, 0x01	; 1
    1840:	8f 77       	andi	r24, 0x7F	; 127
    1842:	2e de       	rcall	.-932    	; 0x14a0 <__addsf3>
    1844:	e4 e9       	ldi	r30, 0x94	; 148
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <log+0x4a>
    184a:	2a de       	rcall	.-940    	; 0x14a0 <__addsf3>
    184c:	e1 ec       	ldi	r30, 0xC1	; 193
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	42 d1       	rcall	.+644    	; 0x1ad6 <__fp_powser>
    1852:	8b 01       	movw	r16, r22
    1854:	be 01       	movw	r22, r28
    1856:	ec 01       	movw	r28, r24
    1858:	fb 2e       	mov	r15, r27
    185a:	6f 57       	subi	r22, 0x7F	; 127
    185c:	71 09       	sbc	r23, r1
    185e:	75 95       	asr	r23
    1860:	77 1f       	adc	r23, r23
    1862:	88 0b       	sbc	r24, r24
    1864:	99 0b       	sbc	r25, r25
    1866:	1a df       	rcall	.-460    	; 0x169c <__floatsisf>
    1868:	28 e1       	ldi	r18, 0x18	; 24
    186a:	32 e7       	ldi	r19, 0x72	; 114
    186c:	41 e3       	ldi	r20, 0x31	; 49
    186e:	5f e3       	ldi	r21, 0x3F	; 63
    1870:	50 d0       	rcall	.+160    	; 0x1912 <__mulsf3x>
    1872:	af 2d       	mov	r26, r15
    1874:	98 01       	movw	r18, r16
    1876:	ae 01       	movw	r20, r28
    1878:	ff 90       	pop	r15
    187a:	0f 91       	pop	r16
    187c:	1f 91       	pop	r17
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	1f de       	rcall	.-962    	; 0x14c2 <__addsf3x>
    1884:	81 cf       	rjmp	.-254    	; 0x1788 <__fp_round>

00001886 <lrint>:
    1886:	99 df       	rcall	.-206    	; 0x17ba <__fp_splitA>
    1888:	a8 f1       	brcs	.+106    	; 0x18f4 <lrint+0x6e>
    188a:	9e 57       	subi	r25, 0x7E	; 126
    188c:	a8 f1       	brcs	.+106    	; 0x18f8 <lrint+0x72>
    188e:	98 51       	subi	r25, 0x18	; 24
    1890:	60 f0       	brcs	.+24     	; 0x18aa <lrint+0x24>
    1892:	39 f1       	breq	.+78     	; 0x18e2 <lrint+0x5c>
    1894:	98 30       	cpi	r25, 0x08	; 8
    1896:	70 f5       	brcc	.+92     	; 0x18f4 <lrint+0x6e>
    1898:	09 2e       	mov	r0, r25
    189a:	99 27       	eor	r25, r25
    189c:	66 0f       	add	r22, r22
    189e:	77 1f       	adc	r23, r23
    18a0:	88 1f       	adc	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	d1 f7       	brne	.-12     	; 0x189c <lrint+0x16>
    18a8:	1c c0       	rjmp	.+56     	; 0x18e2 <lrint+0x5c>
    18aa:	bb 27       	eor	r27, r27
    18ac:	99 3f       	cpi	r25, 0xF9	; 249
    18ae:	4c f4       	brge	.+18     	; 0x18c2 <lrint+0x3c>
    18b0:	b1 11       	cpse	r27, r1
    18b2:	b1 e0       	ldi	r27, 0x01	; 1
    18b4:	b6 2b       	or	r27, r22
    18b6:	67 2f       	mov	r22, r23
    18b8:	78 2f       	mov	r23, r24
    18ba:	88 27       	eor	r24, r24
    18bc:	98 5f       	subi	r25, 0xF8	; 248
    18be:	b1 f7       	brne	.-20     	; 0x18ac <lrint+0x26>
    18c0:	08 c0       	rjmp	.+16     	; 0x18d2 <lrint+0x4c>
    18c2:	86 95       	lsr	r24
    18c4:	77 95       	ror	r23
    18c6:	67 95       	ror	r22
    18c8:	b7 95       	ror	r27
    18ca:	08 f4       	brcc	.+2      	; 0x18ce <lrint+0x48>
    18cc:	b1 60       	ori	r27, 0x01	; 1
    18ce:	93 95       	inc	r25
    18d0:	c1 f7       	brne	.-16     	; 0x18c2 <lrint+0x3c>
    18d2:	bb 0f       	add	r27, r27
    18d4:	30 f4       	brcc	.+12     	; 0x18e2 <lrint+0x5c>
    18d6:	11 f4       	brne	.+4      	; 0x18dc <lrint+0x56>
    18d8:	60 ff       	sbrs	r22, 0
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <lrint+0x5c>
    18dc:	6f 5f       	subi	r22, 0xFF	; 255
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8f 4f       	sbci	r24, 0xFF	; 255
    18e2:	3e f4       	brtc	.+14     	; 0x18f2 <lrint+0x6c>
    18e4:	90 95       	com	r25
    18e6:	80 95       	com	r24
    18e8:	70 95       	com	r23
    18ea:	61 95       	neg	r22
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	8f 4f       	sbci	r24, 0xFF	; 255
    18f0:	9f 4f       	sbci	r25, 0xFF	; 255
    18f2:	08 95       	ret
    18f4:	68 94       	set
    18f6:	7c cf       	rjmp	.-264    	; 0x17f0 <__fp_szero>
    18f8:	7a cf       	rjmp	.-268    	; 0x17ee <__fp_zero>

000018fa <__mulsf3>:
    18fa:	0b d0       	rcall	.+22     	; 0x1912 <__mulsf3x>
    18fc:	45 cf       	rjmp	.-374    	; 0x1788 <__fp_round>
    18fe:	36 df       	rcall	.-404    	; 0x176c <__fp_pscA>
    1900:	28 f0       	brcs	.+10     	; 0x190c <__mulsf3+0x12>
    1902:	3b df       	rcall	.-394    	; 0x177a <__fp_pscB>
    1904:	18 f0       	brcs	.+6      	; 0x190c <__mulsf3+0x12>
    1906:	95 23       	and	r25, r21
    1908:	09 f0       	breq	.+2      	; 0x190c <__mulsf3+0x12>
    190a:	27 cf       	rjmp	.-434    	; 0x175a <__fp_inf>
    190c:	2c cf       	rjmp	.-424    	; 0x1766 <__fp_nan>
    190e:	11 24       	eor	r1, r1
    1910:	6f cf       	rjmp	.-290    	; 0x17f0 <__fp_szero>

00001912 <__mulsf3x>:
    1912:	4b df       	rcall	.-362    	; 0x17aa <__fp_split3>
    1914:	a0 f3       	brcs	.-24     	; 0x18fe <__mulsf3+0x4>

00001916 <__mulsf3_pse>:
    1916:	95 9f       	mul	r25, r21
    1918:	d1 f3       	breq	.-12     	; 0x190e <__mulsf3+0x14>
    191a:	95 0f       	add	r25, r21
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	55 1f       	adc	r21, r21
    1920:	62 9f       	mul	r22, r18
    1922:	f0 01       	movw	r30, r0
    1924:	72 9f       	mul	r23, r18
    1926:	bb 27       	eor	r27, r27
    1928:	f0 0d       	add	r31, r0
    192a:	b1 1d       	adc	r27, r1
    192c:	63 9f       	mul	r22, r19
    192e:	aa 27       	eor	r26, r26
    1930:	f0 0d       	add	r31, r0
    1932:	b1 1d       	adc	r27, r1
    1934:	aa 1f       	adc	r26, r26
    1936:	64 9f       	mul	r22, r20
    1938:	66 27       	eor	r22, r22
    193a:	b0 0d       	add	r27, r0
    193c:	a1 1d       	adc	r26, r1
    193e:	66 1f       	adc	r22, r22
    1940:	82 9f       	mul	r24, r18
    1942:	22 27       	eor	r18, r18
    1944:	b0 0d       	add	r27, r0
    1946:	a1 1d       	adc	r26, r1
    1948:	62 1f       	adc	r22, r18
    194a:	73 9f       	mul	r23, r19
    194c:	b0 0d       	add	r27, r0
    194e:	a1 1d       	adc	r26, r1
    1950:	62 1f       	adc	r22, r18
    1952:	83 9f       	mul	r24, r19
    1954:	a0 0d       	add	r26, r0
    1956:	61 1d       	adc	r22, r1
    1958:	22 1f       	adc	r18, r18
    195a:	74 9f       	mul	r23, r20
    195c:	33 27       	eor	r19, r19
    195e:	a0 0d       	add	r26, r0
    1960:	61 1d       	adc	r22, r1
    1962:	23 1f       	adc	r18, r19
    1964:	84 9f       	mul	r24, r20
    1966:	60 0d       	add	r22, r0
    1968:	21 1d       	adc	r18, r1
    196a:	82 2f       	mov	r24, r18
    196c:	76 2f       	mov	r23, r22
    196e:	6a 2f       	mov	r22, r26
    1970:	11 24       	eor	r1, r1
    1972:	9f 57       	subi	r25, 0x7F	; 127
    1974:	50 40       	sbci	r21, 0x00	; 0
    1976:	8a f0       	brmi	.+34     	; 0x199a <__mulsf3_pse+0x84>
    1978:	e1 f0       	breq	.+56     	; 0x19b2 <__mulsf3_pse+0x9c>
    197a:	88 23       	and	r24, r24
    197c:	4a f0       	brmi	.+18     	; 0x1990 <__mulsf3_pse+0x7a>
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	bb 1f       	adc	r27, r27
    1984:	66 1f       	adc	r22, r22
    1986:	77 1f       	adc	r23, r23
    1988:	88 1f       	adc	r24, r24
    198a:	91 50       	subi	r25, 0x01	; 1
    198c:	50 40       	sbci	r21, 0x00	; 0
    198e:	a9 f7       	brne	.-22     	; 0x197a <__mulsf3_pse+0x64>
    1990:	9e 3f       	cpi	r25, 0xFE	; 254
    1992:	51 05       	cpc	r21, r1
    1994:	70 f0       	brcs	.+28     	; 0x19b2 <__mulsf3_pse+0x9c>
    1996:	e1 ce       	rjmp	.-574    	; 0x175a <__fp_inf>
    1998:	2b cf       	rjmp	.-426    	; 0x17f0 <__fp_szero>
    199a:	5f 3f       	cpi	r21, 0xFF	; 255
    199c:	ec f3       	brlt	.-6      	; 0x1998 <__mulsf3_pse+0x82>
    199e:	98 3e       	cpi	r25, 0xE8	; 232
    19a0:	dc f3       	brlt	.-10     	; 0x1998 <__mulsf3_pse+0x82>
    19a2:	86 95       	lsr	r24
    19a4:	77 95       	ror	r23
    19a6:	67 95       	ror	r22
    19a8:	b7 95       	ror	r27
    19aa:	f7 95       	ror	r31
    19ac:	e7 95       	ror	r30
    19ae:	9f 5f       	subi	r25, 0xFF	; 255
    19b0:	c1 f7       	brne	.-16     	; 0x19a2 <__mulsf3_pse+0x8c>
    19b2:	fe 2b       	or	r31, r30
    19b4:	88 0f       	add	r24, r24
    19b6:	91 1d       	adc	r25, r1
    19b8:	96 95       	lsr	r25
    19ba:	87 95       	ror	r24
    19bc:	97 f9       	bld	r25, 7
    19be:	08 95       	ret

000019c0 <pow>:
    19c0:	fa 01       	movw	r30, r20
    19c2:	ee 0f       	add	r30, r30
    19c4:	ff 1f       	adc	r31, r31
    19c6:	30 96       	adiw	r30, 0x00	; 0
    19c8:	21 05       	cpc	r18, r1
    19ca:	31 05       	cpc	r19, r1
    19cc:	99 f1       	breq	.+102    	; 0x1a34 <pow+0x74>
    19ce:	61 15       	cp	r22, r1
    19d0:	71 05       	cpc	r23, r1
    19d2:	61 f4       	brne	.+24     	; 0x19ec <pow+0x2c>
    19d4:	80 38       	cpi	r24, 0x80	; 128
    19d6:	bf e3       	ldi	r27, 0x3F	; 63
    19d8:	9b 07       	cpc	r25, r27
    19da:	49 f1       	breq	.+82     	; 0x1a2e <pow+0x6e>
    19dc:	68 94       	set
    19de:	90 38       	cpi	r25, 0x80	; 128
    19e0:	81 05       	cpc	r24, r1
    19e2:	61 f0       	breq	.+24     	; 0x19fc <pow+0x3c>
    19e4:	80 38       	cpi	r24, 0x80	; 128
    19e6:	bf ef       	ldi	r27, 0xFF	; 255
    19e8:	9b 07       	cpc	r25, r27
    19ea:	41 f0       	breq	.+16     	; 0x19fc <pow+0x3c>
    19ec:	99 23       	and	r25, r25
    19ee:	42 f5       	brpl	.+80     	; 0x1a40 <pow+0x80>
    19f0:	ff 3f       	cpi	r31, 0xFF	; 255
    19f2:	e1 05       	cpc	r30, r1
    19f4:	31 05       	cpc	r19, r1
    19f6:	21 05       	cpc	r18, r1
    19f8:	11 f1       	breq	.+68     	; 0x1a3e <pow+0x7e>
    19fa:	e8 94       	clt
    19fc:	08 94       	sec
    19fe:	e7 95       	ror	r30
    1a00:	d9 01       	movw	r26, r18
    1a02:	aa 23       	and	r26, r26
    1a04:	29 f4       	brne	.+10     	; 0x1a10 <pow+0x50>
    1a06:	ab 2f       	mov	r26, r27
    1a08:	be 2f       	mov	r27, r30
    1a0a:	f8 5f       	subi	r31, 0xF8	; 248
    1a0c:	d0 f3       	brcs	.-12     	; 0x1a02 <pow+0x42>
    1a0e:	10 c0       	rjmp	.+32     	; 0x1a30 <pow+0x70>
    1a10:	ff 5f       	subi	r31, 0xFF	; 255
    1a12:	70 f4       	brcc	.+28     	; 0x1a30 <pow+0x70>
    1a14:	a6 95       	lsr	r26
    1a16:	e0 f7       	brcc	.-8      	; 0x1a10 <pow+0x50>
    1a18:	f7 39       	cpi	r31, 0x97	; 151
    1a1a:	50 f0       	brcs	.+20     	; 0x1a30 <pow+0x70>
    1a1c:	19 f0       	breq	.+6      	; 0x1a24 <pow+0x64>
    1a1e:	ff 3a       	cpi	r31, 0xAF	; 175
    1a20:	38 f4       	brcc	.+14     	; 0x1a30 <pow+0x70>
    1a22:	9f 77       	andi	r25, 0x7F	; 127
    1a24:	9f 93       	push	r25
    1a26:	0c d0       	rcall	.+24     	; 0x1a40 <pow+0x80>
    1a28:	0f 90       	pop	r0
    1a2a:	07 fc       	sbrc	r0, 7
    1a2c:	90 58       	subi	r25, 0x80	; 128
    1a2e:	08 95       	ret
    1a30:	3e f0       	brts	.+14     	; 0x1a40 <pow+0x80>
    1a32:	99 ce       	rjmp	.-718    	; 0x1766 <__fp_nan>
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	80 e8       	ldi	r24, 0x80	; 128
    1a3a:	9f e3       	ldi	r25, 0x3F	; 63
    1a3c:	08 95       	ret
    1a3e:	4f e7       	ldi	r20, 0x7F	; 127
    1a40:	9f 77       	andi	r25, 0x7F	; 127
    1a42:	5f 93       	push	r21
    1a44:	4f 93       	push	r20
    1a46:	3f 93       	push	r19
    1a48:	2f 93       	push	r18
    1a4a:	dd de       	rcall	.-582    	; 0x1806 <log>
    1a4c:	2f 91       	pop	r18
    1a4e:	3f 91       	pop	r19
    1a50:	4f 91       	pop	r20
    1a52:	5f 91       	pop	r21
    1a54:	52 df       	rcall	.-348    	; 0x18fa <__mulsf3>
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <exp>
    1a58:	19 f4       	brne	.+6      	; 0x1a60 <pow+0xa0>
    1a5a:	0e f0       	brts	.+2      	; 0x1a5e <pow+0x9e>
    1a5c:	7e ce       	rjmp	.-772    	; 0x175a <__fp_inf>
    1a5e:	c7 ce       	rjmp	.-626    	; 0x17ee <__fp_zero>
    1a60:	82 ce       	rjmp	.-764    	; 0x1766 <__fp_nan>

00001a62 <exp>:
    1a62:	ab de       	rcall	.-682    	; 0x17ba <__fp_splitA>
    1a64:	c8 f3       	brcs	.-14     	; 0x1a58 <pow+0x98>
    1a66:	96 38       	cpi	r25, 0x86	; 134
    1a68:	c0 f7       	brcc	.-16     	; 0x1a5a <pow+0x9a>
    1a6a:	07 f8       	bld	r0, 7
    1a6c:	0f 92       	push	r0
    1a6e:	e8 94       	clt
    1a70:	2b e3       	ldi	r18, 0x3B	; 59
    1a72:	3a ea       	ldi	r19, 0xAA	; 170
    1a74:	48 eb       	ldi	r20, 0xB8	; 184
    1a76:	5f e7       	ldi	r21, 0x7F	; 127
    1a78:	4e df       	rcall	.-356    	; 0x1916 <__mulsf3_pse>
    1a7a:	0f 92       	push	r0
    1a7c:	0f 92       	push	r0
    1a7e:	0f 92       	push	r0
    1a80:	4d b7       	in	r20, 0x3d	; 61
    1a82:	5e b7       	in	r21, 0x3e	; 62
    1a84:	0f 92       	push	r0
    1a86:	89 d0       	rcall	.+274    	; 0x1b9a <modf>
    1a88:	ee ee       	ldi	r30, 0xEE	; 238
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	24 d0       	rcall	.+72     	; 0x1ad6 <__fp_powser>
    1a8e:	4f 91       	pop	r20
    1a90:	5f 91       	pop	r21
    1a92:	ef 91       	pop	r30
    1a94:	ff 91       	pop	r31
    1a96:	e5 95       	asr	r30
    1a98:	ee 1f       	adc	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	49 f0       	breq	.+18     	; 0x1ab0 <exp+0x4e>
    1a9e:	fe 57       	subi	r31, 0x7E	; 126
    1aa0:	e0 68       	ori	r30, 0x80	; 128
    1aa2:	44 27       	eor	r20, r20
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	44 1f       	adc	r20, r20
    1aa8:	fa 95       	dec	r31
    1aaa:	e1 f7       	brne	.-8      	; 0x1aa4 <exp+0x42>
    1aac:	41 95       	neg	r20
    1aae:	55 0b       	sbc	r21, r21
    1ab0:	40 d0       	rcall	.+128    	; 0x1b32 <ldexp>
    1ab2:	0f 90       	pop	r0
    1ab4:	07 fe       	sbrs	r0, 7
    1ab6:	34 c0       	rjmp	.+104    	; 0x1b20 <inverse>
    1ab8:	08 95       	ret

00001aba <__fp_mpack>:
    1aba:	9f 3f       	cpi	r25, 0xFF	; 255
    1abc:	31 f0       	breq	.+12     	; 0x1aca <__fp_mpack_finite+0xc>

00001abe <__fp_mpack_finite>:
    1abe:	91 50       	subi	r25, 0x01	; 1
    1ac0:	20 f4       	brcc	.+8      	; 0x1aca <__fp_mpack_finite+0xc>
    1ac2:	87 95       	ror	r24
    1ac4:	77 95       	ror	r23
    1ac6:	67 95       	ror	r22
    1ac8:	b7 95       	ror	r27
    1aca:	88 0f       	add	r24, r24
    1acc:	91 1d       	adc	r25, r1
    1ace:	96 95       	lsr	r25
    1ad0:	87 95       	ror	r24
    1ad2:	97 f9       	bld	r25, 7
    1ad4:	08 95       	ret

00001ad6 <__fp_powser>:
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	1f 93       	push	r17
    1adc:	0f 93       	push	r16
    1ade:	ff 92       	push	r15
    1ae0:	ef 92       	push	r14
    1ae2:	df 92       	push	r13
    1ae4:	7b 01       	movw	r14, r22
    1ae6:	8c 01       	movw	r16, r24
    1ae8:	68 94       	set
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <__fp_powser+0x20>
    1aec:	da 2e       	mov	r13, r26
    1aee:	ef 01       	movw	r28, r30
    1af0:	10 df       	rcall	.-480    	; 0x1912 <__mulsf3x>
    1af2:	fe 01       	movw	r30, r28
    1af4:	e8 94       	clt
    1af6:	a5 91       	lpm	r26, Z+
    1af8:	25 91       	lpm	r18, Z+
    1afa:	35 91       	lpm	r19, Z+
    1afc:	45 91       	lpm	r20, Z+
    1afe:	55 91       	lpm	r21, Z+
    1b00:	ae f3       	brts	.-22     	; 0x1aec <__fp_powser+0x16>
    1b02:	ef 01       	movw	r28, r30
    1b04:	de dc       	rcall	.-1604   	; 0x14c2 <__addsf3x>
    1b06:	fe 01       	movw	r30, r28
    1b08:	97 01       	movw	r18, r14
    1b0a:	a8 01       	movw	r20, r16
    1b0c:	da 94       	dec	r13
    1b0e:	79 f7       	brne	.-34     	; 0x1aee <__fp_powser+0x18>
    1b10:	df 90       	pop	r13
    1b12:	ef 90       	pop	r14
    1b14:	ff 90       	pop	r15
    1b16:	0f 91       	pop	r16
    1b18:	1f 91       	pop	r17
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <inverse>:
    1b20:	9b 01       	movw	r18, r22
    1b22:	ac 01       	movw	r20, r24
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	80 e8       	ldi	r24, 0x80	; 128
    1b2a:	9f e3       	ldi	r25, 0x3F	; 63
    1b2c:	21 cd       	rjmp	.-1470   	; 0x1570 <__divsf3>
    1b2e:	15 ce       	rjmp	.-982    	; 0x175a <__fp_inf>
    1b30:	c4 cf       	rjmp	.-120    	; 0x1aba <__fp_mpack>

00001b32 <ldexp>:
    1b32:	43 de       	rcall	.-890    	; 0x17ba <__fp_splitA>
    1b34:	e8 f3       	brcs	.-6      	; 0x1b30 <inverse+0x10>
    1b36:	99 23       	and	r25, r25
    1b38:	d9 f3       	breq	.-10     	; 0x1b30 <inverse+0x10>
    1b3a:	94 0f       	add	r25, r20
    1b3c:	51 1d       	adc	r21, r1
    1b3e:	bb f3       	brvs	.-18     	; 0x1b2e <inverse+0xe>
    1b40:	91 50       	subi	r25, 0x01	; 1
    1b42:	50 40       	sbci	r21, 0x00	; 0
    1b44:	94 f0       	brlt	.+36     	; 0x1b6a <ldexp+0x38>
    1b46:	59 f0       	breq	.+22     	; 0x1b5e <ldexp+0x2c>
    1b48:	88 23       	and	r24, r24
    1b4a:	32 f0       	brmi	.+12     	; 0x1b58 <ldexp+0x26>
    1b4c:	66 0f       	add	r22, r22
    1b4e:	77 1f       	adc	r23, r23
    1b50:	88 1f       	adc	r24, r24
    1b52:	91 50       	subi	r25, 0x01	; 1
    1b54:	50 40       	sbci	r21, 0x00	; 0
    1b56:	c1 f7       	brne	.-16     	; 0x1b48 <ldexp+0x16>
    1b58:	9e 3f       	cpi	r25, 0xFE	; 254
    1b5a:	51 05       	cpc	r21, r1
    1b5c:	44 f7       	brge	.-48     	; 0x1b2e <inverse+0xe>
    1b5e:	88 0f       	add	r24, r24
    1b60:	91 1d       	adc	r25, r1
    1b62:	96 95       	lsr	r25
    1b64:	87 95       	ror	r24
    1b66:	97 f9       	bld	r25, 7
    1b68:	08 95       	ret
    1b6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6c:	ac f0       	brlt	.+42     	; 0x1b98 <ldexp+0x66>
    1b6e:	98 3e       	cpi	r25, 0xE8	; 232
    1b70:	9c f0       	brlt	.+38     	; 0x1b98 <ldexp+0x66>
    1b72:	bb 27       	eor	r27, r27
    1b74:	86 95       	lsr	r24
    1b76:	77 95       	ror	r23
    1b78:	67 95       	ror	r22
    1b7a:	b7 95       	ror	r27
    1b7c:	08 f4       	brcc	.+2      	; 0x1b80 <ldexp+0x4e>
    1b7e:	b1 60       	ori	r27, 0x01	; 1
    1b80:	93 95       	inc	r25
    1b82:	c1 f7       	brne	.-16     	; 0x1b74 <ldexp+0x42>
    1b84:	bb 0f       	add	r27, r27
    1b86:	58 f7       	brcc	.-42     	; 0x1b5e <ldexp+0x2c>
    1b88:	11 f4       	brne	.+4      	; 0x1b8e <ldexp+0x5c>
    1b8a:	60 ff       	sbrs	r22, 0
    1b8c:	e8 cf       	rjmp	.-48     	; 0x1b5e <ldexp+0x2c>
    1b8e:	6f 5f       	subi	r22, 0xFF	; 255
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
    1b92:	8f 4f       	sbci	r24, 0xFF	; 255
    1b94:	9f 4f       	sbci	r25, 0xFF	; 255
    1b96:	e3 cf       	rjmp	.-58     	; 0x1b5e <ldexp+0x2c>
    1b98:	2b ce       	rjmp	.-938    	; 0x17f0 <__fp_szero>

00001b9a <modf>:
    1b9a:	fa 01       	movw	r30, r20
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	aa 0f       	add	r26, r26
    1ba0:	bb 1f       	adc	r27, r27
    1ba2:	9b 01       	movw	r18, r22
    1ba4:	ac 01       	movw	r20, r24
    1ba6:	bf 57       	subi	r27, 0x7F	; 127
    1ba8:	28 f4       	brcc	.+10     	; 0x1bb4 <modf+0x1a>
    1baa:	22 27       	eor	r18, r18
    1bac:	33 27       	eor	r19, r19
    1bae:	44 27       	eor	r20, r20
    1bb0:	50 78       	andi	r21, 0x80	; 128
    1bb2:	1f c0       	rjmp	.+62     	; 0x1bf2 <modf+0x58>
    1bb4:	b7 51       	subi	r27, 0x17	; 23
    1bb6:	88 f4       	brcc	.+34     	; 0x1bda <modf+0x40>
    1bb8:	ab 2f       	mov	r26, r27
    1bba:	00 24       	eor	r0, r0
    1bbc:	46 95       	lsr	r20
    1bbe:	37 95       	ror	r19
    1bc0:	27 95       	ror	r18
    1bc2:	01 1c       	adc	r0, r1
    1bc4:	a3 95       	inc	r26
    1bc6:	d2 f3       	brmi	.-12     	; 0x1bbc <modf+0x22>
    1bc8:	00 20       	and	r0, r0
    1bca:	69 f0       	breq	.+26     	; 0x1be6 <modf+0x4c>
    1bcc:	22 0f       	add	r18, r18
    1bce:	33 1f       	adc	r19, r19
    1bd0:	44 1f       	adc	r20, r20
    1bd2:	b3 95       	inc	r27
    1bd4:	da f3       	brmi	.-10     	; 0x1bcc <modf+0x32>
    1bd6:	0d d0       	rcall	.+26     	; 0x1bf2 <modf+0x58>
    1bd8:	62 cc       	rjmp	.-1852   	; 0x149e <__subsf3>
    1bda:	61 30       	cpi	r22, 0x01	; 1
    1bdc:	71 05       	cpc	r23, r1
    1bde:	a0 e8       	ldi	r26, 0x80	; 128
    1be0:	8a 07       	cpc	r24, r26
    1be2:	b9 46       	sbci	r27, 0x69	; 105
    1be4:	30 f4       	brcc	.+12     	; 0x1bf2 <modf+0x58>
    1be6:	9b 01       	movw	r18, r22
    1be8:	ac 01       	movw	r20, r24
    1bea:	66 27       	eor	r22, r22
    1bec:	77 27       	eor	r23, r23
    1bee:	88 27       	eor	r24, r24
    1bf0:	90 78       	andi	r25, 0x80	; 128
    1bf2:	30 96       	adiw	r30, 0x00	; 0
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <modf+0x64>
    1bf6:	20 83       	st	Z, r18
    1bf8:	31 83       	std	Z+1, r19	; 0x01
    1bfa:	42 83       	std	Z+2, r20	; 0x02
    1bfc:	53 83       	std	Z+3, r21	; 0x03
    1bfe:	08 95       	ret

00001c00 <__umulhisi3>:
    1c00:	a2 9f       	mul	r26, r18
    1c02:	b0 01       	movw	r22, r0
    1c04:	b3 9f       	mul	r27, r19
    1c06:	c0 01       	movw	r24, r0
    1c08:	a3 9f       	mul	r26, r19
    1c0a:	70 0d       	add	r23, r0
    1c0c:	81 1d       	adc	r24, r1
    1c0e:	11 24       	eor	r1, r1
    1c10:	91 1d       	adc	r25, r1
    1c12:	b2 9f       	mul	r27, r18
    1c14:	70 0d       	add	r23, r0
    1c16:	81 1d       	adc	r24, r1
    1c18:	11 24       	eor	r1, r1
    1c1a:	91 1d       	adc	r25, r1
    1c1c:	08 95       	ret

00001c1e <_exit>:
    1c1e:	f8 94       	cli

00001c20 <__stop_program>:
    1c20:	ff cf       	rjmp	.-2      	; 0x1c20 <__stop_program>
