
SHB_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  000003ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa5  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd9  00000000  00000000  00001481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000768  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000641  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a3  00000000  00000000  000030ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c1       	rjmp	.+680    	; 0x2ea <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	2c c0       	rjmp	.+88     	; 0xbe <__vector_25>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a1 31       	cpi	r26, 0x11	; 17
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	ab d0       	rcall	.+342    	; 0x208 <main>
  b2:	40 c1       	rjmp	.+640    	; 0x334 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <adc_start_conversion>:
}

void adc_start_conversion()
{
	//Start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC);
  b6:	88 ec       	ldi	r24, 0xC8	; 200
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  bc:	08 95       	ret

000000be <__vector_25>:
}

ISR(ADC_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	0b b6       	in	r0, 0x3b	; 59
  ca:	0f 92       	push	r0
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	e8 2f       	mov	r30, r24
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e3 5f       	subi	r30, 0xF3	; 243
  fa:	fe 4f       	sbci	r31, 0xFE	; 254
  fc:	31 83       	std	Z+1, r19	; 0x01
  fe:	20 83       	st	Z, r18
	adc_next++;
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(adc_next == ADCVALUES)
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	11 f4       	brne	.+4      	; 0x10e <__vector_25+0x50>
	{
		adc_next = 0;
 10a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	adc_start_conversion();
 118:	ce df       	rcall	.-100    	; 0xb6 <adc_start_conversion>
	
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0b be       	out	0x3b, r0	; 59
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <can_check_free>:
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	78 f0       	brcs	.+30     	; 0x162 <can_check_free+0x22>
 144:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 97       	sbiw	r24, 0x08	; 8
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <can_check_free+0x14>
 150:	35 95       	asr	r19
 152:	27 95       	ror	r18
 154:	8a 95       	dec	r24
 156:	e2 f7       	brpl	.-8      	; 0x150 <can_check_free+0x10>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	20 ff       	sbrs	r18, 0
 15c:	0d c0       	rjmp	.+26     	; 0x178 <can_check_free+0x38>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret
 162:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <can_check_free+0x2e>
 16a:	35 95       	asr	r19
 16c:	27 95       	ror	r18
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <can_check_free+0x2a>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	20 fd       	sbrc	r18, 0
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret

0000017a <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
	
	for(uint8_t byte = 0; byte <8; byte++){
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	10 c0       	rjmp	.+32     	; 0x1a4 <can_tx+0x2a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	30 e1       	ldi	r19, 0x10	; 16
 188:	83 9f       	mul	r24, r19
 18a:	c0 01       	movw	r24, r0
 18c:	11 24       	eor	r1, r1
 18e:	82 2b       	or	r24, r18
 190:	88 60       	ori	r24, 0x08	; 8
 192:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANMSG = data[byte];
 196:	fb 01       	movw	r30, r22
 198:	e2 0f       	add	r30, r18
 19a:	f1 1d       	adc	r31, r1
 19c:	80 81       	ld	r24, Z
 19e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	28 30       	cpi	r18, 0x08	; 8
 1a6:	70 f3       	brcs	.-36     	; 0x184 <can_tx+0xa>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 1a8:	8c 81       	ldd	r24, Y+4	; 0x04
 1aa:	82 95       	swap	r24
 1ac:	80 7f       	andi	r24, 0xF0	; 240
 1ae:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 1b2:	8c 81       	ldd	r24, Y+4	; 0x04
 1b4:	c5 df       	rcall	.-118    	; 0x140 <can_check_free>
 1b6:	88 23       	and	r24, r24
 1b8:	21 f1       	breq	.+72     	; 0x202 <can_tx+0x88>
		CANSTMOB = 0;
 1ba:	ee ee       	ldi	r30, 0xEE	; 238
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 1c0:	88 81       	ld	r24, Y
 1c2:	99 81       	ldd	r25, Y+1	; 0x01
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 1d4:	88 81       	ld	r24, Y
 1d6:	82 95       	swap	r24
 1d8:	88 0f       	add	r24, r24
 1da:	80 7e       	andi	r24, 0xE0	; 224
 1dc:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 1e0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 1e4:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 1e8:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 1ec:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 1f0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 1f4:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 1f8:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 1fa:	88 e4       	ldi	r24, 0x48	; 72
 1fc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 200:	10 82       	st	Z, r1
	}
	
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <main>:
/*	Init Global Variables	*/
unsigned long sys_tick = 0;
unsigned long time_old = 0;
unsigned long time_10_ms =0;

int main(void){
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	2d 97       	sbiw	r28, 0x0d	; 13
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
	/*	Configuration	*/
	port_config();
 21c:	54 d0       	rcall	.+168    	; 0x2c6 <port_config>
	sys_timer_config();
 21e:	5d d0       	rcall	.+186    	; 0x2da <sys_timer_config>
 220:	80 e2       	ldi	r24, 0x20	; 32
								//CAN lib may be outdated, small differences between the old can lib but i already used it on FB to communicate between the old SWC during initial testing 
								//for message objects, the sensor only SENDS data!
	struct CAN_MOB can_SHB_mob;
	can_SHB_mob.mob_id = 0x420;
 222:	94 e0       	ldi	r25, 0x04	; 4
 224:	9a 83       	std	Y+2, r25	; 0x02
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	1c 82       	std	Y+4, r1	; 0x04
	can_SHB_mob.mob_idmask = 0; //send
 22a:	1b 82       	std	Y+3, r1	; 0x03
 22c:	1d 82       	std	Y+5, r1	; 0x05
	can_SHB_mob.mob_number = 0; //only 1 object here, do i need to adjust numbers across all software connected with CAN?
 22e:	78 94       	sei
	uint8_t SHB_databytes[8];
	
	sei();
 230:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sys_tick>
	
	while (1){
		if((sys_tick - time_old) >= 1){ //1 ms loop, hopefully makes implementing more than 2 frequencies easier => probably no need, different main for each SHx
 234:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <sys_tick+0x1>
 238:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <sys_tick+0x2>
 23c:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <sys_tick+0x3>
 240:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <time_old>
 244:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <time_old+0x1>
 248:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <time_old+0x2>
 24c:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <time_old+0x3>
 250:	84 17       	cp	r24, r20
 252:	95 07       	cpc	r25, r21
 254:	a6 07       	cpc	r26, r22
 256:	b7 07       	cpc	r27, r23
 258:	d9 f0       	breq	.+54     	; 0x290 <main+0x88>
 25a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time_old>
			time_old = sys_tick;   
 25e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <time_old+0x1>
 262:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <time_old+0x2>
 266:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <time_old+0x3>
 26a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_10_ms>
			time_10_ms++;  //10 ms reference
 26e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <time_10_ms+0x1>
 272:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <time_10_ms+0x2>
 276:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <time_10_ms+0x3>
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	a1 1d       	adc	r26, r1
 27e:	b1 1d       	adc	r27, r1
 280:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time_10_ms>
 284:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <time_10_ms+0x1>
 288:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <time_10_ms+0x2>
 28c:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <time_10_ms+0x3>
 290:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_10_ms>
			//time_x_ms++; 
			//time_x_ms++;
			//time_x_ms++;
			// ...
		}
		if (time_10_ms <= 10){
 294:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <time_10_ms+0x1>
 298:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <time_10_ms+0x2>
 29c:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <time_10_ms+0x3>
 2a0:	0b 97       	sbiw	r24, 0x0b	; 11
 2a2:	a1 05       	cpc	r26, r1
 2a4:	b1 05       	cpc	r27, r1
 2a6:	20 f6       	brcc	.-120    	; 0x230 <main+0x28>
 2a8:	1e 82       	std	Y+6, r1	; 0x06
			//spi_read(); for later
			SHB_databytes[0] = 0;/*get CLTF1 msb*/
 2aa:	1f 82       	std	Y+7, r1	; 0x07
			SHB_databytes[1] = 0;/*get CLTF1 lsb*/
 2ac:	18 86       	std	Y+8, r1	; 0x08
			SHB_databytes[2] = 0;/*get CLTF2 msb*/
 2ae:	19 86       	std	Y+9, r1	; 0x09
			SHB_databytes[3] = 0;/*get CLTF2 lsb*/
 2b0:	1a 86       	std	Y+10, r1	; 0x0a
			SHB_databytes[4] = 0;/*get CLTR1 msb*/
 2b2:	1b 86       	std	Y+11, r1	; 0x0b
			SHB_databytes[5] = 0;/*get CLTR1 lsb*/
 2b4:	1c 86       	std	Y+12, r1	; 0x0c
			SHB_databytes[6] = 0;/*get CLTR2 msb*/
 2b6:	1d 86       	std	Y+13, r1	; 0x0d
			SHB_databytes[7] = 0;/*get CLTR2 lsb*/
 2b8:	be 01       	movw	r22, r28
			
			can_tx(&can_SHB_mob, SHB_databytes);
 2ba:	6a 5f       	subi	r22, 0xFA	; 250
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	5b df       	rcall	.-330    	; 0x17a <can_tx>
 2c4:	b5 cf       	rjmp	.-150    	; 0x230 <main+0x28>

000002c6 <port_config>:
/*	FUNCTIONS	*/

void port_config(void)
{
	//Fault-LED, Heart-LED
	DDRC |= (1<<PC0) | (1<<PC2);
 2c6:	87 b1       	in	r24, 0x07	; 7
 2c8:	85 60       	ori	r24, 0x05	; 5
 2ca:	87 b9       	out	0x07, r24	; 7
	//CS-TYPK1, CS-TYPK2
	DDRE |= (1<<PE0) | (1<<PE1);
 2cc:	8d b1       	in	r24, 0x0d	; 13
 2ce:	83 60       	ori	r24, 0x03	; 3
 2d0:	8d b9       	out	0x0d, r24	; 13
	//CLTF1, CLTF2, CLTR1, CLTR2 (F --> Flow, R --> Return)
	DDRF &= ~(1<<PF0) & ~(1<<PF1) & ~(1<<PF2) & ~(1<<PF2);
 2d2:	80 b3       	in	r24, 0x10	; 16
 2d4:	88 7f       	andi	r24, 0xF8	; 248
 2d6:	80 bb       	out	0x10, r24	; 16
 2d8:	08 95       	ret

000002da <sys_timer_config>:
}

void sys_timer_config(void)
{
	//CTC-Mode, /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
 2da:	8b e0       	ldi	r24, 0x0B	; 11
 2dc:	84 bd       	out	0x24, r24	; 36
	//Compare value for 1ms (Formula in Datasheet)
	OCR0A = 249;
 2de:	89 ef       	ldi	r24, 0xF9	; 249
 2e0:	87 bd       	out	0x27, r24	; 39
	//Compare Interrupt Enable
	TIMSK0 = 0 | (1<<OCIE0A);
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 2e8:	08 95       	ret

000002ea <__vector_16>:
}

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
	sys_tick++;
 2fc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sys_tick>
 300:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <sys_tick+0x1>
 304:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <sys_tick+0x2>
 308:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <sys_tick+0x3>
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	a1 1d       	adc	r26, r1
 310:	b1 1d       	adc	r27, r1
 312:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sys_tick>
 316:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <sys_tick+0x1>
 31a:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <sys_tick+0x2>
 31e:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <sys_tick+0x3>
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
