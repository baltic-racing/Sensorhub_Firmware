
SHB_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000580  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000580  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000002a  00000000  00000000  000005db  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000605  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000194e  00000000  00000000  000006c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cbd  00000000  00000000  00002013  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074c  00000000  00000000  00002cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  0000341c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dc  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a3  00000000  00000000  000039a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000004de  000004de  00000572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.can_check_free 0000003a  00000436  00000436  000004ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.can_cfg 0000007e  0000036e  0000036e  00000402  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.can_tx  0000008c  0000025e  0000025e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.adc_config 00000016  00000470  00000470  00000504  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.adc_start_conversion 0000000c  000004d2  000004d2  00000566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_25 00000084  000002ea  000002ea  0000037e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.adc_get 00000012  000004b0  000004b0  00000544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.adc_next 00000001  00800118  00800118  00000580  2**0
                  ALLOC
 23 .text.main    0000016c  000000f2  000000f2  00000186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.time_100_ms 00000004  00800108  00800108  00000580  2**0
                  ALLOC
 25 .bss.time_10_ms 00000004  0080010c  0080010c  00000580  2**0
                  ALLOC
 26 .bss.time_old 00000004  00800110  00800110  00000580  2**0
                  ALLOC
 27 .bss.sys_tick 00000004  00800114  00800114  00000580  2**0
                  ALLOC
 28 .text.port_config 00000014  0000049c  0000049c  00000530  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.sys_timer_config 00000010  000004c2  000004c2  00000556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_16 0000004a  000003ec  000003ec  00000480  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_fini 00000002  000004e6  000004e6  0000057a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_funcs_on_exit 00000002  000004e8  000004e8  0000057c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_simulator_exit 00000002  000004ea  000004ea  0000057e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.exit    00000016  00000486  00000486  0000051a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text._Exit   00000004  000004e2  000004e2  00000576  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
   4:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
   8:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
   c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  10:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  14:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  18:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  1c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  20:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  24:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  28:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  2c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  30:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  34:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  38:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  3c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  40:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_16>
  44:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  48:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  4c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  50:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  54:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  58:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  5c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  60:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  64:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_25>
  68:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  6c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  70:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  74:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  78:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  7c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  80:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  84:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  88:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  8c:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>
  90:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__bad_interrupt>

00000094 <.dinit>:
  94:	01 00       	.word	0x0001	; ????
  96:	01 19       	sub	r16, r1
  98:	80 00       	.word	0x0080	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e1       	ldi	r29, 0x10	; 16
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	e4 e9       	ldi	r30, 0x94	; 148
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	19 c0       	rjmp	.+50     	; 0xe0 <__do_clear_bss+0x8>
  ae:	b7 91       	elpm	r27, Z+
  b0:	a7 91       	elpm	r26, Z+
  b2:	37 91       	elpm	r19, Z+
  b4:	27 91       	elpm	r18, Z+
  b6:	07 91       	elpm	r16, Z+
  b8:	07 fd       	sbrc	r16, 7
  ba:	0e c0       	rjmp	.+28     	; 0xd8 <__do_clear_bss>
  bc:	97 91       	elpm	r25, Z+
  be:	87 91       	elpm	r24, Z+
  c0:	ef 01       	movw	r28, r30
  c2:	f9 2f       	mov	r31, r25
  c4:	e8 2f       	mov	r30, r24
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a2 17       	cp	r26, r18
  ce:	b3 07       	cpc	r27, r19
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x22>
  d2:	fe 01       	movw	r30, r28
  d4:	1b be       	out	0x3b, r1	; 59
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <__do_clear_bss+0x8>

000000d8 <__do_clear_bss>:
  d8:	1d 92       	st	X+, r1
  da:	a2 17       	cp	r26, r18
  dc:	b3 07       	cpc	r27, r19
  de:	e1 f7       	brne	.-8      	; 0xd8 <__do_clear_bss>
  e0:	e9 39       	cpi	r30, 0x99	; 153
  e2:	f4 07       	cpc	r31, r20
  e4:	21 f7       	brne	.-56     	; 0xae <__do_copy_data+0x8>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <_etext>
  ea:	0c 94 43 02 	jmp	0x486	; 0x486 <exit>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>

Disassembly of section .text:

000004de <__bad_interrupt>:
 4de:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.can_check_free:

00000436 <can_check_free>:

uint8_t can_check_free(uint8_t mobnum){
	
	uint8_t mob_status = 0;
	
	if(mobnum >= 7){
 436:	87 30       	cpi	r24, 0x07	; 7
 438:	78 f0       	brcs	.+30     	; 0x458 <can_check_free+0x22>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
 43a:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	08 97       	sbiw	r24, 0x08	; 8
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <can_check_free+0x14>
 446:	35 95       	asr	r19
 448:	27 95       	ror	r18
 44a:	8a 95       	dec	r24
 44c:	e2 f7       	brpl	.-8      	; 0x446 <can_check_free+0x10>
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	20 ff       	sbrs	r18, 0
 452:	0d c0       	rjmp	.+26     	; 0x46e <can_check_free+0x38>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 95       	ret


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
 458:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <can_check_free+0x2e>
 460:	35 95       	asr	r19
 462:	27 95       	ror	r18
 464:	8a 95       	dec	r24
 466:	e2 f7       	brpl	.-8      	; 0x460 <can_check_free+0x2a>
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	20 fd       	sbrc	r18, 0
 46c:	80 e0       	ldi	r24, 0x00	; 0
	}

	return mob_status;
	
}
 46e:	08 95       	ret

Disassembly of section .text.can_cfg:

0000036e <can_cfg>:
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
 36e:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	29 c0       	rjmp	.+82     	; 0x3c8 <can_cfg+0x5a>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
 376:	80 e1       	ldi	r24, 0x10	; 16
 378:	48 9f       	mul	r20, r24
 37a:	90 01       	movw	r18, r0
 37c:	11 24       	eor	r1, r1
 37e:	82 2f       	mov	r24, r18
 380:	88 60       	ori	r24, 0x08	; 8
 382:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANSTMOB = 0;
 386:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0;
 38a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANIDT4 = 0;
 38e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDT3 = 0;
 392:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT2 = 0;
 396:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = 0;
 39a:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDM4 = 0;
 39e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANIDM3 = 0;
 3a2:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM2 = 0;
 3a6:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM1 = 0;
 3aa:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		for (uint8_t byte = 0; byte < 8; byte++){
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <can_cfg+0x54>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
 3b2:	98 2f       	mov	r25, r24
 3b4:	92 2b       	or	r25, r18
 3b6:	98 60       	ori	r25, 0x08	; 8
 3b8:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			CANMSG = 0;
 3bc:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	88 30       	cpi	r24, 0x08	; 8
 3c4:	b0 f3       	brcs	.-20     	; 0x3b2 <can_cfg+0x44>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
 3c6:	4f 5f       	subi	r20, 0xFF	; 255
 3c8:	4f 30       	cpi	r20, 0x0F	; 15
 3ca:	a8 f2       	brcs	.-86     	; 0x376 <can_cfg+0x8>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;
 3cc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;
 3d0:	8c e0       	ldi	r24, 0x0C	; 12
 3d2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x36;
 3d6:	86 e3       	ldi	r24, 0x36	; 54
 3d8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	CANGIE = 0;
 3dc:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANGCON |= (1<<ENASTB); // Enable CAN
 3e0:	e8 ed       	ldi	r30, 0xD8	; 216
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	82 60       	ori	r24, 0x02	; 2
 3e8:	80 83       	st	Z, r24
 3ea:	08 95       	ret

Disassembly of section .text.can_tx:

0000025e <can_tx>:
		data[byte] = CANMSG;
	}
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
	
	for(uint8_t byte = 0; byte <8; byte++){
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e c0       	rjmp	.+28     	; 0x284 <can_tx+0x26>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 268:	8c 81       	ldd	r24, Y+4	; 0x04
 26a:	82 95       	swap	r24
 26c:	80 7f       	andi	r24, 0xF0	; 240
 26e:	89 2b       	or	r24, r25
 270:	88 60       	ori	r24, 0x08	; 8
 272:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANMSG = data[byte];
 276:	fb 01       	movw	r30, r22
 278:	e9 0f       	add	r30, r25
 27a:	f1 1d       	adc	r31, r1
 27c:	80 81       	ld	r24, Z
 27e:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 282:	9f 5f       	subi	r25, 0xFF	; 255
 284:	98 30       	cpi	r25, 0x08	; 8
 286:	80 f3       	brcs	.-32     	; 0x268 <can_tx+0xa>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 288:	8c 81       	ldd	r24, Y+4	; 0x04
 28a:	82 95       	swap	r24
 28c:	80 7f       	andi	r24, 0xF0	; 240
 28e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 292:	8c 81       	ldd	r24, Y+4	; 0x04
 294:	0e 94 1b 02 	call	0x436	; 0x436 <can_check_free>
 298:	88 23       	and	r24, r24
 29a:	21 f1       	breq	.+72     	; 0x2e4 <can_tx+0x86>
		CANSTMOB = 0;
 29c:	ee ee       	ldi	r30, 0xEE	; 238
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 2a2:	88 81       	ld	r24, Y
 2a4:	99 81       	ldd	r25, Y+1	; 0x01
 2a6:	96 95       	lsr	r25
 2a8:	87 95       	ror	r24
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 2b6:	88 81       	ld	r24, Y
 2b8:	82 95       	swap	r24
 2ba:	88 0f       	add	r24, r24
 2bc:	80 7e       	andi	r24, 0xE0	; 224
 2be:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 2c2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 2c6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 2ca:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 2ce:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 2d2:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 2d6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 2da:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 2dc:	88 e4       	ldi	r24, 0x48	; 72
 2de:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 2e2:	10 82       	st	Z, r1
	}
	
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

Disassembly of section .text.adc_config:

00000470 <adc_config>:


void adc_config()
{
	//AREF = AVCC
	ADMUX = (1<<REFS0);
 470:	80 e4       	ldi	r24, 0x40	; 64
 472:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//ADC Enable, /16, Interrupt Enable
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
 476:	ea e7       	ldi	r30, 0x7A	; 122
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	8c e8       	ldi	r24, 0x8C	; 140
 47c:	80 83       	st	Z, r24
	//Start Conversion
	ADCSRA |= (1<<ADSC);
 47e:	80 81       	ld	r24, Z
 480:	80 64       	ori	r24, 0x40	; 64
 482:	80 83       	st	Z, r24
 484:	08 95       	ret

Disassembly of section .text.adc_start_conversion:

000004d2 <adc_start_conversion>:
}

void adc_start_conversion()
{
	//Start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC) | (1<<ADPS2) | (1<<ADPS0) | (1<<ADPS1);
 4d2:	8f ec       	ldi	r24, 0xCF	; 207
 4d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//noise reduction mode 
	SMCR = (1<<SM0) | (0<<SM1) | (1<<SM2);
 4d8:	8a e0       	ldi	r24, 0x0A	; 10
 4da:	83 bf       	out	0x33, r24	; 51
 4dc:	08 95       	ret

Disassembly of section .text.__vector_25:

000002ea <__vector_25>:
}

ISR(ADC_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	0b b6       	in	r0, 0x3b	; 59
 2f6:	0f 92       	push	r0
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
 310:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_next>
 314:	e8 2f       	mov	r30, r24
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 31c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 320:	ee 0f       	add	r30, r30
 322:	ff 1f       	adc	r31, r31
 324:	e0 50       	subi	r30, 0x00	; 0
 326:	ff 4f       	sbci	r31, 0xFF	; 255
 328:	31 83       	std	Z+1, r19	; 0x01
 32a:	20 83       	st	Z, r18
	adc_next++;
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <adc_next>
	if(adc_next == ADCVALUES)
 332:	84 30       	cpi	r24, 0x04	; 4
 334:	11 f4       	brne	.+4      	; 0x33a <__vector_25+0x50>
	{
		adc_next = 0;
 336:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <adc_next>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 33a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <adc_next>
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	adc_start_conversion();
 344:	0e 94 69 02 	call	0x4d2	; 0x4d2 <adc_start_conversion>
	
}
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

Disassembly of section .text.adc_get:

000004b0 <adc_get>:

// getter for each adc var
uint16_t adc_get(uint8_t adc)
{
	return adc_values[adc];
 4b0:	e8 2f       	mov	r30, r24
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	ee 0f       	add	r30, r30
 4b6:	ff 1f       	adc	r31, r31
 4b8:	e0 50       	subi	r30, 0x00	; 0
 4ba:	ff 4f       	sbci	r31, 0xFF	; 255
}
 4bc:	80 81       	ld	r24, Z
 4be:	91 81       	ldd	r25, Z+1	; 0x01
 4c0:	08 95       	ret

Disassembly of section .text.main:

000000f2 <main>:
unsigned long sys_tick = 0;
unsigned long time_old = 0;
unsigned long time_10_ms =0;
unsigned long time_100_ms =0;

int main(void){
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	2e 97       	sbiw	r28, 0x0e	; 14
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	de bf       	out	0x3e, r29	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	cd bf       	out	0x3d, r28	; 61
	/*	Configuration	*/
	port_config();
 106:	0e 94 4e 02 	call	0x49c	; 0x49c <port_config>
	sys_timer_config();
 10a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <sys_timer_config>
	can_cfg();
 10e:	0e 94 b7 01 	call	0x36e	; 0x36e <can_cfg>
	adc_config();
 112:	0e 94 38 02 	call	0x470	; 0x470 <adc_config>
	
	struct CAN_MOB can_SHB0_mob;
	can_SHB0_mob.mob_id = 0x420;
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	94 e0       	ldi	r25, 0x04	; 4
 11a:	9a 83       	std	Y+2, r25	; 0x02
 11c:	89 83       	std	Y+1, r24	; 0x01
	can_SHB0_mob.mob_idmask = 0; //receive with no filter?
 11e:	1c 82       	std	Y+4, r1	; 0x04
 120:	1b 82       	std	Y+3, r1	; 0x03
	can_SHB0_mob.mob_number = 0;
 122:	1e 82       	std	Y+6, r1	; 0x06
 124:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t SHB0_databytes[8];
	
	sei();
 126:	78 94       	sei
	
	while (1){
		if((sys_tick - time_old) >= 1){
 128:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sys_tick>
 12c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sys_tick+0x1>
 130:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <sys_tick+0x2>
 134:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <sys_tick+0x3>
 138:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <time_old>
 13c:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <time_old+0x1>
 140:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <time_old+0x2>
 144:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <time_old+0x3>
 148:	84 17       	cp	r24, r20
 14a:	95 07       	cpc	r25, r21
 14c:	a6 07       	cpc	r26, r22
 14e:	b7 07       	cpc	r27, r23
 150:	81 f1       	breq	.+96     	; 0x1b2 <main+0xc0>
			time_old = sys_tick;
 152:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <time_old>
 156:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <time_old+0x1>
 15a:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <time_old+0x2>
 15e:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <time_old+0x3>
			adc_start_conversion();
 162:	0e 94 69 02 	call	0x4d2	; 0x4d2 <adc_start_conversion>
			time_10_ms++;  //10 ms reference
 166:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <time_10_ms>
 16a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <time_10_ms+0x1>
 16e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <time_10_ms+0x2>
 172:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <time_10_ms+0x3>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	a1 1d       	adc	r26, r1
 17a:	b1 1d       	adc	r27, r1
 17c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <time_10_ms>
 180:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <time_10_ms+0x1>
 184:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <time_10_ms+0x2>
 188:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <time_10_ms+0x3>
			time_100_ms++; //100ms refence
 18c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_end>
 190:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_end+0x1>
 194:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_end+0x2>
 198:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_end+0x3>
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	a1 1d       	adc	r26, r1
 1a0:	b1 1d       	adc	r27, r1
 1a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_end>
 1a6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_end+0x1>
 1aa:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_end+0x2>
 1ae:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_end+0x3>
			
		}
		if (time_10_ms >= 10){
 1b2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <time_10_ms>
 1b6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <time_10_ms+0x1>
 1ba:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <time_10_ms+0x2>
 1be:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <time_10_ms+0x3>
 1c2:	0a 97       	sbiw	r24, 0x0a	; 10
 1c4:	a1 05       	cpc	r26, r1
 1c6:	b1 05       	cpc	r27, r1
 1c8:	78 f1       	brcs	.+94     	; 0x228 <main+0x136>
			
			SHB0_databytes[0] = adc_get(1)		; //lsb
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_get>
 1d0:	8f 83       	std	Y+7, r24	; 0x07
			SHB0_databytes[1] = (adc_get(1)>>8)	; //msb
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_get>
 1d8:	98 87       	std	Y+8, r25	; 0x08
			SHB0_databytes[2] = adc_get(2)		; //lsb
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_get>
 1e0:	89 87       	std	Y+9, r24	; 0x09
			SHB0_databytes[3] = (adc_get(2)>>8)	; //msb
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_get>
 1e8:	9a 87       	std	Y+10, r25	; 0x0a
			SHB0_databytes[4] = adc_get(2)		; //lsb
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_get>
 1f0:	8b 87       	std	Y+11, r24	; 0x0b
			SHB0_databytes[5] = (adc_get(2)>>8)	; //msb
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_get>
 1f8:	9c 87       	std	Y+12, r25	; 0x0c
			SHB0_databytes[6] = adc_get(3)		; //lsb
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_get>
 200:	8d 87       	std	Y+13, r24	; 0x0d
			SHB0_databytes[7] = (adc_get(3)>>8)	; //msb
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adc_get>
 208:	9e 87       	std	Y+14, r25	; 0x0e
			
			can_tx(&can_SHB0_mob, SHB0_databytes);
 20a:	be 01       	movw	r22, r28
 20c:	69 5f       	subi	r22, 0xF9	; 249
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	0e 94 2f 01 	call	0x25e	; 0x25e <can_tx>
			time_10_ms = 0;
 218:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <time_10_ms>
 21c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <time_10_ms+0x1>
 220:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <time_10_ms+0x2>
 224:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <time_10_ms+0x3>
		}
	 if(time_100_ms >= 100){
 228:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_end>
 22c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_end+0x1>
 230:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_end+0x2>
 234:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_end+0x3>
 238:	84 36       	cpi	r24, 0x64	; 100
 23a:	91 05       	cpc	r25, r1
 23c:	a1 05       	cpc	r26, r1
 23e:	b1 05       	cpc	r27, r1
 240:	08 f4       	brcc	.+2      	; 0x244 <main+0x152>
 242:	72 cf       	rjmp	.-284    	; 0x128 <main+0x36>
		 PORTC ^= (1<<PC2); // heart LED
 244:	98 b1       	in	r25, 0x08	; 8
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	89 27       	eor	r24, r25
 24a:	88 b9       	out	0x08, r24	; 8
		 time_100_ms=0;
 24c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_end>
 250:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_end+0x1>
 254:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_end+0x2>
 258:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_end+0x3>
 25c:	65 cf       	rjmp	.-310    	; 0x128 <main+0x36>

Disassembly of section .text.port_config:

0000049c <port_config>:
/*	FUNCTIONS	*/

void port_config(void)
{
	//Fault-LED, Heart-LED
	DDRC |= (1<<PC0) | (1<<PC2);
 49c:	87 b1       	in	r24, 0x07	; 7
 49e:	85 60       	ori	r24, 0x05	; 5
 4a0:	87 b9       	out	0x07, r24	; 7
	//CS-TYPK1, CS-TYPK2
	DDRE |= (1<<PE0) | (1<<PE1);
 4a2:	8d b1       	in	r24, 0x0d	; 13
 4a4:	83 60       	ori	r24, 0x03	; 3
 4a6:	8d b9       	out	0x0d, r24	; 13
	//CLTF1, CLTF2, CLTR1, CLTR2 (F --> Flow, R --> Return)
	DDRF &= ~(1<<PF0) & ~(1<<PF1) & ~(1<<PF2) & ~(1<<PF3);
 4a8:	80 b3       	in	r24, 0x10	; 16
 4aa:	80 7f       	andi	r24, 0xF0	; 240
 4ac:	80 bb       	out	0x10, r24	; 16
 4ae:	08 95       	ret

Disassembly of section .text.sys_timer_config:

000004c2 <sys_timer_config>:
}

void sys_timer_config(void)
{
	//CTC-Mode, /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
 4c2:	8b e0       	ldi	r24, 0x0B	; 11
 4c4:	84 bd       	out	0x24, r24	; 36
	//Compare value for 1ms (Formula in Datasheet)
	OCR0A = 249;
 4c6:	89 ef       	ldi	r24, 0xF9	; 249
 4c8:	87 bd       	out	0x27, r24	; 39
	//Compare Interrupt Enable
	TIMSK0 = 0 | (1<<OCIE0A);
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 4d0:	08 95       	ret

Disassembly of section .text.__vector_16:

000003ec <__vector_16>:
}

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	af 93       	push	r26
 3fc:	bf 93       	push	r27
	sys_tick++;
 3fe:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sys_tick>
 402:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sys_tick+0x1>
 406:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <sys_tick+0x2>
 40a:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <sys_tick+0x3>
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	a1 1d       	adc	r26, r1
 412:	b1 1d       	adc	r27, r1
 414:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <sys_tick>
 418:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <sys_tick+0x1>
 41c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <sys_tick+0x2>
 420:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <sys_tick+0x3>
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	0f 90       	pop	r0
 42e:	0f be       	out	0x3f, r0	; 63
 430:	0f 90       	pop	r0
 432:	1f 90       	pop	r1
 434:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000004e6 <_fini>:
 4e6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004e8 <__funcs_on_exit>:
 4e8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004ea <__simulator_exit>:
 4ea:	08 95       	ret

Disassembly of section .text.exit:

00000486 <exit>:
 486:	ec 01       	movw	r28, r24
 488:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__funcs_on_exit>
 48c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_fini>
 490:	ce 01       	movw	r24, r28
 492:	0e 94 75 02 	call	0x4ea	; 0x4ea <__simulator_exit>
 496:	ce 01       	movw	r24, r28
 498:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_Exit>

Disassembly of section .text._Exit:

000004e2 <_Exit>:
 4e2:	0e 94 77 00 	call	0xee	; 0xee <_exit>
