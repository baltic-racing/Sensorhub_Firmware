
SHL_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00000d54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013aa  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d62  00000000  00000000  0000225e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1d  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  000039e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000744  00000000  00000000  00003c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e8  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	98 c0       	rjmp	.+304    	; 0x136 <__bad_interrupt>
   6:	00 00       	nop
   8:	96 c0       	rjmp	.+300    	; 0x136 <__bad_interrupt>
   a:	00 00       	nop
   c:	94 c0       	rjmp	.+296    	; 0x136 <__bad_interrupt>
   e:	00 00       	nop
  10:	92 c0       	rjmp	.+292    	; 0x136 <__bad_interrupt>
  12:	00 00       	nop
  14:	90 c0       	rjmp	.+288    	; 0x136 <__bad_interrupt>
  16:	00 00       	nop
  18:	8e c0       	rjmp	.+284    	; 0x136 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8c c0       	rjmp	.+280    	; 0x136 <__bad_interrupt>
  1e:	00 00       	nop
  20:	8a c0       	rjmp	.+276    	; 0x136 <__bad_interrupt>
  22:	00 00       	nop
  24:	88 c0       	rjmp	.+272    	; 0x136 <__bad_interrupt>
  26:	00 00       	nop
  28:	86 c0       	rjmp	.+268    	; 0x136 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	84 c0       	rjmp	.+264    	; 0x136 <__bad_interrupt>
  2e:	00 00       	nop
  30:	82 c0       	rjmp	.+260    	; 0x136 <__bad_interrupt>
  32:	00 00       	nop
  34:	80 c0       	rjmp	.+256    	; 0x136 <__bad_interrupt>
  36:	00 00       	nop
  38:	7e c0       	rjmp	.+252    	; 0x136 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7c c0       	rjmp	.+248    	; 0x136 <__bad_interrupt>
  3e:	00 00       	nop
  40:	d9 c2       	rjmp	.+1458   	; 0x5f4 <__vector_16>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__bad_interrupt>
  46:	00 00       	nop
  48:	76 c0       	rjmp	.+236    	; 0x136 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	74 c0       	rjmp	.+232    	; 0x136 <__bad_interrupt>
  4e:	00 00       	nop
  50:	72 c0       	rjmp	.+228    	; 0x136 <__bad_interrupt>
  52:	00 00       	nop
  54:	70 c0       	rjmp	.+224    	; 0x136 <__bad_interrupt>
  56:	00 00       	nop
  58:	6e c0       	rjmp	.+220    	; 0x136 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6c c0       	rjmp	.+216    	; 0x136 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6a c0       	rjmp	.+212    	; 0x136 <__bad_interrupt>
  62:	00 00       	nop
  64:	7f c0       	rjmp	.+254    	; 0x164 <__vector_25>
  66:	00 00       	nop
  68:	66 c0       	rjmp	.+204    	; 0x136 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	64 c0       	rjmp	.+200    	; 0x136 <__bad_interrupt>
  6e:	00 00       	nop
  70:	62 c0       	rjmp	.+196    	; 0x136 <__bad_interrupt>
  72:	00 00       	nop
  74:	60 c0       	rjmp	.+192    	; 0x136 <__bad_interrupt>
  76:	00 00       	nop
  78:	5e c0       	rjmp	.+188    	; 0x136 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5c c0       	rjmp	.+184    	; 0x136 <__bad_interrupt>
  7e:	00 00       	nop
  80:	5a c0       	rjmp	.+180    	; 0x136 <__bad_interrupt>
  82:	00 00       	nop
  84:	58 c0       	rjmp	.+176    	; 0x136 <__bad_interrupt>
  86:	00 00       	nop
  88:	56 c0       	rjmp	.+172    	; 0x136 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	54 c0       	rjmp	.+168    	; 0x136 <__bad_interrupt>
  8e:	00 00       	nop
  90:	52 c0       	rjmp	.+164    	; 0x136 <__bad_interrupt>
  92:	00 00       	nop
  94:	07 63       	ori	r16, 0x37	; 55
  96:	42 36       	cpi	r20, 0x62	; 98
  98:	b7 9b       	sbis	0x16, 7	; 22
  9a:	d8 a7       	std	Y+40, r29	; 0x28
  9c:	1a 39       	cpi	r17, 0x9A	; 154
  9e:	68 56       	subi	r22, 0x68	; 104
  a0:	18 ae       	std	Y+56, r1	; 0x38
  a2:	ba ab       	std	Y+50, r27	; 0x32
  a4:	55 8c       	ldd	r5, Z+29	; 0x1d
  a6:	1d 3c       	cpi	r17, 0xCD	; 205
  a8:	b7 cc       	rjmp	.-1682   	; 0xfffffa18 <__eeprom_end+0xff7efa18>
  aa:	57 63       	ori	r21, 0x37	; 55
  ac:	bd 6d       	ori	r27, 0xDD	; 221
  ae:	ed fd       	.word	0xfded	; ????
  b0:	75 3e       	cpi	r23, 0xE5	; 229
  b2:	f6 17       	cp	r31, r22
  b4:	72 31       	cpi	r23, 0x12	; 18
  b6:	bf 00       	.word	0x00bf	; ????
  b8:	00 00       	nop
  ba:	80 3f       	cpi	r24, 0xF0	; 240
  bc:	08 00       	.word	0x0008	; ????
  be:	00 00       	nop
  c0:	be 92       	st	-X, r11
  c2:	24 49       	sbci	r18, 0x94	; 148
  c4:	12 3e       	cpi	r17, 0xE2	; 226
  c6:	ab aa       	std	Y+51, r10	; 0x33
  c8:	aa 2a       	or	r10, r26
  ca:	be cd       	rjmp	.-1156   	; 0xfffffc48 <__eeprom_end+0xff7efc48>
  cc:	cc cc       	rjmp	.-1640   	; 0xfffffa66 <__eeprom_end+0xff7efa66>
  ce:	4c 3e       	cpi	r20, 0xEC	; 236
  d0:	00 00       	nop
  d2:	00 80       	ld	r0, Z
  d4:	be ab       	std	Y+54, r27	; 0x36
  d6:	aa aa       	std	Y+50, r10	; 0x32
  d8:	aa 3e       	cpi	r26, 0xEA	; 234
  da:	00 00       	nop
  dc:	00 00       	nop
  de:	bf 00       	.word	0x00bf	; ????
  e0:	00 00       	nop
  e2:	80 3f       	cpi	r24, 0xF0	; 240
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	00 08       	sbc	r0, r0
  ea:	41 78       	andi	r20, 0x81	; 129
  ec:	d3 bb       	out	0x13, r29	; 19
  ee:	43 87       	std	Z+11, r20	; 0x0b
  f0:	d1 13       	cpse	r29, r17
  f2:	3d 19       	sub	r19, r13
  f4:	0e 3c       	cpi	r16, 0xCE	; 206
  f6:	c3 bd       	out	0x23, r28	; 35
  f8:	42 82       	std	Z+2, r4	; 0x02
  fa:	ad 2b       	or	r26, r29
  fc:	3e 68       	ori	r19, 0x8E	; 142
  fe:	ec 82       	std	Y+4, r14	; 0x04
 100:	76 be       	out	0x36, r7	; 54
 102:	d9 8f       	std	Y+25, r29	; 0x19
 104:	e1 a9       	ldd	r30, Z+49	; 0x31
 106:	3e 4c       	sbci	r19, 0xCE	; 206
 108:	80 ef       	ldi	r24, 0xF0	; 240
 10a:	ff be       	out	0x3f, r15	; 63
 10c:	01 c4       	rjmp	.+2050   	; 0x910 <__mulsf3_pse+0x72>
 10e:	ff 7f       	andi	r31, 0xFF	; 255
 110:	3f 00       	.word	0x003f	; ????
 112:	00 00       	nop
	...

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e1       	ldi	r29, 0x10	; 16
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_clear_bss>:
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
 12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
 12c:	a8 31       	cpi	r26, 0x18	; 24
 12e:	b2 07       	cpc	r27, r18
 130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
 132:	fc d0       	rcall	.+504    	; 0x32c <main>
 134:	d3 c5       	rjmp	.+2982   	; 0xcdc <_exit>

00000136 <__bad_interrupt>:
 136:	64 cf       	rjmp	.-312    	; 0x0 <__vectors>

00000138 <adc_config>:
// index var to know which adc will come next
uint8_t adc_next = 0;

void adc_config()
{
	ADMUX = (1<<REFS0) | (1<<MUX0); // AREF = AVcc and PF0 (ADC0) as input defined
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE); // ADEN enables ADC, ADPS0,1,2 for ADC prescaler 16, ADIE enables ADC interrupt // see datasheet page 290
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	8c e8       	ldi	r24, 0x8C	; 140
 144:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //start first conversation
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
	DIDR0 |= 1; //Disabling the Digital Input Buffer on this Port because we only use the ADC Port for Programming and ADC
 14c:	ee e7       	ldi	r30, 0x7E	; 126
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <adc_start_conversion>:
}

void adc_start_conversion()
{
	///start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0) | (1<<ADIE) | (1<<ADSC); //prescaler to 16
 158:	8d ec       	ldi	r24, 0xCD	; 205
 15a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//!!! Currently we have to Start the conversion manually with ADSC=1. Normally SMCR should auto trigger the conversion but as of now it does not work. neither do we know if the uC goes into Noise reduction mode
	SMCR = (1<<SM0)|(0<<SM1)|(0<<SM2); //enable ADC noise reduction mode and starts the conversion
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	83 bf       	out	0x33, r24	; 51
 162:	08 95       	ret

00000164 <__vector_25>:
}

ISR(ADC_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	0b b6       	in	r0, 0x3b	; 59
 170:	0f 92       	push	r0
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	8f 93       	push	r24
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	e8 2f       	mov	r30, r24
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 188:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e4 5f       	subi	r30, 0xF4	; 244
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	31 83       	std	Z+1, r19	; 0x01
 196:	20 83       	st	Z, r18
	adc_next++;
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(adc_next == ADCVALUES)
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <__vector_25+0x42>
	{
		adc_next = 0;
 1a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	8f 91       	pop	r24
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0b be       	out	0x3b, r0	; 59
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <adc_get_1>:

// getter for each adc var

uint16_t adc_get_1(){
	return adc_values[0];
}
 1c8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <adc_values>
 1cc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <adc_values+0x1>
 1d0:	08 95       	ret

000001d2 <adc_get_2>:
uint16_t adc_get_2(){
	return adc_values[1];
}
 1d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_values+0x2>
 1d6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_values+0x3>
 1da:	08 95       	ret

000001dc <adc_get_3>:
uint16_t adc_get_3(){
	return adc_values[2];
 1dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <adc_values+0x4>
 1e0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <adc_values+0x5>
 1e4:	08 95       	ret

000001e6 <can_check_free>:
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
 1e6:	88 30       	cpi	r24, 0x08	; 8
 1e8:	78 f0       	brcs	.+30     	; 0x208 <can_check_free+0x22>
 1ea:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	08 97       	sbiw	r24, 0x08	; 8
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <can_check_free+0x14>
 1f6:	35 95       	asr	r19
 1f8:	27 95       	ror	r18
 1fa:	8a 95       	dec	r24
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <can_check_free+0x10>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	20 ff       	sbrs	r18, 0
 202:	0d c0       	rjmp	.+26     	; 0x21e <can_check_free+0x38>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret
 208:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <can_check_free+0x2e>
 210:	35 95       	asr	r19
 212:	27 95       	ror	r18
 214:	8a 95       	dec	r24
 216:	e2 f7       	brpl	.-8      	; 0x210 <can_check_free+0x2a>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	20 fd       	sbrc	r18, 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret

00000220 <can_cfg>:
 220:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	29 c0       	rjmp	.+82     	; 0x27a <can_cfg+0x5a>
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	48 9f       	mul	r20, r24
 22c:	90 01       	movw	r18, r0
 22e:	11 24       	eor	r1, r1
 230:	82 2f       	mov	r24, r18
 232:	88 60       	ori	r24, 0x08	; 8
 234:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 238:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 23c:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 240:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 244:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 248:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 24c:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 250:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 254:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 258:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 25c:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 c0       	rjmp	.+16     	; 0x274 <can_cfg+0x54>
 264:	98 2f       	mov	r25, r24
 266:	92 2b       	or	r25, r18
 268:	98 60       	ori	r25, 0x08	; 8
 26a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 26e:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	88 30       	cpi	r24, 0x08	; 8
 276:	b0 f3       	brcs	.-20     	; 0x264 <can_cfg+0x44>
 278:	4f 5f       	subi	r20, 0xFF	; 255
 27a:	4f 30       	cpi	r20, 0x0F	; 15
 27c:	a8 f2       	brcs	.-86     	; 0x228 <can_cfg+0x8>
 27e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 288:	86 e3       	ldi	r24, 0x36	; 54
 28a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 28e:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 292:	e8 ed       	ldi	r30, 0xD8	; 216
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	80 83       	st	Z, r24
 29c:	08 95       	ret

0000029e <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
	
	for(uint8_t byte = 0; byte <8; byte++){
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <can_tx+0x2a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 2a8:	8c 81       	ldd	r24, Y+4	; 0x04
 2aa:	30 e1       	ldi	r19, 0x10	; 16
 2ac:	83 9f       	mul	r24, r19
 2ae:	c0 01       	movw	r24, r0
 2b0:	11 24       	eor	r1, r1
 2b2:	82 2b       	or	r24, r18
 2b4:	88 60       	ori	r24, 0x08	; 8
 2b6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANMSG = data[byte];
 2ba:	fb 01       	movw	r30, r22
 2bc:	e2 0f       	add	r30, r18
 2be:	f1 1d       	adc	r31, r1
 2c0:	80 81       	ld	r24, Z
 2c2:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	28 30       	cpi	r18, 0x08	; 8
 2ca:	70 f3       	brcs	.-36     	; 0x2a8 <can_tx+0xa>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 2cc:	8c 81       	ldd	r24, Y+4	; 0x04
 2ce:	82 95       	swap	r24
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 2d6:	8c 81       	ldd	r24, Y+4	; 0x04
 2d8:	86 df       	rcall	.-244    	; 0x1e6 <can_check_free>
 2da:	88 23       	and	r24, r24
 2dc:	21 f1       	breq	.+72     	; 0x326 <can_tx+0x88>
		CANSTMOB = 0;
 2de:	ee ee       	ldi	r30, 0xEE	; 238
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 2e4:	88 81       	ld	r24, Y
 2e6:	99 81       	ldd	r25, Y+1	; 0x01
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	96 95       	lsr	r25
 2ee:	87 95       	ror	r24
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 2f8:	88 81       	ld	r24, Y
 2fa:	82 95       	swap	r24
 2fc:	88 0f       	add	r24, r24
 2fe:	80 7e       	andi	r24, 0xE0	; 224
 300:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 304:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 308:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 30c:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 310:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 314:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 318:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 31c:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 31e:	88 e4       	ldi	r24, 0x48	; 72
 320:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 324:	10 82       	st	Z, r1
	}
	
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <main>:
uint16_t adc_data_1;
uint16_t adc_data_2;
uint16_t adc_data_3;
extern uint16_t pressure;

int main(void){
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	2d 97       	sbiw	r28, 0x0d	; 13
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
	/*	Configuration	*/
	port_config();
 340:	47 d1       	rcall	.+654    	; 0x5d0 <port_config>
	sys_timer_config();
 342:	50 d1       	rcall	.+672    	; 0x5e4 <sys_timer_config>
	adc_config(); //CHECK WHICH ADC INPUTS CORRESPOND WITH WHAT DATABYTE WE SEND
 344:	f9 de       	rcall	.-526    	; 0x138 <adc_config>
 346:	6c df       	rcall	.-296    	; 0x220 <can_cfg>
	can_cfg();
 348:	80 e1       	ldi	r24, 0x10	; 16
 34a:	94 e0       	ldi	r25, 0x04	; 4
	
	struct CAN_MOB can_SHL0_mob;
	can_SHL0_mob.mob_id = 0x410;
 34c:	9a 83       	std	Y+2, r25	; 0x02
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	1c 82       	std	Y+4, r1	; 0x04
 352:	1b 82       	std	Y+3, r1	; 0x03
	can_SHL0_mob.mob_idmask = 0;//sent
 354:	1d 82       	std	Y+5, r1	; 0x05
 356:	fe 01       	movw	r30, r28
	can_SHL0_mob.mob_number = 0;
 358:	36 96       	adiw	r30, 0x06	; 6
	uint8_t SHL0_databytes[8] = {0};
 35a:	88 e0       	ldi	r24, 0x08	; 8
 35c:	df 01       	movw	r26, r30
 35e:	1d 92       	st	X+, r1
 360:	8a 95       	dec	r24
 362:	e9 f7       	brne	.-6      	; 0x35e <main+0x32>
 364:	78 94       	sei
 366:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sys_tick>
	
	sei();
	
	while (1){
		if((sys_tick - time_old) >= 1){ 
 36a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sys_tick+0x1>
 36e:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <sys_tick+0x2>
 372:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <sys_tick+0x3>
 376:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <time_old>
 37a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <time_old+0x1>
 37e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <time_old+0x2>
 382:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <time_old+0x3>
 386:	84 17       	cp	r24, r20
 388:	95 07       	cpc	r25, r21
 38a:	a6 07       	cpc	r26, r22
 38c:	b7 07       	cpc	r27, r23
 38e:	b9 f0       	breq	.+46     	; 0x3be <main+0x92>
 390:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_old>
			time_old = sys_tick;
 394:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_old+0x1>
 398:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <time_old+0x2>
 39c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <time_old+0x3>
 3a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_10_ms>
			time_10_ms++;
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time_10_ms>
 3aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time_50_ms>
			time_50_ms++;
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
 3b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time_50_ms>
 3b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_100_ms>
			time_100_ms++;  	
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time_100_ms>
 3be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_10_ms>
		}
		if(time_10_ms >= 10)
 3c2:	8a 30       	cpi	r24, 0x0A	; 10
 3c4:	90 f0       	brcs	.+36     	; 0x3ea <main+0xbe>
		{
			adc_start_conversion();
 3c6:	c8 de       	rcall	.-624    	; 0x158 <adc_start_conversion>
 3c8:	ff de       	rcall	.-514    	; 0x1c8 <adc_get_1>
			adc_data_1 = adc_get_1();
 3ca:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <adc_data_1+0x1>
 3ce:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <adc_data_1>
 3d2:	ff de       	rcall	.-514    	; 0x1d2 <adc_get_2>
			adc_data_2 = adc_get_2();
 3d4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <adc_data_2+0x1>
 3d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <adc_data_2>
 3dc:	ff de       	rcall	.-514    	; 0x1dc <adc_get_3>
 3de:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adc_data_3+0x1>
			adc_data_3 = adc_get_3();
 3e2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adc_data_3>
 3e6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <time_10_ms>
 3ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time_50_ms>
			
			time_10_ms = 0;
 3ee:	82 33       	cpi	r24, 0x32	; 50
		}
		if (time_50_ms >= 50)
 3f0:	40 f0       	brcs	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f2:	be 01       	movw	r22, r28
 3f4:	6a 5f       	subi	r22, 0xFA	; 250
		{
			can_tx(&can_SHL0_mob, SHL0_databytes);
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	50 df       	rcall	.-352    	; 0x29e <can_tx>
 3fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time_50_ms>
 402:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_100_ms>
			
		time_50_ms = 0;
 406:	84 36       	cpi	r24, 0x64	; 100
		}
		if (time_100_ms >= 100)
 408:	08 f4       	brcc	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	ad cf       	rjmp	.-166    	; 0x366 <main+0x3a>
 40c:	98 b1       	in	r25, 0x08	; 8
 40e:	84 e0       	ldi	r24, 0x04	; 4
 410:	89 27       	eor	r24, r25
		{
		PORTC ^= (1<<PC2);
 412:	88 b9       	out	0x08, r24	; 8
 414:	0f 2e       	mov	r0, r31
 416:	fa e0       	ldi	r31, 0x0A	; 10
 418:	8f 2e       	mov	r8, r31
		
		SHL0_databytes[0] = ADC2Sensor(adc_data_3,0.5,4.5,100,10,5,10) & 0xff; //lsb BPS1ADC2Sensor(adc_data_1,1,4.5,100,10,5,10) & 0xff; //lsb BPS1
 41a:	91 2c       	mov	r9, r1
 41c:	f0 2d       	mov	r31, r0
 41e:	0f 2e       	mov	r0, r31
 420:	f5 e0       	ldi	r31, 0x05	; 5
 422:	af 2e       	mov	r10, r31
 424:	f0 2d       	mov	r31, r0
 426:	0f 2e       	mov	r0, r31
 428:	fa e0       	ldi	r31, 0x0A	; 10
 42a:	cf 2e       	mov	r12, r31
 42c:	d1 2c       	mov	r13, r1
 42e:	f0 2d       	mov	r31, r0
 430:	0f 2e       	mov	r0, r31
 432:	f4 e6       	ldi	r31, 0x64	; 100
 434:	ef 2e       	mov	r14, r31
 436:	f0 2d       	mov	r31, r0
 438:	00 e0       	ldi	r16, 0x00	; 0
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	20 e9       	ldi	r18, 0x90	; 144
 43e:	30 e4       	ldi	r19, 0x40	; 64
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	7f e3       	ldi	r23, 0x3F	; 63
 448:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <adc_data_3>
 44c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <adc_data_3+0x1>
 450:	32 d0       	rcall	.+100    	; 0x4b6 <ADC2Sensor>
 452:	8e 83       	std	Y+6, r24	; 0x06
 454:	00 e0       	ldi	r16, 0x00	; 0
 456:	10 e0       	ldi	r17, 0x00	; 0
 458:	20 e9       	ldi	r18, 0x90	; 144
		SHL0_databytes[1] = ADC2Sensor(adc_data_3,0.5,4.5,100,10,5,10) >>8; //lsb BPS1ADC2Sensor(adc_data_1,1,4.5,100,10,5,10) >>8;//msb BPS1
 45a:	30 e4       	ldi	r19, 0x40	; 64
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	7f e3       	ldi	r23, 0x3F	; 63
 464:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <adc_data_3>
 468:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <adc_data_3+0x1>
 46c:	24 d0       	rcall	.+72     	; 0x4b6 <ADC2Sensor>
 46e:	9f 83       	std	Y+7, r25	; 0x07
 470:	00 e0       	ldi	r16, 0x00	; 0
 472:	10 e0       	ldi	r17, 0x00	; 0
 474:	20 e9       	ldi	r18, 0x90	; 144
		SHL0_databytes[2] = ADC2Sensor(adc_data_2,0.5,4.5,100,10,5,10) & 0xff; //lsb BPS1
 476:	30 e4       	ldi	r19, 0x40	; 64
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	7f e3       	ldi	r23, 0x3F	; 63
 480:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <adc_data_2>
 484:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <adc_data_2+0x1>
 488:	16 d0       	rcall	.+44     	; 0x4b6 <ADC2Sensor>
 48a:	88 87       	std	Y+8, r24	; 0x08
 48c:	00 e0       	ldi	r16, 0x00	; 0
 48e:	10 e0       	ldi	r17, 0x00	; 0
 490:	20 e9       	ldi	r18, 0x90	; 144
		SHL0_databytes[3] = ADC2Sensor(adc_data_2,0.5,4.5,100,10,5,10) >>8; //msb BPS1
 492:	30 e4       	ldi	r19, 0x40	; 64
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	7f e3       	ldi	r23, 0x3F	; 63
 49c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <adc_data_2>
 4a0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <adc_data_2+0x1>
 4a4:	08 d0       	rcall	.+16     	; 0x4b6 <ADC2Sensor>
 4a6:	99 87       	std	Y+9, r25	; 0x09
 4a8:	1a 86       	std	Y+10, r1	; 0x0a
 4aa:	1b 86       	std	Y+11, r1	; 0x0b
 4ac:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <time_100_ms>
		SHL0_databytes[4] = 0; //SPI getter Wheel Speed lsb
		SHL0_databytes[5] = 0; //SPI getter Wheel Speed msb
 4b0:	1d 86       	std	Y+13, r1	; 0x0d
		SHL0_databytes[6] = //adc_get(3)		& 0xff	; //lsb SA
		SHL0_databytes[7] = //(adc_get(3)>>8)	& 0xff	; //msb SA
		
		time_100_ms = 0;
 4b2:	1c 86       	std	Y+12, r1	; 0x0c
 4b4:	58 cf       	rjmp	.-336    	; 0x366 <main+0x3a>

000004b6 <ADC2Sensor>:

#include "sensor_function.h"
#include <avr/io.h>
#include <math.h>

uint16_t ADC2Sensor(uint16_t data, float start_Volt, float end_Volt, uint8_t sensor_max, uint16_t ADC_bit, uint8_t ADC_Volt, uint16_t precision){
 4b6:	2f 92       	push	r2
 4b8:	3f 92       	push	r3
 4ba:	5f 92       	push	r5
 4bc:	6f 92       	push	r6
 4be:	7f 92       	push	r7
 4c0:	8f 92       	push	r8
 4c2:	9f 92       	push	r9
 4c4:	af 92       	push	r10
 4c6:	bf 92       	push	r11
 4c8:	cf 92       	push	r12
 4ca:	df 92       	push	r13
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	28 97       	sbiw	r28, 0x08	; 8
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
 4e8:	1c 01       	movw	r2, r24
 4ea:	49 83       	std	Y+1, r20	; 0x01
 4ec:	5a 83       	std	Y+2, r21	; 0x02
 4ee:	6b 83       	std	Y+3, r22	; 0x03
 4f0:	7c 83       	std	Y+4, r23	; 0x04
 4f2:	0d 83       	std	Y+5, r16	; 0x05
 4f4:	1e 83       	std	Y+6, r17	; 0x06
 4f6:	2f 83       	std	Y+7, r18	; 0x07
 4f8:	38 87       	std	Y+8, r19	; 0x08
 4fa:	5e 2c       	mov	r5, r14
 4fc:	84 01       	movw	r16, r8
	uint16_t start_ADC = (pow(2,ADC_bit))/ADC_Volt*start_Volt;
 4fe:	b6 01       	movw	r22, r12
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	30 d1       	rcall	.+608    	; 0x766 <__floatunsisf>
 506:	9b 01       	movw	r18, r22
 508:	ac 01       	movw	r20, r24
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e4       	ldi	r25, 0x40	; 64
 512:	1a d2       	rcall	.+1076   	; 0x948 <pow>
 514:	6b 01       	movw	r12, r22
 516:	7c 01       	movw	r14, r24
 518:	6a 2d       	mov	r22, r10
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	24 d1       	rcall	.+584    	; 0x76a <__floatsisf>
 522:	9b 01       	movw	r18, r22
 524:	ac 01       	movw	r20, r24
 526:	c7 01       	movw	r24, r14
 528:	b6 01       	movw	r22, r12
 52a:	89 d0       	rcall	.+274    	; 0x63e <__divsf3>
 52c:	6b 01       	movw	r12, r22
 52e:	7c 01       	movw	r14, r24
 530:	29 81       	ldd	r18, Y+1	; 0x01
 532:	3a 81       	ldd	r19, Y+2	; 0x02
 534:	4b 81       	ldd	r20, Y+3	; 0x03
 536:	5c 81       	ldd	r21, Y+4	; 0x04
 538:	a4 d1       	rcall	.+840    	; 0x882 <__mulsf3>
 53a:	e9 d0       	rcall	.+466    	; 0x70e <__fixunssfsi>
 53c:	4b 01       	movw	r8, r22
 53e:	5c 01       	movw	r10, r24
	uint16_t end_ADC = (pow(2,ADC_bit))/ADC_Volt*end_Volt ;
 540:	2d 81       	ldd	r18, Y+5	; 0x05
 542:	3e 81       	ldd	r19, Y+6	; 0x06
 544:	4f 81       	ldd	r20, Y+7	; 0x07
 546:	58 85       	ldd	r21, Y+8	; 0x08
 548:	c7 01       	movw	r24, r14
 54a:	b6 01       	movw	r22, r12
 54c:	9a d1       	rcall	.+820    	; 0x882 <__mulsf3>
	float ADC_range = end_ADC - start_ADC;
 54e:	df d0       	rcall	.+446    	; 0x70e <__fixunssfsi>
 550:	68 19       	sub	r22, r8
 552:	79 09       	sbc	r23, r9
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	06 d1       	rcall	.+524    	; 0x766 <__floatunsisf>
	float sensor_factor = sensor_max/ADC_range;
 55a:	6b 01       	movw	r12, r22
 55c:	7c 01       	movw	r14, r24
 55e:	65 2d       	mov	r22, r5
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	01 d1       	rcall	.+514    	; 0x76a <__floatsisf>
 568:	a7 01       	movw	r20, r14
 56a:	96 01       	movw	r18, r12
 56c:	68 d0       	rcall	.+208    	; 0x63e <__divsf3>
 56e:	6b 01       	movw	r12, r22
 570:	7c 01       	movw	r14, r24
	uint16_t Sensor_Data = (data-start_ADC)*precision*sensor_factor;
 572:	c1 01       	movw	r24, r2
 574:	88 19       	sub	r24, r8
 576:	99 09       	sbc	r25, r9
 578:	80 9f       	mul	r24, r16
 57a:	b0 01       	movw	r22, r0
 57c:	81 9f       	mul	r24, r17
 57e:	70 0d       	add	r23, r0
 580:	90 9f       	mul	r25, r16
 582:	70 0d       	add	r23, r0
 584:	11 24       	eor	r1, r1
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	ed d0       	rcall	.+474    	; 0x766 <__floatunsisf>
 58c:	a7 01       	movw	r20, r14
 58e:	96 01       	movw	r18, r12
 590:	78 d1       	rcall	.+752    	; 0x882 <__mulsf3>
 592:	bd d0       	rcall	.+378    	; 0x70e <__fixunssfsi>
 594:	cb 01       	movw	r24, r22
	if (data<start_ADC){//Set sensor value to zero if below the ADC Threshold
 596:	28 14       	cp	r2, r8
 598:	39 04       	cpc	r3, r9
 59a:	10 f4       	brcc	.+4      	; 0x5a0 <ADC2Sensor+0xea>
		Sensor_Data = 0;
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return Sensor_Data;
}
 5a0:	28 96       	adiw	r28, 0x08	; 8
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	df 90       	pop	r13
 5ba:	cf 90       	pop	r12
 5bc:	bf 90       	pop	r11
 5be:	af 90       	pop	r10
 5c0:	9f 90       	pop	r9
 5c2:	8f 90       	pop	r8
 5c4:	7f 90       	pop	r7
 5c6:	6f 90       	pop	r6
 5c8:	5f 90       	pop	r5
 5ca:	3f 90       	pop	r3
 5cc:	2f 90       	pop	r2
 5ce:	08 95       	ret

000005d0 <port_config>:
/*	FUNCTIONS	*/

void port_config(void)
{
	//Fault-LED, Heart-LED
	DDRC |= (1<<PC0) | (1<<PC2);
 5d0:	87 b1       	in	r24, 0x07	; 7
 5d2:	85 60       	ori	r24, 0x05	; 5
 5d4:	87 b9       	out	0x07, r24	; 7
	//CS-TYPK1, CS-TYPK2
	DDRE |= (1<<PE0) | (1<<PE1);
 5d6:	8d b1       	in	r24, 0x0d	; 13
 5d8:	83 60       	ori	r24, 0x03	; 3
 5da:	8d b9       	out	0x0d, r24	; 13
	//BPS1, BPS2, SA (Steering Angle)
	DDRF &= ~(1<<PF0) & ~(1<<PF1) & ~(1<<PF2);
 5dc:	80 b3       	in	r24, 0x10	; 16
 5de:	88 7f       	andi	r24, 0xF8	; 248
 5e0:	80 bb       	out	0x10, r24	; 16
 5e2:	08 95       	ret

000005e4 <sys_timer_config>:
}

void sys_timer_config(void)
{
	//CTC-Mode, /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
 5e4:	8b e0       	ldi	r24, 0x0B	; 11
 5e6:	84 bd       	out	0x24, r24	; 36
	//Compare value for 1ms (Formula in Datasheet)
	OCR0A = 249;
 5e8:	89 ef       	ldi	r24, 0xF9	; 249
 5ea:	87 bd       	out	0x27, r24	; 39
	//Compare Interrupt Enable
	TIMSK0 = 0 | (1<<OCIE0A);
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 5f2:	08 95       	ret

000005f4 <__vector_16>:
}

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
 5f4:	1f 92       	push	r1
 5f6:	0f 92       	push	r0
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	0f 92       	push	r0
 5fc:	11 24       	eor	r1, r1
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
	sys_tick++;
 606:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sys_tick>
 60a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sys_tick+0x1>
 60e:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <sys_tick+0x2>
 612:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <sys_tick+0x3>
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	a1 1d       	adc	r26, r1
 61a:	b1 1d       	adc	r27, r1
 61c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sys_tick>
 620:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <sys_tick+0x1>
 624:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <sys_tick+0x2>
 628:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <sys_tick+0x3>
 62c:	bf 91       	pop	r27
 62e:	af 91       	pop	r26
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <__divsf3>:
 63e:	0c d0       	rcall	.+24     	; 0x658 <__divsf3x>
 640:	e6 c0       	rjmp	.+460    	; 0x80e <__fp_round>
 642:	de d0       	rcall	.+444    	; 0x800 <__fp_pscB>
 644:	40 f0       	brcs	.+16     	; 0x656 <__divsf3+0x18>
 646:	d5 d0       	rcall	.+426    	; 0x7f2 <__fp_pscA>
 648:	30 f0       	brcs	.+12     	; 0x656 <__divsf3+0x18>
 64a:	21 f4       	brne	.+8      	; 0x654 <__divsf3+0x16>
 64c:	5f 3f       	cpi	r21, 0xFF	; 255
 64e:	19 f0       	breq	.+6      	; 0x656 <__divsf3+0x18>
 650:	c7 c0       	rjmp	.+398    	; 0x7e0 <__fp_inf>
 652:	51 11       	cpse	r21, r1
 654:	10 c1       	rjmp	.+544    	; 0x876 <__fp_szero>
 656:	ca c0       	rjmp	.+404    	; 0x7ec <__fp_nan>

00000658 <__divsf3x>:
 658:	eb d0       	rcall	.+470    	; 0x830 <__fp_split3>
 65a:	98 f3       	brcs	.-26     	; 0x642 <__divsf3+0x4>

0000065c <__divsf3_pse>:
 65c:	99 23       	and	r25, r25
 65e:	c9 f3       	breq	.-14     	; 0x652 <__divsf3+0x14>
 660:	55 23       	and	r21, r21
 662:	b1 f3       	breq	.-20     	; 0x650 <__divsf3+0x12>
 664:	95 1b       	sub	r25, r21
 666:	55 0b       	sbc	r21, r21
 668:	bb 27       	eor	r27, r27
 66a:	aa 27       	eor	r26, r26
 66c:	62 17       	cp	r22, r18
 66e:	73 07       	cpc	r23, r19
 670:	84 07       	cpc	r24, r20
 672:	38 f0       	brcs	.+14     	; 0x682 <__divsf3_pse+0x26>
 674:	9f 5f       	subi	r25, 0xFF	; 255
 676:	5f 4f       	sbci	r21, 0xFF	; 255
 678:	22 0f       	add	r18, r18
 67a:	33 1f       	adc	r19, r19
 67c:	44 1f       	adc	r20, r20
 67e:	aa 1f       	adc	r26, r26
 680:	a9 f3       	breq	.-22     	; 0x66c <__divsf3_pse+0x10>
 682:	33 d0       	rcall	.+102    	; 0x6ea <__divsf3_pse+0x8e>
 684:	0e 2e       	mov	r0, r30
 686:	3a f0       	brmi	.+14     	; 0x696 <__divsf3_pse+0x3a>
 688:	e0 e8       	ldi	r30, 0x80	; 128
 68a:	30 d0       	rcall	.+96     	; 0x6ec <__divsf3_pse+0x90>
 68c:	91 50       	subi	r25, 0x01	; 1
 68e:	50 40       	sbci	r21, 0x00	; 0
 690:	e6 95       	lsr	r30
 692:	00 1c       	adc	r0, r0
 694:	ca f7       	brpl	.-14     	; 0x688 <__divsf3_pse+0x2c>
 696:	29 d0       	rcall	.+82     	; 0x6ea <__divsf3_pse+0x8e>
 698:	fe 2f       	mov	r31, r30
 69a:	27 d0       	rcall	.+78     	; 0x6ea <__divsf3_pse+0x8e>
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	bb 1f       	adc	r27, r27
 6a4:	26 17       	cp	r18, r22
 6a6:	37 07       	cpc	r19, r23
 6a8:	48 07       	cpc	r20, r24
 6aa:	ab 07       	cpc	r26, r27
 6ac:	b0 e8       	ldi	r27, 0x80	; 128
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <__divsf3_pse+0x56>
 6b0:	bb 0b       	sbc	r27, r27
 6b2:	80 2d       	mov	r24, r0
 6b4:	bf 01       	movw	r22, r30
 6b6:	ff 27       	eor	r31, r31
 6b8:	93 58       	subi	r25, 0x83	; 131
 6ba:	5f 4f       	sbci	r21, 0xFF	; 255
 6bc:	2a f0       	brmi	.+10     	; 0x6c8 <__divsf3_pse+0x6c>
 6be:	9e 3f       	cpi	r25, 0xFE	; 254
 6c0:	51 05       	cpc	r21, r1
 6c2:	68 f0       	brcs	.+26     	; 0x6de <__divsf3_pse+0x82>
 6c4:	8d c0       	rjmp	.+282    	; 0x7e0 <__fp_inf>
 6c6:	d7 c0       	rjmp	.+430    	; 0x876 <__fp_szero>
 6c8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ca:	ec f3       	brlt	.-6      	; 0x6c6 <__divsf3_pse+0x6a>
 6cc:	98 3e       	cpi	r25, 0xE8	; 232
 6ce:	dc f3       	brlt	.-10     	; 0x6c6 <__divsf3_pse+0x6a>
 6d0:	86 95       	lsr	r24
 6d2:	77 95       	ror	r23
 6d4:	67 95       	ror	r22
 6d6:	b7 95       	ror	r27
 6d8:	f7 95       	ror	r31
 6da:	9f 5f       	subi	r25, 0xFF	; 255
 6dc:	c9 f7       	brne	.-14     	; 0x6d0 <__divsf3_pse+0x74>
 6de:	88 0f       	add	r24, r24
 6e0:	91 1d       	adc	r25, r1
 6e2:	96 95       	lsr	r25
 6e4:	87 95       	ror	r24
 6e6:	97 f9       	bld	r25, 7
 6e8:	08 95       	ret
 6ea:	e1 e0       	ldi	r30, 0x01	; 1
 6ec:	66 0f       	add	r22, r22
 6ee:	77 1f       	adc	r23, r23
 6f0:	88 1f       	adc	r24, r24
 6f2:	bb 1f       	adc	r27, r27
 6f4:	62 17       	cp	r22, r18
 6f6:	73 07       	cpc	r23, r19
 6f8:	84 07       	cpc	r24, r20
 6fa:	ba 07       	cpc	r27, r26
 6fc:	20 f0       	brcs	.+8      	; 0x706 <__divsf3_pse+0xaa>
 6fe:	62 1b       	sub	r22, r18
 700:	73 0b       	sbc	r23, r19
 702:	84 0b       	sbc	r24, r20
 704:	ba 0b       	sbc	r27, r26
 706:	ee 1f       	adc	r30, r30
 708:	88 f7       	brcc	.-30     	; 0x6ec <__divsf3_pse+0x90>
 70a:	e0 95       	com	r30
 70c:	08 95       	ret

0000070e <__fixunssfsi>:
 70e:	98 d0       	rcall	.+304    	; 0x840 <__fp_splitA>
 710:	88 f0       	brcs	.+34     	; 0x734 <__fixunssfsi+0x26>
 712:	9f 57       	subi	r25, 0x7F	; 127
 714:	90 f0       	brcs	.+36     	; 0x73a <__fixunssfsi+0x2c>
 716:	b9 2f       	mov	r27, r25
 718:	99 27       	eor	r25, r25
 71a:	b7 51       	subi	r27, 0x17	; 23
 71c:	a0 f0       	brcs	.+40     	; 0x746 <__fixunssfsi+0x38>
 71e:	d1 f0       	breq	.+52     	; 0x754 <__fixunssfsi+0x46>
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	1a f0       	brmi	.+6      	; 0x730 <__fixunssfsi+0x22>
 72a:	ba 95       	dec	r27
 72c:	c9 f7       	brne	.-14     	; 0x720 <__fixunssfsi+0x12>
 72e:	12 c0       	rjmp	.+36     	; 0x754 <__fixunssfsi+0x46>
 730:	b1 30       	cpi	r27, 0x01	; 1
 732:	81 f0       	breq	.+32     	; 0x754 <__fixunssfsi+0x46>
 734:	9f d0       	rcall	.+318    	; 0x874 <__fp_zero>
 736:	b1 e0       	ldi	r27, 0x01	; 1
 738:	08 95       	ret
 73a:	9c c0       	rjmp	.+312    	; 0x874 <__fp_zero>
 73c:	67 2f       	mov	r22, r23
 73e:	78 2f       	mov	r23, r24
 740:	88 27       	eor	r24, r24
 742:	b8 5f       	subi	r27, 0xF8	; 248
 744:	39 f0       	breq	.+14     	; 0x754 <__fixunssfsi+0x46>
 746:	b9 3f       	cpi	r27, 0xF9	; 249
 748:	cc f3       	brlt	.-14     	; 0x73c <__fixunssfsi+0x2e>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b3 95       	inc	r27
 752:	d9 f7       	brne	.-10     	; 0x74a <__fixunssfsi+0x3c>
 754:	3e f4       	brtc	.+14     	; 0x764 <__fixunssfsi+0x56>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <__floatunsisf>:
 766:	e8 94       	clt
 768:	09 c0       	rjmp	.+18     	; 0x77c <__floatsisf+0x12>

0000076a <__floatsisf>:
 76a:	97 fb       	bst	r25, 7
 76c:	3e f4       	brtc	.+14     	; 0x77c <__floatsisf+0x12>
 76e:	90 95       	com	r25
 770:	80 95       	com	r24
 772:	70 95       	com	r23
 774:	61 95       	neg	r22
 776:	7f 4f       	sbci	r23, 0xFF	; 255
 778:	8f 4f       	sbci	r24, 0xFF	; 255
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	99 23       	and	r25, r25
 77e:	a9 f0       	breq	.+42     	; 0x7aa <__floatsisf+0x40>
 780:	f9 2f       	mov	r31, r25
 782:	96 e9       	ldi	r25, 0x96	; 150
 784:	bb 27       	eor	r27, r27
 786:	93 95       	inc	r25
 788:	f6 95       	lsr	r31
 78a:	87 95       	ror	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b7 95       	ror	r27
 792:	f1 11       	cpse	r31, r1
 794:	f8 cf       	rjmp	.-16     	; 0x786 <__floatsisf+0x1c>
 796:	fa f4       	brpl	.+62     	; 0x7d6 <__floatsisf+0x6c>
 798:	bb 0f       	add	r27, r27
 79a:	11 f4       	brne	.+4      	; 0x7a0 <__floatsisf+0x36>
 79c:	60 ff       	sbrs	r22, 0
 79e:	1b c0       	rjmp	.+54     	; 0x7d6 <__floatsisf+0x6c>
 7a0:	6f 5f       	subi	r22, 0xFF	; 255
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	16 c0       	rjmp	.+44     	; 0x7d6 <__floatsisf+0x6c>
 7aa:	88 23       	and	r24, r24
 7ac:	11 f0       	breq	.+4      	; 0x7b2 <__floatsisf+0x48>
 7ae:	96 e9       	ldi	r25, 0x96	; 150
 7b0:	11 c0       	rjmp	.+34     	; 0x7d4 <__floatsisf+0x6a>
 7b2:	77 23       	and	r23, r23
 7b4:	21 f0       	breq	.+8      	; 0x7be <__floatsisf+0x54>
 7b6:	9e e8       	ldi	r25, 0x8E	; 142
 7b8:	87 2f       	mov	r24, r23
 7ba:	76 2f       	mov	r23, r22
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <__floatsisf+0x5e>
 7be:	66 23       	and	r22, r22
 7c0:	71 f0       	breq	.+28     	; 0x7de <__floatsisf+0x74>
 7c2:	96 e8       	ldi	r25, 0x86	; 134
 7c4:	86 2f       	mov	r24, r22
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	2a f0       	brmi	.+10     	; 0x7d6 <__floatsisf+0x6c>
 7cc:	9a 95       	dec	r25
 7ce:	66 0f       	add	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	88 1f       	adc	r24, r24
 7d4:	da f7       	brpl	.-10     	; 0x7cc <__floatsisf+0x62>
 7d6:	88 0f       	add	r24, r24
 7d8:	96 95       	lsr	r25
 7da:	87 95       	ror	r24
 7dc:	97 f9       	bld	r25, 7
 7de:	08 95       	ret

000007e0 <__fp_inf>:
 7e0:	97 f9       	bld	r25, 7
 7e2:	9f 67       	ori	r25, 0x7F	; 127
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	08 95       	ret

000007ec <__fp_nan>:
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	80 ec       	ldi	r24, 0xC0	; 192
 7f0:	08 95       	ret

000007f2 <__fp_pscA>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	09 06       	cpc	r0, r25
 7fe:	08 95       	ret

00000800 <__fp_pscB>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	05 06       	cpc	r0, r21
 80c:	08 95       	ret

0000080e <__fp_round>:
 80e:	09 2e       	mov	r0, r25
 810:	03 94       	inc	r0
 812:	00 0c       	add	r0, r0
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0xc>
 816:	88 23       	and	r24, r24
 818:	52 f0       	brmi	.+20     	; 0x82e <__fp_round+0x20>
 81a:	bb 0f       	add	r27, r27
 81c:	40 f4       	brcc	.+16     	; 0x82e <__fp_round+0x20>
 81e:	bf 2b       	or	r27, r31
 820:	11 f4       	brne	.+4      	; 0x826 <__fp_round+0x18>
 822:	60 ff       	sbrs	r22, 0
 824:	04 c0       	rjmp	.+8      	; 0x82e <__fp_round+0x20>
 826:	6f 5f       	subi	r22, 0xFF	; 255
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__fp_split3>:
 830:	57 fd       	sbrc	r21, 7
 832:	90 58       	subi	r25, 0x80	; 128
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	59 f0       	breq	.+22     	; 0x850 <__fp_splitA+0x10>
 83a:	5f 3f       	cpi	r21, 0xFF	; 255
 83c:	71 f0       	breq	.+28     	; 0x85a <__fp_splitA+0x1a>
 83e:	47 95       	ror	r20

00000840 <__fp_splitA>:
 840:	88 0f       	add	r24, r24
 842:	97 fb       	bst	r25, 7
 844:	99 1f       	adc	r25, r25
 846:	61 f0       	breq	.+24     	; 0x860 <__fp_splitA+0x20>
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	79 f0       	breq	.+30     	; 0x86a <__fp_splitA+0x2a>
 84c:	87 95       	ror	r24
 84e:	08 95       	ret
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	55 1f       	adc	r21, r21
 858:	f2 cf       	rjmp	.-28     	; 0x83e <__fp_split3+0xe>
 85a:	46 95       	lsr	r20
 85c:	f1 df       	rcall	.-30     	; 0x840 <__fp_splitA>
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__fp_splitA+0x30>
 860:	16 16       	cp	r1, r22
 862:	17 06       	cpc	r1, r23
 864:	18 06       	cpc	r1, r24
 866:	99 1f       	adc	r25, r25
 868:	f1 cf       	rjmp	.-30     	; 0x84c <__fp_splitA+0xc>
 86a:	86 95       	lsr	r24
 86c:	71 05       	cpc	r23, r1
 86e:	61 05       	cpc	r22, r1
 870:	08 94       	sec
 872:	08 95       	ret

00000874 <__fp_zero>:
 874:	e8 94       	clt

00000876 <__fp_szero>:
 876:	bb 27       	eor	r27, r27
 878:	66 27       	eor	r22, r22
 87a:	77 27       	eor	r23, r23
 87c:	cb 01       	movw	r24, r22
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__mulsf3>:
 882:	0b d0       	rcall	.+22     	; 0x89a <__mulsf3x>
 884:	c4 cf       	rjmp	.-120    	; 0x80e <__fp_round>
 886:	b5 df       	rcall	.-150    	; 0x7f2 <__fp_pscA>
 888:	28 f0       	brcs	.+10     	; 0x894 <__mulsf3+0x12>
 88a:	ba df       	rcall	.-140    	; 0x800 <__fp_pscB>
 88c:	18 f0       	brcs	.+6      	; 0x894 <__mulsf3+0x12>
 88e:	95 23       	and	r25, r21
 890:	09 f0       	breq	.+2      	; 0x894 <__mulsf3+0x12>
 892:	a6 cf       	rjmp	.-180    	; 0x7e0 <__fp_inf>
 894:	ab cf       	rjmp	.-170    	; 0x7ec <__fp_nan>
 896:	11 24       	eor	r1, r1
 898:	ee cf       	rjmp	.-36     	; 0x876 <__fp_szero>

0000089a <__mulsf3x>:
 89a:	ca df       	rcall	.-108    	; 0x830 <__fp_split3>
 89c:	a0 f3       	brcs	.-24     	; 0x886 <__mulsf3+0x4>

0000089e <__mulsf3_pse>:
 89e:	95 9f       	mul	r25, r21
 8a0:	d1 f3       	breq	.-12     	; 0x896 <__mulsf3+0x14>
 8a2:	95 0f       	add	r25, r21
 8a4:	50 e0       	ldi	r21, 0x00	; 0
 8a6:	55 1f       	adc	r21, r21
 8a8:	62 9f       	mul	r22, r18
 8aa:	f0 01       	movw	r30, r0
 8ac:	72 9f       	mul	r23, r18
 8ae:	bb 27       	eor	r27, r27
 8b0:	f0 0d       	add	r31, r0
 8b2:	b1 1d       	adc	r27, r1
 8b4:	63 9f       	mul	r22, r19
 8b6:	aa 27       	eor	r26, r26
 8b8:	f0 0d       	add	r31, r0
 8ba:	b1 1d       	adc	r27, r1
 8bc:	aa 1f       	adc	r26, r26
 8be:	64 9f       	mul	r22, r20
 8c0:	66 27       	eor	r22, r22
 8c2:	b0 0d       	add	r27, r0
 8c4:	a1 1d       	adc	r26, r1
 8c6:	66 1f       	adc	r22, r22
 8c8:	82 9f       	mul	r24, r18
 8ca:	22 27       	eor	r18, r18
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	62 1f       	adc	r22, r18
 8d2:	73 9f       	mul	r23, r19
 8d4:	b0 0d       	add	r27, r0
 8d6:	a1 1d       	adc	r26, r1
 8d8:	62 1f       	adc	r22, r18
 8da:	83 9f       	mul	r24, r19
 8dc:	a0 0d       	add	r26, r0
 8de:	61 1d       	adc	r22, r1
 8e0:	22 1f       	adc	r18, r18
 8e2:	74 9f       	mul	r23, r20
 8e4:	33 27       	eor	r19, r19
 8e6:	a0 0d       	add	r26, r0
 8e8:	61 1d       	adc	r22, r1
 8ea:	23 1f       	adc	r18, r19
 8ec:	84 9f       	mul	r24, r20
 8ee:	60 0d       	add	r22, r0
 8f0:	21 1d       	adc	r18, r1
 8f2:	82 2f       	mov	r24, r18
 8f4:	76 2f       	mov	r23, r22
 8f6:	6a 2f       	mov	r22, r26
 8f8:	11 24       	eor	r1, r1
 8fa:	9f 57       	subi	r25, 0x7F	; 127
 8fc:	50 40       	sbci	r21, 0x00	; 0
 8fe:	8a f0       	brmi	.+34     	; 0x922 <__mulsf3_pse+0x84>
 900:	e1 f0       	breq	.+56     	; 0x93a <__mulsf3_pse+0x9c>
 902:	88 23       	and	r24, r24
 904:	4a f0       	brmi	.+18     	; 0x918 <__mulsf3_pse+0x7a>
 906:	ee 0f       	add	r30, r30
 908:	ff 1f       	adc	r31, r31
 90a:	bb 1f       	adc	r27, r27
 90c:	66 1f       	adc	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	91 50       	subi	r25, 0x01	; 1
 914:	50 40       	sbci	r21, 0x00	; 0
 916:	a9 f7       	brne	.-22     	; 0x902 <__mulsf3_pse+0x64>
 918:	9e 3f       	cpi	r25, 0xFE	; 254
 91a:	51 05       	cpc	r21, r1
 91c:	70 f0       	brcs	.+28     	; 0x93a <__mulsf3_pse+0x9c>
 91e:	60 cf       	rjmp	.-320    	; 0x7e0 <__fp_inf>
 920:	aa cf       	rjmp	.-172    	; 0x876 <__fp_szero>
 922:	5f 3f       	cpi	r21, 0xFF	; 255
 924:	ec f3       	brlt	.-6      	; 0x920 <__mulsf3_pse+0x82>
 926:	98 3e       	cpi	r25, 0xE8	; 232
 928:	dc f3       	brlt	.-10     	; 0x920 <__mulsf3_pse+0x82>
 92a:	86 95       	lsr	r24
 92c:	77 95       	ror	r23
 92e:	67 95       	ror	r22
 930:	b7 95       	ror	r27
 932:	f7 95       	ror	r31
 934:	e7 95       	ror	r30
 936:	9f 5f       	subi	r25, 0xFF	; 255
 938:	c1 f7       	brne	.-16     	; 0x92a <__mulsf3_pse+0x8c>
 93a:	fe 2b       	or	r31, r30
 93c:	88 0f       	add	r24, r24
 93e:	91 1d       	adc	r25, r1
 940:	96 95       	lsr	r25
 942:	87 95       	ror	r24
 944:	97 f9       	bld	r25, 7
 946:	08 95       	ret

00000948 <pow>:
 948:	fa 01       	movw	r30, r20
 94a:	ee 0f       	add	r30, r30
 94c:	ff 1f       	adc	r31, r31
 94e:	30 96       	adiw	r30, 0x00	; 0
 950:	21 05       	cpc	r18, r1
 952:	31 05       	cpc	r19, r1
 954:	99 f1       	breq	.+102    	; 0x9bc <pow+0x74>
 956:	61 15       	cp	r22, r1
 958:	71 05       	cpc	r23, r1
 95a:	61 f4       	brne	.+24     	; 0x974 <pow+0x2c>
 95c:	80 38       	cpi	r24, 0x80	; 128
 95e:	bf e3       	ldi	r27, 0x3F	; 63
 960:	9b 07       	cpc	r25, r27
 962:	49 f1       	breq	.+82     	; 0x9b6 <pow+0x6e>
 964:	68 94       	set
 966:	90 38       	cpi	r25, 0x80	; 128
 968:	81 05       	cpc	r24, r1
 96a:	61 f0       	breq	.+24     	; 0x984 <pow+0x3c>
 96c:	80 38       	cpi	r24, 0x80	; 128
 96e:	bf ef       	ldi	r27, 0xFF	; 255
 970:	9b 07       	cpc	r25, r27
 972:	41 f0       	breq	.+16     	; 0x984 <pow+0x3c>
 974:	99 23       	and	r25, r25
 976:	42 f5       	brpl	.+80     	; 0x9c8 <pow+0x80>
 978:	ff 3f       	cpi	r31, 0xFF	; 255
 97a:	e1 05       	cpc	r30, r1
 97c:	31 05       	cpc	r19, r1
 97e:	21 05       	cpc	r18, r1
 980:	11 f1       	breq	.+68     	; 0x9c6 <pow+0x7e>
 982:	e8 94       	clt
 984:	08 94       	sec
 986:	e7 95       	ror	r30
 988:	d9 01       	movw	r26, r18
 98a:	aa 23       	and	r26, r26
 98c:	29 f4       	brne	.+10     	; 0x998 <pow+0x50>
 98e:	ab 2f       	mov	r26, r27
 990:	be 2f       	mov	r27, r30
 992:	f8 5f       	subi	r31, 0xF8	; 248
 994:	d0 f3       	brcs	.-12     	; 0x98a <pow+0x42>
 996:	10 c0       	rjmp	.+32     	; 0x9b8 <pow+0x70>
 998:	ff 5f       	subi	r31, 0xFF	; 255
 99a:	70 f4       	brcc	.+28     	; 0x9b8 <pow+0x70>
 99c:	a6 95       	lsr	r26
 99e:	e0 f7       	brcc	.-8      	; 0x998 <pow+0x50>
 9a0:	f7 39       	cpi	r31, 0x97	; 151
 9a2:	50 f0       	brcs	.+20     	; 0x9b8 <pow+0x70>
 9a4:	19 f0       	breq	.+6      	; 0x9ac <pow+0x64>
 9a6:	ff 3a       	cpi	r31, 0xAF	; 175
 9a8:	38 f4       	brcc	.+14     	; 0x9b8 <pow+0x70>
 9aa:	9f 77       	andi	r25, 0x7F	; 127
 9ac:	9f 93       	push	r25
 9ae:	0c d0       	rcall	.+24     	; 0x9c8 <pow+0x80>
 9b0:	0f 90       	pop	r0
 9b2:	07 fc       	sbrc	r0, 7
 9b4:	90 58       	subi	r25, 0x80	; 128
 9b6:	08 95       	ret
 9b8:	3e f0       	brts	.+14     	; 0x9c8 <pow+0x80>
 9ba:	18 cf       	rjmp	.-464    	; 0x7ec <__fp_nan>
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	80 e8       	ldi	r24, 0x80	; 128
 9c2:	9f e3       	ldi	r25, 0x3F	; 63
 9c4:	08 95       	ret
 9c6:	4f e7       	ldi	r20, 0x7F	; 127
 9c8:	9f 77       	andi	r25, 0x7F	; 127
 9ca:	5f 93       	push	r21
 9cc:	4f 93       	push	r20
 9ce:	3f 93       	push	r19
 9d0:	2f 93       	push	r18
 9d2:	9e d0       	rcall	.+316    	; 0xb10 <log>
 9d4:	2f 91       	pop	r18
 9d6:	3f 91       	pop	r19
 9d8:	4f 91       	pop	r20
 9da:	5f 91       	pop	r21
 9dc:	52 df       	rcall	.-348    	; 0x882 <__mulsf3>
 9de:	05 c0       	rjmp	.+10     	; 0x9ea <exp>
 9e0:	19 f4       	brne	.+6      	; 0x9e8 <pow+0xa0>
 9e2:	0e f0       	brts	.+2      	; 0x9e6 <pow+0x9e>
 9e4:	fd ce       	rjmp	.-518    	; 0x7e0 <__fp_inf>
 9e6:	46 cf       	rjmp	.-372    	; 0x874 <__fp_zero>
 9e8:	01 cf       	rjmp	.-510    	; 0x7ec <__fp_nan>

000009ea <exp>:
 9ea:	2a df       	rcall	.-428    	; 0x840 <__fp_splitA>
 9ec:	c8 f3       	brcs	.-14     	; 0x9e0 <pow+0x98>
 9ee:	96 38       	cpi	r25, 0x86	; 134
 9f0:	c0 f7       	brcc	.-16     	; 0x9e2 <pow+0x9a>
 9f2:	07 f8       	bld	r0, 7
 9f4:	0f 92       	push	r0
 9f6:	e8 94       	clt
 9f8:	2b e3       	ldi	r18, 0x3B	; 59
 9fa:	3a ea       	ldi	r19, 0xAA	; 170
 9fc:	48 eb       	ldi	r20, 0xB8	; 184
 9fe:	5f e7       	ldi	r21, 0x7F	; 127
 a00:	4e df       	rcall	.-356    	; 0x89e <__mulsf3_pse>
 a02:	0f 92       	push	r0
 a04:	0f 92       	push	r0
 a06:	0f 92       	push	r0
 a08:	4d b7       	in	r20, 0x3d	; 61
 a0a:	5e b7       	in	r21, 0x3e	; 62
 a0c:	0f 92       	push	r0
 a0e:	c0 d0       	rcall	.+384    	; 0xb90 <modf>
 a10:	e4 e9       	ldi	r30, 0x94	; 148
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	16 d0       	rcall	.+44     	; 0xa42 <__fp_powser>
 a16:	4f 91       	pop	r20
 a18:	5f 91       	pop	r21
 a1a:	ef 91       	pop	r30
 a1c:	ff 91       	pop	r31
 a1e:	e5 95       	asr	r30
 a20:	ee 1f       	adc	r30, r30
 a22:	ff 1f       	adc	r31, r31
 a24:	49 f0       	breq	.+18     	; 0xa38 <exp+0x4e>
 a26:	fe 57       	subi	r31, 0x7E	; 126
 a28:	e0 68       	ori	r30, 0x80	; 128
 a2a:	44 27       	eor	r20, r20
 a2c:	ee 0f       	add	r30, r30
 a2e:	44 1f       	adc	r20, r20
 a30:	fa 95       	dec	r31
 a32:	e1 f7       	brne	.-8      	; 0xa2c <exp+0x42>
 a34:	41 95       	neg	r20
 a36:	55 0b       	sbc	r21, r21
 a38:	32 d0       	rcall	.+100    	; 0xa9e <ldexp>
 a3a:	0f 90       	pop	r0
 a3c:	07 fe       	sbrs	r0, 7
 a3e:	26 c0       	rjmp	.+76     	; 0xa8c <inverse>
 a40:	08 95       	ret

00000a42 <__fp_powser>:
 a42:	df 93       	push	r29
 a44:	cf 93       	push	r28
 a46:	1f 93       	push	r17
 a48:	0f 93       	push	r16
 a4a:	ff 92       	push	r15
 a4c:	ef 92       	push	r14
 a4e:	df 92       	push	r13
 a50:	7b 01       	movw	r14, r22
 a52:	8c 01       	movw	r16, r24
 a54:	68 94       	set
 a56:	05 c0       	rjmp	.+10     	; 0xa62 <__fp_powser+0x20>
 a58:	da 2e       	mov	r13, r26
 a5a:	ef 01       	movw	r28, r30
 a5c:	1e df       	rcall	.-452    	; 0x89a <__mulsf3x>
 a5e:	fe 01       	movw	r30, r28
 a60:	e8 94       	clt
 a62:	a5 91       	lpm	r26, Z+
 a64:	25 91       	lpm	r18, Z+
 a66:	35 91       	lpm	r19, Z+
 a68:	45 91       	lpm	r20, Z+
 a6a:	55 91       	lpm	r21, Z+
 a6c:	ae f3       	brts	.-22     	; 0xa58 <__fp_powser+0x16>
 a6e:	ef 01       	movw	r28, r30
 a70:	d4 d0       	rcall	.+424    	; 0xc1a <__addsf3x>
 a72:	fe 01       	movw	r30, r28
 a74:	97 01       	movw	r18, r14
 a76:	a8 01       	movw	r20, r16
 a78:	da 94       	dec	r13
 a7a:	79 f7       	brne	.-34     	; 0xa5a <__fp_powser+0x18>
 a7c:	df 90       	pop	r13
 a7e:	ef 90       	pop	r14
 a80:	ff 90       	pop	r15
 a82:	0f 91       	pop	r16
 a84:	1f 91       	pop	r17
 a86:	cf 91       	pop	r28
 a88:	df 91       	pop	r29
 a8a:	08 95       	ret

00000a8c <inverse>:
 a8c:	9b 01       	movw	r18, r22
 a8e:	ac 01       	movw	r20, r24
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	80 e8       	ldi	r24, 0x80	; 128
 a96:	9f e3       	ldi	r25, 0x3F	; 63
 a98:	d2 cd       	rjmp	.-1116   	; 0x63e <__divsf3>
 a9a:	a2 ce       	rjmp	.-700    	; 0x7e0 <__fp_inf>
 a9c:	11 c1       	rjmp	.+546    	; 0xcc0 <__fp_mpack>

00000a9e <ldexp>:
 a9e:	d0 de       	rcall	.-608    	; 0x840 <__fp_splitA>
 aa0:	e8 f3       	brcs	.-6      	; 0xa9c <inverse+0x10>
 aa2:	99 23       	and	r25, r25
 aa4:	d9 f3       	breq	.-10     	; 0xa9c <inverse+0x10>
 aa6:	94 0f       	add	r25, r20
 aa8:	51 1d       	adc	r21, r1
 aaa:	bb f3       	brvs	.-18     	; 0xa9a <inverse+0xe>
 aac:	91 50       	subi	r25, 0x01	; 1
 aae:	50 40       	sbci	r21, 0x00	; 0
 ab0:	94 f0       	brlt	.+36     	; 0xad6 <ldexp+0x38>
 ab2:	59 f0       	breq	.+22     	; 0xaca <ldexp+0x2c>
 ab4:	88 23       	and	r24, r24
 ab6:	32 f0       	brmi	.+12     	; 0xac4 <ldexp+0x26>
 ab8:	66 0f       	add	r22, r22
 aba:	77 1f       	adc	r23, r23
 abc:	88 1f       	adc	r24, r24
 abe:	91 50       	subi	r25, 0x01	; 1
 ac0:	50 40       	sbci	r21, 0x00	; 0
 ac2:	c1 f7       	brne	.-16     	; 0xab4 <ldexp+0x16>
 ac4:	9e 3f       	cpi	r25, 0xFE	; 254
 ac6:	51 05       	cpc	r21, r1
 ac8:	44 f7       	brge	.-48     	; 0xa9a <inverse+0xe>
 aca:	88 0f       	add	r24, r24
 acc:	91 1d       	adc	r25, r1
 ace:	96 95       	lsr	r25
 ad0:	87 95       	ror	r24
 ad2:	97 f9       	bld	r25, 7
 ad4:	08 95       	ret
 ad6:	5f 3f       	cpi	r21, 0xFF	; 255
 ad8:	ac f0       	brlt	.+42     	; 0xb04 <ldexp+0x66>
 ada:	98 3e       	cpi	r25, 0xE8	; 232
 adc:	9c f0       	brlt	.+38     	; 0xb04 <ldexp+0x66>
 ade:	bb 27       	eor	r27, r27
 ae0:	86 95       	lsr	r24
 ae2:	77 95       	ror	r23
 ae4:	67 95       	ror	r22
 ae6:	b7 95       	ror	r27
 ae8:	08 f4       	brcc	.+2      	; 0xaec <ldexp+0x4e>
 aea:	b1 60       	ori	r27, 0x01	; 1
 aec:	93 95       	inc	r25
 aee:	c1 f7       	brne	.-16     	; 0xae0 <ldexp+0x42>
 af0:	bb 0f       	add	r27, r27
 af2:	58 f7       	brcc	.-42     	; 0xaca <ldexp+0x2c>
 af4:	11 f4       	brne	.+4      	; 0xafa <ldexp+0x5c>
 af6:	60 ff       	sbrs	r22, 0
 af8:	e8 cf       	rjmp	.-48     	; 0xaca <ldexp+0x2c>
 afa:	6f 5f       	subi	r22, 0xFF	; 255
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	e3 cf       	rjmp	.-58     	; 0xaca <ldexp+0x2c>
 b04:	b8 ce       	rjmp	.-656    	; 0x876 <__fp_szero>
 b06:	0e f0       	brts	.+2      	; 0xb0a <ldexp+0x6c>
 b08:	db c0       	rjmp	.+438    	; 0xcc0 <__fp_mpack>
 b0a:	70 ce       	rjmp	.-800    	; 0x7ec <__fp_nan>
 b0c:	68 94       	set
 b0e:	68 ce       	rjmp	.-816    	; 0x7e0 <__fp_inf>

00000b10 <log>:
 b10:	97 de       	rcall	.-722    	; 0x840 <__fp_splitA>
 b12:	c8 f3       	brcs	.-14     	; 0xb06 <ldexp+0x68>
 b14:	99 23       	and	r25, r25
 b16:	d1 f3       	breq	.-12     	; 0xb0c <ldexp+0x6e>
 b18:	c6 f3       	brts	.-16     	; 0xb0a <ldexp+0x6c>
 b1a:	df 93       	push	r29
 b1c:	cf 93       	push	r28
 b1e:	1f 93       	push	r17
 b20:	0f 93       	push	r16
 b22:	ff 92       	push	r15
 b24:	c9 2f       	mov	r28, r25
 b26:	dd 27       	eor	r29, r29
 b28:	88 23       	and	r24, r24
 b2a:	2a f0       	brmi	.+10     	; 0xb36 <log+0x26>
 b2c:	21 97       	sbiw	r28, 0x01	; 1
 b2e:	66 0f       	add	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	da f7       	brpl	.-10     	; 0xb2c <log+0x1c>
 b36:	20 e0       	ldi	r18, 0x00	; 0
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	40 e8       	ldi	r20, 0x80	; 128
 b3c:	5f eb       	ldi	r21, 0xBF	; 191
 b3e:	9f e3       	ldi	r25, 0x3F	; 63
 b40:	88 39       	cpi	r24, 0x98	; 152
 b42:	20 f0       	brcs	.+8      	; 0xb4c <log+0x3c>
 b44:	80 3e       	cpi	r24, 0xE0	; 224
 b46:	30 f0       	brcs	.+12     	; 0xb54 <log+0x44>
 b48:	21 96       	adiw	r28, 0x01	; 1
 b4a:	8f 77       	andi	r24, 0x7F	; 127
 b4c:	55 d0       	rcall	.+170    	; 0xbf8 <__addsf3>
 b4e:	ec eb       	ldi	r30, 0xBC	; 188
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <log+0x4a>
 b54:	51 d0       	rcall	.+162    	; 0xbf8 <__addsf3>
 b56:	e9 ee       	ldi	r30, 0xE9	; 233
 b58:	f0 e0       	ldi	r31, 0x00	; 0
 b5a:	73 df       	rcall	.-282    	; 0xa42 <__fp_powser>
 b5c:	8b 01       	movw	r16, r22
 b5e:	be 01       	movw	r22, r28
 b60:	ec 01       	movw	r28, r24
 b62:	fb 2e       	mov	r15, r27
 b64:	6f 57       	subi	r22, 0x7F	; 127
 b66:	71 09       	sbc	r23, r1
 b68:	75 95       	asr	r23
 b6a:	77 1f       	adc	r23, r23
 b6c:	88 0b       	sbc	r24, r24
 b6e:	99 0b       	sbc	r25, r25
 b70:	fc dd       	rcall	.-1032   	; 0x76a <__floatsisf>
 b72:	28 e1       	ldi	r18, 0x18	; 24
 b74:	32 e7       	ldi	r19, 0x72	; 114
 b76:	41 e3       	ldi	r20, 0x31	; 49
 b78:	5f e3       	ldi	r21, 0x3F	; 63
 b7a:	8f de       	rcall	.-738    	; 0x89a <__mulsf3x>
 b7c:	af 2d       	mov	r26, r15
 b7e:	98 01       	movw	r18, r16
 b80:	ae 01       	movw	r20, r28
 b82:	ff 90       	pop	r15
 b84:	0f 91       	pop	r16
 b86:	1f 91       	pop	r17
 b88:	cf 91       	pop	r28
 b8a:	df 91       	pop	r29
 b8c:	46 d0       	rcall	.+140    	; 0xc1a <__addsf3x>
 b8e:	3f ce       	rjmp	.-898    	; 0x80e <__fp_round>

00000b90 <modf>:
 b90:	fa 01       	movw	r30, r20
 b92:	dc 01       	movw	r26, r24
 b94:	aa 0f       	add	r26, r26
 b96:	bb 1f       	adc	r27, r27
 b98:	9b 01       	movw	r18, r22
 b9a:	ac 01       	movw	r20, r24
 b9c:	bf 57       	subi	r27, 0x7F	; 127
 b9e:	28 f4       	brcc	.+10     	; 0xbaa <modf+0x1a>
 ba0:	22 27       	eor	r18, r18
 ba2:	33 27       	eor	r19, r19
 ba4:	44 27       	eor	r20, r20
 ba6:	50 78       	andi	r21, 0x80	; 128
 ba8:	1f c0       	rjmp	.+62     	; 0xbe8 <modf+0x58>
 baa:	b7 51       	subi	r27, 0x17	; 23
 bac:	88 f4       	brcc	.+34     	; 0xbd0 <modf+0x40>
 bae:	ab 2f       	mov	r26, r27
 bb0:	00 24       	eor	r0, r0
 bb2:	46 95       	lsr	r20
 bb4:	37 95       	ror	r19
 bb6:	27 95       	ror	r18
 bb8:	01 1c       	adc	r0, r1
 bba:	a3 95       	inc	r26
 bbc:	d2 f3       	brmi	.-12     	; 0xbb2 <modf+0x22>
 bbe:	00 20       	and	r0, r0
 bc0:	69 f0       	breq	.+26     	; 0xbdc <modf+0x4c>
 bc2:	22 0f       	add	r18, r18
 bc4:	33 1f       	adc	r19, r19
 bc6:	44 1f       	adc	r20, r20
 bc8:	b3 95       	inc	r27
 bca:	da f3       	brmi	.-10     	; 0xbc2 <modf+0x32>
 bcc:	0d d0       	rcall	.+26     	; 0xbe8 <modf+0x58>
 bce:	13 c0       	rjmp	.+38     	; 0xbf6 <__subsf3>
 bd0:	61 30       	cpi	r22, 0x01	; 1
 bd2:	71 05       	cpc	r23, r1
 bd4:	a0 e8       	ldi	r26, 0x80	; 128
 bd6:	8a 07       	cpc	r24, r26
 bd8:	b9 46       	sbci	r27, 0x69	; 105
 bda:	30 f4       	brcc	.+12     	; 0xbe8 <modf+0x58>
 bdc:	9b 01       	movw	r18, r22
 bde:	ac 01       	movw	r20, r24
 be0:	66 27       	eor	r22, r22
 be2:	77 27       	eor	r23, r23
 be4:	88 27       	eor	r24, r24
 be6:	90 78       	andi	r25, 0x80	; 128
 be8:	30 96       	adiw	r30, 0x00	; 0
 bea:	21 f0       	breq	.+8      	; 0xbf4 <modf+0x64>
 bec:	20 83       	st	Z, r18
 bee:	31 83       	std	Z+1, r19	; 0x01
 bf0:	42 83       	std	Z+2, r20	; 0x02
 bf2:	53 83       	std	Z+3, r21	; 0x03
 bf4:	08 95       	ret

00000bf6 <__subsf3>:
 bf6:	50 58       	subi	r21, 0x80	; 128

00000bf8 <__addsf3>:
 bf8:	bb 27       	eor	r27, r27
 bfa:	aa 27       	eor	r26, r26
 bfc:	0e d0       	rcall	.+28     	; 0xc1a <__addsf3x>
 bfe:	07 ce       	rjmp	.-1010   	; 0x80e <__fp_round>
 c00:	f8 dd       	rcall	.-1040   	; 0x7f2 <__fp_pscA>
 c02:	30 f0       	brcs	.+12     	; 0xc10 <__addsf3+0x18>
 c04:	fd dd       	rcall	.-1030   	; 0x800 <__fp_pscB>
 c06:	20 f0       	brcs	.+8      	; 0xc10 <__addsf3+0x18>
 c08:	31 f4       	brne	.+12     	; 0xc16 <__addsf3+0x1e>
 c0a:	9f 3f       	cpi	r25, 0xFF	; 255
 c0c:	11 f4       	brne	.+4      	; 0xc12 <__addsf3+0x1a>
 c0e:	1e f4       	brtc	.+6      	; 0xc16 <__addsf3+0x1e>
 c10:	ed cd       	rjmp	.-1062   	; 0x7ec <__fp_nan>
 c12:	0e f4       	brtc	.+2      	; 0xc16 <__addsf3+0x1e>
 c14:	e0 95       	com	r30
 c16:	e7 fb       	bst	r30, 7
 c18:	e3 cd       	rjmp	.-1082   	; 0x7e0 <__fp_inf>

00000c1a <__addsf3x>:
 c1a:	e9 2f       	mov	r30, r25
 c1c:	09 de       	rcall	.-1006   	; 0x830 <__fp_split3>
 c1e:	80 f3       	brcs	.-32     	; 0xc00 <__addsf3+0x8>
 c20:	ba 17       	cp	r27, r26
 c22:	62 07       	cpc	r22, r18
 c24:	73 07       	cpc	r23, r19
 c26:	84 07       	cpc	r24, r20
 c28:	95 07       	cpc	r25, r21
 c2a:	18 f0       	brcs	.+6      	; 0xc32 <__addsf3x+0x18>
 c2c:	71 f4       	brne	.+28     	; 0xc4a <__addsf3x+0x30>
 c2e:	9e f5       	brtc	.+102    	; 0xc96 <__addsf3x+0x7c>
 c30:	21 ce       	rjmp	.-958    	; 0x874 <__fp_zero>
 c32:	0e f4       	brtc	.+2      	; 0xc36 <__addsf3x+0x1c>
 c34:	e0 95       	com	r30
 c36:	0b 2e       	mov	r0, r27
 c38:	ba 2f       	mov	r27, r26
 c3a:	a0 2d       	mov	r26, r0
 c3c:	0b 01       	movw	r0, r22
 c3e:	b9 01       	movw	r22, r18
 c40:	90 01       	movw	r18, r0
 c42:	0c 01       	movw	r0, r24
 c44:	ca 01       	movw	r24, r20
 c46:	a0 01       	movw	r20, r0
 c48:	11 24       	eor	r1, r1
 c4a:	ff 27       	eor	r31, r31
 c4c:	59 1b       	sub	r21, r25
 c4e:	99 f0       	breq	.+38     	; 0xc76 <__addsf3x+0x5c>
 c50:	59 3f       	cpi	r21, 0xF9	; 249
 c52:	50 f4       	brcc	.+20     	; 0xc68 <__addsf3x+0x4e>
 c54:	50 3e       	cpi	r21, 0xE0	; 224
 c56:	68 f1       	brcs	.+90     	; 0xcb2 <__addsf3x+0x98>
 c58:	1a 16       	cp	r1, r26
 c5a:	f0 40       	sbci	r31, 0x00	; 0
 c5c:	a2 2f       	mov	r26, r18
 c5e:	23 2f       	mov	r18, r19
 c60:	34 2f       	mov	r19, r20
 c62:	44 27       	eor	r20, r20
 c64:	58 5f       	subi	r21, 0xF8	; 248
 c66:	f3 cf       	rjmp	.-26     	; 0xc4e <__addsf3x+0x34>
 c68:	46 95       	lsr	r20
 c6a:	37 95       	ror	r19
 c6c:	27 95       	ror	r18
 c6e:	a7 95       	ror	r26
 c70:	f0 40       	sbci	r31, 0x00	; 0
 c72:	53 95       	inc	r21
 c74:	c9 f7       	brne	.-14     	; 0xc68 <__addsf3x+0x4e>
 c76:	7e f4       	brtc	.+30     	; 0xc96 <__addsf3x+0x7c>
 c78:	1f 16       	cp	r1, r31
 c7a:	ba 0b       	sbc	r27, r26
 c7c:	62 0b       	sbc	r22, r18
 c7e:	73 0b       	sbc	r23, r19
 c80:	84 0b       	sbc	r24, r20
 c82:	ba f0       	brmi	.+46     	; 0xcb2 <__addsf3x+0x98>
 c84:	91 50       	subi	r25, 0x01	; 1
 c86:	a1 f0       	breq	.+40     	; 0xcb0 <__addsf3x+0x96>
 c88:	ff 0f       	add	r31, r31
 c8a:	bb 1f       	adc	r27, r27
 c8c:	66 1f       	adc	r22, r22
 c8e:	77 1f       	adc	r23, r23
 c90:	88 1f       	adc	r24, r24
 c92:	c2 f7       	brpl	.-16     	; 0xc84 <__addsf3x+0x6a>
 c94:	0e c0       	rjmp	.+28     	; 0xcb2 <__addsf3x+0x98>
 c96:	ba 0f       	add	r27, r26
 c98:	62 1f       	adc	r22, r18
 c9a:	73 1f       	adc	r23, r19
 c9c:	84 1f       	adc	r24, r20
 c9e:	48 f4       	brcc	.+18     	; 0xcb2 <__addsf3x+0x98>
 ca0:	87 95       	ror	r24
 ca2:	77 95       	ror	r23
 ca4:	67 95       	ror	r22
 ca6:	b7 95       	ror	r27
 ca8:	f7 95       	ror	r31
 caa:	9e 3f       	cpi	r25, 0xFE	; 254
 cac:	08 f0       	brcs	.+2      	; 0xcb0 <__addsf3x+0x96>
 cae:	b3 cf       	rjmp	.-154    	; 0xc16 <__addsf3+0x1e>
 cb0:	93 95       	inc	r25
 cb2:	88 0f       	add	r24, r24
 cb4:	08 f0       	brcs	.+2      	; 0xcb8 <__addsf3x+0x9e>
 cb6:	99 27       	eor	r25, r25
 cb8:	ee 0f       	add	r30, r30
 cba:	97 95       	ror	r25
 cbc:	87 95       	ror	r24
 cbe:	08 95       	ret

00000cc0 <__fp_mpack>:
 cc0:	9f 3f       	cpi	r25, 0xFF	; 255
 cc2:	31 f0       	breq	.+12     	; 0xcd0 <__fp_mpack_finite+0xc>

00000cc4 <__fp_mpack_finite>:
 cc4:	91 50       	subi	r25, 0x01	; 1
 cc6:	20 f4       	brcc	.+8      	; 0xcd0 <__fp_mpack_finite+0xc>
 cc8:	87 95       	ror	r24
 cca:	77 95       	ror	r23
 ccc:	67 95       	ror	r22
 cce:	b7 95       	ror	r27
 cd0:	88 0f       	add	r24, r24
 cd2:	91 1d       	adc	r25, r1
 cd4:	96 95       	lsr	r25
 cd6:	87 95       	ror	r24
 cd8:	97 f9       	bld	r25, 7
 cda:	08 95       	ret

00000cdc <_exit>:
 cdc:	f8 94       	cli

00000cde <__stop_program>:
 cde:	ff cf       	rjmp	.-2      	; 0xcde <__stop_program>
