
SHL_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000006d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001171  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4d  00000000  00000000  0000199d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c7  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b5  00000000  00000000  0000326c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035d  00000000  00000000  00003921  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c5 c1       	rjmp	.+906    	; 0x3cc <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__vector_25>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 31       	cpi	r26, 0x10	; 16
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	f7 d0       	rcall	.+494    	; 0x2a0 <main>
  b2:	d3 c2       	rjmp	.+1446   	; 0x65a <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <adc_config>:
uint8_t adc_next = 0;

void adc_config()
{
	//AREF = AVCC
	ADMUX = (1<<REFS0) | (1<<MUX0);
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//ADC Enable, /16, Interrupt Enable
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8c e8       	ldi	r24, 0x8C	; 140
  c2:	80 83       	st	Z, r24
	//Start Conversion
	ADCSRA |= (1<<ADSC);
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	DIDR0 |= 1;
  ca:	ee e7       	ldi	r30, 0x7E	; 126
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <adc_start_conversion>:
}

void adc_start_conversion()
{
	//Start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0) | (1<<ADIE) | (1<<ADSC);
  d6:	8d ec       	ldi	r24, 0xCD	; 205
  d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	SMCR = (1<<SM0)|(0<<SM1)|(0<<SM2); //enable ADC noise reduction mode and starts the conversion
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	83 bf       	out	0x33, r24	; 51
  e0:	08 95       	ret

000000e2 <__vector_25>:
}

ISR(ADC_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	0b b6       	in	r0, 0x3b	; 59
  ee:	0f 92       	push	r0
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	8f 93       	push	r24
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 106:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	e4 5f       	subi	r30, 0xF4	; 244
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	31 83       	std	Z+1, r19	; 0x01
 114:	20 83       	st	Z, r18
	adc_next++;
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(adc_next == ADCVALUES)
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	11 f4       	brne	.+4      	; 0x124 <__vector_25+0x42>
	{
		adc_next = 0;
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	8f 91       	pop	r24
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0b be       	out	0x3b, r0	; 59
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <adc_get_1>:
{
	return adc_values[adc];
}*/
uint16_t adc_get_1(){
	return adc_values[0];
}
 146:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <adc_values>
 14a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <adc_values+0x1>
 14e:	08 95       	ret

00000150 <adc_get_2>:
uint16_t adc_get_2(){
	return adc_values[1];
}
 150:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_values+0x2>
 154:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_values+0x3>
 158:	08 95       	ret

0000015a <can_check_free>:
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	78 f0       	brcs	.+30     	; 0x17c <can_check_free+0x22>
 15e:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 97       	sbiw	r24, 0x08	; 8
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <can_check_free+0x14>
 16a:	35 95       	asr	r19
 16c:	27 95       	ror	r18
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <can_check_free+0x10>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	20 ff       	sbrs	r18, 0
 176:	0d c0       	rjmp	.+26     	; 0x192 <can_check_free+0x38>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
 17c:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <can_check_free+0x2e>
 184:	35 95       	asr	r19
 186:	27 95       	ror	r18
 188:	8a 95       	dec	r24
 18a:	e2 f7       	brpl	.-8      	; 0x184 <can_check_free+0x2a>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	20 fd       	sbrc	r18, 0
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret

00000194 <can_cfg>:
 194:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	29 c0       	rjmp	.+82     	; 0x1ee <can_cfg+0x5a>
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	48 9f       	mul	r20, r24
 1a0:	90 01       	movw	r18, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	82 2f       	mov	r24, r18
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1ac:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 1b0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1b4:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1b8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1bc:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1c0:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1c4:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1c8:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 1cc:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 1d0:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <can_cfg+0x54>
 1d8:	98 2f       	mov	r25, r24
 1da:	92 2b       	or	r25, r18
 1dc:	98 60       	ori	r25, 0x08	; 8
 1de:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1e2:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	88 30       	cpi	r24, 0x08	; 8
 1ea:	b0 f3       	brcs	.-20     	; 0x1d8 <can_cfg+0x44>
 1ec:	4f 5f       	subi	r20, 0xFF	; 255
 1ee:	4f 30       	cpi	r20, 0x0F	; 15
 1f0:	a8 f2       	brcs	.-86     	; 0x19c <can_cfg+0x8>
 1f2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 1fc:	86 e3       	ldi	r24, 0x36	; 54
 1fe:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 202:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 206:	e8 ed       	ldi	r30, 0xD8	; 216
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	80 83       	st	Z, r24
 210:	08 95       	ret

00000212 <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
	
	for(uint8_t byte = 0; byte <8; byte++){
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	10 c0       	rjmp	.+32     	; 0x23c <can_tx+0x2a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 21c:	8c 81       	ldd	r24, Y+4	; 0x04
 21e:	30 e1       	ldi	r19, 0x10	; 16
 220:	83 9f       	mul	r24, r19
 222:	c0 01       	movw	r24, r0
 224:	11 24       	eor	r1, r1
 226:	82 2b       	or	r24, r18
 228:	88 60       	ori	r24, 0x08	; 8
 22a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANMSG = data[byte];
 22e:	fb 01       	movw	r30, r22
 230:	e2 0f       	add	r30, r18
 232:	f1 1d       	adc	r31, r1
 234:	80 81       	ld	r24, Z
 236:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	28 30       	cpi	r18, 0x08	; 8
 23e:	70 f3       	brcs	.-36     	; 0x21c <can_tx+0xa>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 240:	8c 81       	ldd	r24, Y+4	; 0x04
 242:	82 95       	swap	r24
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 24a:	8c 81       	ldd	r24, Y+4	; 0x04
 24c:	86 df       	rcall	.-244    	; 0x15a <can_check_free>
 24e:	88 23       	and	r24, r24
 250:	21 f1       	breq	.+72     	; 0x29a <can_tx+0x88>
		CANSTMOB = 0;
 252:	ee ee       	ldi	r30, 0xEE	; 238
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 258:	88 81       	ld	r24, Y
 25a:	99 81       	ldd	r25, Y+1	; 0x01
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 26c:	88 81       	ld	r24, Y
 26e:	82 95       	swap	r24
 270:	88 0f       	add	r24, r24
 272:	80 7e       	andi	r24, 0xE0	; 224
 274:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 278:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 27c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 280:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 284:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 288:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 28c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 290:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 292:	88 e4       	ldi	r24, 0x48	; 72
 294:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 298:	10 82       	st	Z, r1
	}
	
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <main>:
uint8_t time_200_ms = 0; 

uint16_t data = 0;
extern uint16_t pressure;

int main(void){
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	2d 97       	sbiw	r28, 0x0d	; 13
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
	/*	Configuration	*/
	port_config();
 2b4:	79 d0       	rcall	.+242    	; 0x3a8 <port_config>
	sys_timer_config();
 2b6:	82 d0       	rcall	.+260    	; 0x3bc <sys_timer_config>
	adc_config(); //CHECK WHICH ADC INPUTS CORRESPOND WITH WHAT DATABYTE WE SEND
 2b8:	fe de       	rcall	.-516    	; 0xb6 <adc_config>
 2ba:	6c df       	rcall	.-296    	; 0x194 <can_cfg>
	can_cfg();
 2bc:	80 e1       	ldi	r24, 0x10	; 16
 2be:	94 e0       	ldi	r25, 0x04	; 4
	
	struct CAN_MOB can_SHL0_mob;
	can_SHL0_mob.mob_id = 0x410;
 2c0:	9a 83       	std	Y+2, r25	; 0x02
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	1c 82       	std	Y+4, r1	; 0x04
 2c6:	1b 82       	std	Y+3, r1	; 0x03
	can_SHL0_mob.mob_idmask = 0;//sent
 2c8:	1d 82       	std	Y+5, r1	; 0x05
 2ca:	fe 01       	movw	r30, r28
	can_SHL0_mob.mob_number = 0;
 2cc:	36 96       	adiw	r30, 0x06	; 6
	uint8_t SHL0_databytes[8] = {0};
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	df 01       	movw	r26, r30
 2d2:	1d 92       	st	X+, r1
 2d4:	8a 95       	dec	r24
 2d6:	e9 f7       	brne	.-6      	; 0x2d2 <main+0x32>
 2d8:	78 94       	sei
 2da:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sys_tick>
	
	sei();
	
	while (1){
		if((sys_tick - time_old) >= 1){ 
 2de:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sys_tick+0x1>
 2e2:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <sys_tick+0x2>
 2e6:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <sys_tick+0x3>
 2ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <time_old>
 2ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <time_old+0x1>
 2f2:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <time_old+0x2>
 2f6:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <time_old+0x3>
 2fa:	84 17       	cp	r24, r20
 2fc:	95 07       	cpc	r25, r21
 2fe:	a6 07       	cpc	r26, r22
 300:	b7 07       	cpc	r27, r23
 302:	b9 f0       	breq	.+46     	; 0x332 <main+0x92>
 304:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_old>
			time_old = sys_tick;
 308:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <time_old+0x1>
 30c:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <time_old+0x2>
 310:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <time_old+0x3>
 314:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_10_ms>
			time_10_ms++;
 318:	8f 5f       	subi	r24, 0xFF	; 255
 31a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time_10_ms>
 31e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time_50_ms>
			time_50_ms++;
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time_50_ms>
 328:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_100_ms>
			time_100_ms++;  	
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time_100_ms>
 332:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_10_ms>
		}
		if(time_10_ms >= 10)
 336:	8a 30       	cpi	r24, 0x0A	; 10
 338:	18 f0       	brcs	.+6      	; 0x340 <main+0xa0>
 33a:	cd de       	rcall	.-614    	; 0xd6 <adc_start_conversion>
		{
			adc_start_conversion();
 33c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <time_10_ms>
			
			time_10_ms = 0;
 340:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time_50_ms>
		}
		if (time_50_ms >= 50)
 344:	82 33       	cpi	r24, 0x32	; 50
 346:	40 f0       	brcs	.+16     	; 0x358 <main+0xb8>
 348:	be 01       	movw	r22, r28
 34a:	6a 5f       	subi	r22, 0xFA	; 250
		{
			can_tx(&can_SHL0_mob, SHL0_databytes);
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	5f df       	rcall	.-322    	; 0x212 <can_tx>
 354:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time_50_ms>
			
		time_50_ms = 0;
 358:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_100_ms>
		}
		if (time_100_ms >= 100)
 35c:	84 36       	cpi	r24, 0x64	; 100
 35e:	08 f4       	brcc	.+2      	; 0x362 <main+0xc2>
 360:	bc cf       	rjmp	.-136    	; 0x2da <main+0x3a>
 362:	98 b1       	in	r25, 0x08	; 8
		{
		PORTC ^= (1<<PC2);
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	89 27       	eor	r24, r25
		SHL0_databytes[0] = (ADC_brake_Sensor(adc_get_1())		& 0xff)	; //lsb BPS1
 368:	88 b9       	out	0x08, r24	; 8
 36a:	ed de       	rcall	.-550    	; 0x146 <adc_get_1>
 36c:	11 d0       	rcall	.+34     	; 0x390 <ADC_brake_Sensor>
		SHL0_databytes[1] = ((ADC_brake_Sensor(adc_get_1())>>8)	& 0xff)	; //msb BPS1
 36e:	8e 83       	std	Y+6, r24	; 0x06
 370:	ea de       	rcall	.-556    	; 0x146 <adc_get_1>
 372:	0e d0       	rcall	.+28     	; 0x390 <ADC_brake_Sensor>
 374:	9f 83       	std	Y+7, r25	; 0x07
 376:	ec de       	rcall	.-552    	; 0x150 <adc_get_2>
		SHL0_databytes[2] = (ADC_brake_Sensor(adc_get_2())		& 0xff)	; //lsb BPS1
 378:	0b d0       	rcall	.+22     	; 0x390 <ADC_brake_Sensor>
 37a:	88 87       	std	Y+8, r24	; 0x08
 37c:	e9 de       	rcall	.-558    	; 0x150 <adc_get_2>
 37e:	08 d0       	rcall	.+16     	; 0x390 <ADC_brake_Sensor>
 380:	99 87       	std	Y+9, r25	; 0x09
		SHL0_databytes[3] = ((ADC_brake_Sensor(adc_get_2())>>8)	& 0xff)	; //msb BPS1
 382:	1a 86       	std	Y+10, r1	; 0x0a
 384:	1b 86       	std	Y+11, r1	; 0x0b
 386:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <time_100_ms>
 38a:	1d 86       	std	Y+13, r1	; 0x0d
		SHL0_databytes[4] = 0; //SPI getter Wheel Speed lsb
 38c:	1c 86       	std	Y+12, r1	; 0x0c
		SHL0_databytes[5] = 0; //SPI getter Wheel Speed msb
 38e:	a5 cf       	rjmp	.-182    	; 0x2da <main+0x3a>

00000390 <ADC_brake_Sensor>:
	//}
	//return Sensor_Data;
//}

uint16_t ADC_brake_Sensor(uint16_t data){
	uint16_t Sensor_Data = data/10.24;
 390:	bc 01       	movw	r22, r24
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	d3 d0       	rcall	.+422    	; 0x53e <__floatunsisf>
 398:	2a e0       	ldi	r18, 0x0A	; 10
 39a:	37 ed       	ldi	r19, 0xD7	; 215
 39c:	43 e2       	ldi	r20, 0x23	; 35
 39e:	51 e4       	ldi	r21, 0x41	; 65
 3a0:	3a d0       	rcall	.+116    	; 0x416 <__divsf3>
 3a2:	a1 d0       	rcall	.+322    	; 0x4e6 <__fixunssfsi>
	
	
	return Sensor_Data;
 3a4:	cb 01       	movw	r24, r22
 3a6:	08 95       	ret

000003a8 <port_config>:
/*	FUNCTIONS	*/

void port_config(void)
{
	//Fault-LED, Heart-LED
	DDRC |= (1<<PC0) | (1<<PC2);
 3a8:	87 b1       	in	r24, 0x07	; 7
 3aa:	85 60       	ori	r24, 0x05	; 5
 3ac:	87 b9       	out	0x07, r24	; 7
	//CS-TYPK1, CS-TYPK2
	DDRE |= (1<<PE0) | (1<<PE1);
 3ae:	8d b1       	in	r24, 0x0d	; 13
 3b0:	83 60       	ori	r24, 0x03	; 3
 3b2:	8d b9       	out	0x0d, r24	; 13
	//BPS1, BPS2, SA (Steering Angle)
	DDRF &= ~(1<<PF0) & ~(1<<PF1) & ~(1<<PF2);
 3b4:	80 b3       	in	r24, 0x10	; 16
 3b6:	88 7f       	andi	r24, 0xF8	; 248
 3b8:	80 bb       	out	0x10, r24	; 16
 3ba:	08 95       	ret

000003bc <sys_timer_config>:
}

void sys_timer_config(void)
{
	//CTC-Mode, /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
 3bc:	8b e0       	ldi	r24, 0x0B	; 11
 3be:	84 bd       	out	0x24, r24	; 36
	//Compare value for 1ms (Formula in Datasheet)
	OCR0A = 249;
 3c0:	89 ef       	ldi	r24, 0xF9	; 249
 3c2:	87 bd       	out	0x27, r24	; 39
	//Compare Interrupt Enable
	TIMSK0 = 0 | (1<<OCIE0A);
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 3ca:	08 95       	ret

000003cc <__vector_16>:
}

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
	sys_tick++;
 3de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sys_tick>
 3e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sys_tick+0x1>
 3e6:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <sys_tick+0x2>
 3ea:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <sys_tick+0x3>
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	a1 1d       	adc	r26, r1
 3f2:	b1 1d       	adc	r27, r1
 3f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sys_tick>
 3f8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <sys_tick+0x1>
 3fc:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <sys_tick+0x2>
 400:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <sys_tick+0x3>
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <__divsf3>:
 416:	0c d0       	rcall	.+24     	; 0x430 <__divsf3x>
 418:	e6 c0       	rjmp	.+460    	; 0x5e6 <__fp_round>
 41a:	de d0       	rcall	.+444    	; 0x5d8 <__fp_pscB>
 41c:	40 f0       	brcs	.+16     	; 0x42e <__divsf3+0x18>
 41e:	d5 d0       	rcall	.+426    	; 0x5ca <__fp_pscA>
 420:	30 f0       	brcs	.+12     	; 0x42e <__divsf3+0x18>
 422:	21 f4       	brne	.+8      	; 0x42c <__divsf3+0x16>
 424:	5f 3f       	cpi	r21, 0xFF	; 255
 426:	19 f0       	breq	.+6      	; 0x42e <__divsf3+0x18>
 428:	c7 c0       	rjmp	.+398    	; 0x5b8 <__fp_inf>
 42a:	51 11       	cpse	r21, r1
 42c:	10 c1       	rjmp	.+544    	; 0x64e <__fp_szero>
 42e:	ca c0       	rjmp	.+404    	; 0x5c4 <__fp_nan>

00000430 <__divsf3x>:
 430:	eb d0       	rcall	.+470    	; 0x608 <__fp_split3>
 432:	98 f3       	brcs	.-26     	; 0x41a <__divsf3+0x4>

00000434 <__divsf3_pse>:
 434:	99 23       	and	r25, r25
 436:	c9 f3       	breq	.-14     	; 0x42a <__divsf3+0x14>
 438:	55 23       	and	r21, r21
 43a:	b1 f3       	breq	.-20     	; 0x428 <__divsf3+0x12>
 43c:	95 1b       	sub	r25, r21
 43e:	55 0b       	sbc	r21, r21
 440:	bb 27       	eor	r27, r27
 442:	aa 27       	eor	r26, r26
 444:	62 17       	cp	r22, r18
 446:	73 07       	cpc	r23, r19
 448:	84 07       	cpc	r24, r20
 44a:	38 f0       	brcs	.+14     	; 0x45a <__divsf3_pse+0x26>
 44c:	9f 5f       	subi	r25, 0xFF	; 255
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	22 0f       	add	r18, r18
 452:	33 1f       	adc	r19, r19
 454:	44 1f       	adc	r20, r20
 456:	aa 1f       	adc	r26, r26
 458:	a9 f3       	breq	.-22     	; 0x444 <__divsf3_pse+0x10>
 45a:	33 d0       	rcall	.+102    	; 0x4c2 <__divsf3_pse+0x8e>
 45c:	0e 2e       	mov	r0, r30
 45e:	3a f0       	brmi	.+14     	; 0x46e <__divsf3_pse+0x3a>
 460:	e0 e8       	ldi	r30, 0x80	; 128
 462:	30 d0       	rcall	.+96     	; 0x4c4 <__divsf3_pse+0x90>
 464:	91 50       	subi	r25, 0x01	; 1
 466:	50 40       	sbci	r21, 0x00	; 0
 468:	e6 95       	lsr	r30
 46a:	00 1c       	adc	r0, r0
 46c:	ca f7       	brpl	.-14     	; 0x460 <__divsf3_pse+0x2c>
 46e:	29 d0       	rcall	.+82     	; 0x4c2 <__divsf3_pse+0x8e>
 470:	fe 2f       	mov	r31, r30
 472:	27 d0       	rcall	.+78     	; 0x4c2 <__divsf3_pse+0x8e>
 474:	66 0f       	add	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	bb 1f       	adc	r27, r27
 47c:	26 17       	cp	r18, r22
 47e:	37 07       	cpc	r19, r23
 480:	48 07       	cpc	r20, r24
 482:	ab 07       	cpc	r26, r27
 484:	b0 e8       	ldi	r27, 0x80	; 128
 486:	09 f0       	breq	.+2      	; 0x48a <__divsf3_pse+0x56>
 488:	bb 0b       	sbc	r27, r27
 48a:	80 2d       	mov	r24, r0
 48c:	bf 01       	movw	r22, r30
 48e:	ff 27       	eor	r31, r31
 490:	93 58       	subi	r25, 0x83	; 131
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	2a f0       	brmi	.+10     	; 0x4a0 <__divsf3_pse+0x6c>
 496:	9e 3f       	cpi	r25, 0xFE	; 254
 498:	51 05       	cpc	r21, r1
 49a:	68 f0       	brcs	.+26     	; 0x4b6 <__divsf3_pse+0x82>
 49c:	8d c0       	rjmp	.+282    	; 0x5b8 <__fp_inf>
 49e:	d7 c0       	rjmp	.+430    	; 0x64e <__fp_szero>
 4a0:	5f 3f       	cpi	r21, 0xFF	; 255
 4a2:	ec f3       	brlt	.-6      	; 0x49e <__divsf3_pse+0x6a>
 4a4:	98 3e       	cpi	r25, 0xE8	; 232
 4a6:	dc f3       	brlt	.-10     	; 0x49e <__divsf3_pse+0x6a>
 4a8:	86 95       	lsr	r24
 4aa:	77 95       	ror	r23
 4ac:	67 95       	ror	r22
 4ae:	b7 95       	ror	r27
 4b0:	f7 95       	ror	r31
 4b2:	9f 5f       	subi	r25, 0xFF	; 255
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__divsf3_pse+0x74>
 4b6:	88 0f       	add	r24, r24
 4b8:	91 1d       	adc	r25, r1
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	97 f9       	bld	r25, 7
 4c0:	08 95       	ret
 4c2:	e1 e0       	ldi	r30, 0x01	; 1
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	bb 1f       	adc	r27, r27
 4cc:	62 17       	cp	r22, r18
 4ce:	73 07       	cpc	r23, r19
 4d0:	84 07       	cpc	r24, r20
 4d2:	ba 07       	cpc	r27, r26
 4d4:	20 f0       	brcs	.+8      	; 0x4de <__divsf3_pse+0xaa>
 4d6:	62 1b       	sub	r22, r18
 4d8:	73 0b       	sbc	r23, r19
 4da:	84 0b       	sbc	r24, r20
 4dc:	ba 0b       	sbc	r27, r26
 4de:	ee 1f       	adc	r30, r30
 4e0:	88 f7       	brcc	.-30     	; 0x4c4 <__divsf3_pse+0x90>
 4e2:	e0 95       	com	r30
 4e4:	08 95       	ret

000004e6 <__fixunssfsi>:
 4e6:	98 d0       	rcall	.+304    	; 0x618 <__fp_splitA>
 4e8:	88 f0       	brcs	.+34     	; 0x50c <__fixunssfsi+0x26>
 4ea:	9f 57       	subi	r25, 0x7F	; 127
 4ec:	90 f0       	brcs	.+36     	; 0x512 <__fixunssfsi+0x2c>
 4ee:	b9 2f       	mov	r27, r25
 4f0:	99 27       	eor	r25, r25
 4f2:	b7 51       	subi	r27, 0x17	; 23
 4f4:	a0 f0       	brcs	.+40     	; 0x51e <__fixunssfsi+0x38>
 4f6:	d1 f0       	breq	.+52     	; 0x52c <__fixunssfsi+0x46>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	1a f0       	brmi	.+6      	; 0x508 <__fixunssfsi+0x22>
 502:	ba 95       	dec	r27
 504:	c9 f7       	brne	.-14     	; 0x4f8 <__fixunssfsi+0x12>
 506:	12 c0       	rjmp	.+36     	; 0x52c <__fixunssfsi+0x46>
 508:	b1 30       	cpi	r27, 0x01	; 1
 50a:	81 f0       	breq	.+32     	; 0x52c <__fixunssfsi+0x46>
 50c:	9f d0       	rcall	.+318    	; 0x64c <__fp_zero>
 50e:	b1 e0       	ldi	r27, 0x01	; 1
 510:	08 95       	ret
 512:	9c c0       	rjmp	.+312    	; 0x64c <__fp_zero>
 514:	67 2f       	mov	r22, r23
 516:	78 2f       	mov	r23, r24
 518:	88 27       	eor	r24, r24
 51a:	b8 5f       	subi	r27, 0xF8	; 248
 51c:	39 f0       	breq	.+14     	; 0x52c <__fixunssfsi+0x46>
 51e:	b9 3f       	cpi	r27, 0xF9	; 249
 520:	cc f3       	brlt	.-14     	; 0x514 <__fixunssfsi+0x2e>
 522:	86 95       	lsr	r24
 524:	77 95       	ror	r23
 526:	67 95       	ror	r22
 528:	b3 95       	inc	r27
 52a:	d9 f7       	brne	.-10     	; 0x522 <__fixunssfsi+0x3c>
 52c:	3e f4       	brtc	.+14     	; 0x53c <__fixunssfsi+0x56>
 52e:	90 95       	com	r25
 530:	80 95       	com	r24
 532:	70 95       	com	r23
 534:	61 95       	neg	r22
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	8f 4f       	sbci	r24, 0xFF	; 255
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	08 95       	ret

0000053e <__floatunsisf>:
 53e:	e8 94       	clt
 540:	09 c0       	rjmp	.+18     	; 0x554 <__floatsisf+0x12>

00000542 <__floatsisf>:
 542:	97 fb       	bst	r25, 7
 544:	3e f4       	brtc	.+14     	; 0x554 <__floatsisf+0x12>
 546:	90 95       	com	r25
 548:	80 95       	com	r24
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	8f 4f       	sbci	r24, 0xFF	; 255
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	99 23       	and	r25, r25
 556:	a9 f0       	breq	.+42     	; 0x582 <__floatsisf+0x40>
 558:	f9 2f       	mov	r31, r25
 55a:	96 e9       	ldi	r25, 0x96	; 150
 55c:	bb 27       	eor	r27, r27
 55e:	93 95       	inc	r25
 560:	f6 95       	lsr	r31
 562:	87 95       	ror	r24
 564:	77 95       	ror	r23
 566:	67 95       	ror	r22
 568:	b7 95       	ror	r27
 56a:	f1 11       	cpse	r31, r1
 56c:	f8 cf       	rjmp	.-16     	; 0x55e <__floatsisf+0x1c>
 56e:	fa f4       	brpl	.+62     	; 0x5ae <__floatsisf+0x6c>
 570:	bb 0f       	add	r27, r27
 572:	11 f4       	brne	.+4      	; 0x578 <__floatsisf+0x36>
 574:	60 ff       	sbrs	r22, 0
 576:	1b c0       	rjmp	.+54     	; 0x5ae <__floatsisf+0x6c>
 578:	6f 5f       	subi	r22, 0xFF	; 255
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	16 c0       	rjmp	.+44     	; 0x5ae <__floatsisf+0x6c>
 582:	88 23       	and	r24, r24
 584:	11 f0       	breq	.+4      	; 0x58a <__floatsisf+0x48>
 586:	96 e9       	ldi	r25, 0x96	; 150
 588:	11 c0       	rjmp	.+34     	; 0x5ac <__floatsisf+0x6a>
 58a:	77 23       	and	r23, r23
 58c:	21 f0       	breq	.+8      	; 0x596 <__floatsisf+0x54>
 58e:	9e e8       	ldi	r25, 0x8E	; 142
 590:	87 2f       	mov	r24, r23
 592:	76 2f       	mov	r23, r22
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <__floatsisf+0x5e>
 596:	66 23       	and	r22, r22
 598:	71 f0       	breq	.+28     	; 0x5b6 <__floatsisf+0x74>
 59a:	96 e8       	ldi	r25, 0x86	; 134
 59c:	86 2f       	mov	r24, r22
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	2a f0       	brmi	.+10     	; 0x5ae <__floatsisf+0x6c>
 5a4:	9a 95       	dec	r25
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	da f7       	brpl	.-10     	; 0x5a4 <__floatsisf+0x62>
 5ae:	88 0f       	add	r24, r24
 5b0:	96 95       	lsr	r25
 5b2:	87 95       	ror	r24
 5b4:	97 f9       	bld	r25, 7
 5b6:	08 95       	ret

000005b8 <__fp_inf>:
 5b8:	97 f9       	bld	r25, 7
 5ba:	9f 67       	ori	r25, 0x7F	; 127
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	08 95       	ret

000005c4 <__fp_nan>:
 5c4:	9f ef       	ldi	r25, 0xFF	; 255
 5c6:	80 ec       	ldi	r24, 0xC0	; 192
 5c8:	08 95       	ret

000005ca <__fp_pscA>:
 5ca:	00 24       	eor	r0, r0
 5cc:	0a 94       	dec	r0
 5ce:	16 16       	cp	r1, r22
 5d0:	17 06       	cpc	r1, r23
 5d2:	18 06       	cpc	r1, r24
 5d4:	09 06       	cpc	r0, r25
 5d6:	08 95       	ret

000005d8 <__fp_pscB>:
 5d8:	00 24       	eor	r0, r0
 5da:	0a 94       	dec	r0
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	14 06       	cpc	r1, r20
 5e2:	05 06       	cpc	r0, r21
 5e4:	08 95       	ret

000005e6 <__fp_round>:
 5e6:	09 2e       	mov	r0, r25
 5e8:	03 94       	inc	r0
 5ea:	00 0c       	add	r0, r0
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <__fp_round+0xc>
 5ee:	88 23       	and	r24, r24
 5f0:	52 f0       	brmi	.+20     	; 0x606 <__fp_round+0x20>
 5f2:	bb 0f       	add	r27, r27
 5f4:	40 f4       	brcc	.+16     	; 0x606 <__fp_round+0x20>
 5f6:	bf 2b       	or	r27, r31
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__fp_round+0x18>
 5fa:	60 ff       	sbrs	r22, 0
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <__fp_round+0x20>
 5fe:	6f 5f       	subi	r22, 0xFF	; 255
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	08 95       	ret

00000608 <__fp_split3>:
 608:	57 fd       	sbrc	r21, 7
 60a:	90 58       	subi	r25, 0x80	; 128
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	59 f0       	breq	.+22     	; 0x628 <__fp_splitA+0x10>
 612:	5f 3f       	cpi	r21, 0xFF	; 255
 614:	71 f0       	breq	.+28     	; 0x632 <__fp_splitA+0x1a>
 616:	47 95       	ror	r20

00000618 <__fp_splitA>:
 618:	88 0f       	add	r24, r24
 61a:	97 fb       	bst	r25, 7
 61c:	99 1f       	adc	r25, r25
 61e:	61 f0       	breq	.+24     	; 0x638 <__fp_splitA+0x20>
 620:	9f 3f       	cpi	r25, 0xFF	; 255
 622:	79 f0       	breq	.+30     	; 0x642 <__fp_splitA+0x2a>
 624:	87 95       	ror	r24
 626:	08 95       	ret
 628:	12 16       	cp	r1, r18
 62a:	13 06       	cpc	r1, r19
 62c:	14 06       	cpc	r1, r20
 62e:	55 1f       	adc	r21, r21
 630:	f2 cf       	rjmp	.-28     	; 0x616 <__fp_split3+0xe>
 632:	46 95       	lsr	r20
 634:	f1 df       	rcall	.-30     	; 0x618 <__fp_splitA>
 636:	08 c0       	rjmp	.+16     	; 0x648 <__fp_splitA+0x30>
 638:	16 16       	cp	r1, r22
 63a:	17 06       	cpc	r1, r23
 63c:	18 06       	cpc	r1, r24
 63e:	99 1f       	adc	r25, r25
 640:	f1 cf       	rjmp	.-30     	; 0x624 <__fp_splitA+0xc>
 642:	86 95       	lsr	r24
 644:	71 05       	cpc	r23, r1
 646:	61 05       	cpc	r22, r1
 648:	08 94       	sec
 64a:	08 95       	ret

0000064c <__fp_zero>:
 64c:	e8 94       	clt

0000064e <__fp_szero>:
 64e:	bb 27       	eor	r27, r27
 650:	66 27       	eor	r22, r22
 652:	77 27       	eor	r23, r23
 654:	cb 01       	movw	r24, r22
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret

0000065a <_exit>:
 65a:	f8 94       	cli

0000065c <__stop_program>:
 65c:	ff cf       	rjmp	.-2      	; 0x65c <__stop_program>
