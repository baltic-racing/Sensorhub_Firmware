
SHL_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000682  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800102  00800102  00000718  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c2  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5d  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b1  00000000  00000000  00002787  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00003138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ec  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037e  00000000  00000000  000039cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	d7 c1       	rjmp	.+942    	; 0x3f0 <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__vector_25>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 e8       	ldi	r30, 0x82	; 130
  a8:	f6 e0       	ldi	r31, 0x06	; 6
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 30       	cpi	r26, 0x02	; 2
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e0       	ldi	r26, 0x02	; 2
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a6 31       	cpi	r26, 0x16	; 22
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	ef d0       	rcall	.+478    	; 0x2aa <main>
  cc:	d8 c2       	rjmp	.+1456   	; 0x67e <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_config>:


void adc_config()
{
	//AREF = AVCC
	ADMUX = (1<<REFS0);
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//ADC Enable, /16, Interrupt Enable
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8c e8       	ldi	r24, 0x8C	; 140
  dc:	80 83       	st	Z, r24
	//Start Conversion
	ADCSRA |= (1<<ADSC);
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <adc_start_conversion>:
}

void adc_start_conversion()
{
	//Start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC);
  e6:	88 ec       	ldi	r24, 0xC8	; 200
  e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ec:	08 95       	ret

000000ee <__vector_25>:
}

ISR(ADC_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	0b b6       	in	r0, 0x3b	; 59
  fa:	0f 92       	push	r0
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	8f 93       	push	r24
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
 106:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 10a:	e8 2f       	mov	r30, r24
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 112:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e0 5f       	subi	r30, 0xF0	; 240
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	31 83       	std	Z+1, r19	; 0x01
 120:	20 83       	st	Z, r18
	adc_next++;
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if(adc_next == ADCVALUES)
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	11 f4       	brne	.+4      	; 0x130 <__vector_25+0x42>
	{
		adc_next = 0;
 12c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	8f 91       	pop	r24
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0b be       	out	0x3b, r0	; 59
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <adc_get>:

// getter for each adc var
uint16_t adc_get(uint8_t adc)
{
	return adc_values[adc];
 152:	e8 2f       	mov	r30, r24
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 5f       	subi	r30, 0xF0	; 240
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	80 81       	ld	r24, Z
 160:	91 81       	ldd	r25, Z+1	; 0x01
 162:	08 95       	ret

00000164 <can_check_free>:
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
 164:	88 30       	cpi	r24, 0x08	; 8
 166:	78 f0       	brcs	.+30     	; 0x186 <can_check_free+0x22>
 168:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	08 97       	sbiw	r24, 0x08	; 8
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <can_check_free+0x14>
 174:	35 95       	asr	r19
 176:	27 95       	ror	r18
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <can_check_free+0x10>
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	20 ff       	sbrs	r18, 0
 180:	0d c0       	rjmp	.+26     	; 0x19c <can_check_free+0x38>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <can_check_free+0x2e>
 18e:	35 95       	asr	r19
 190:	27 95       	ror	r18
 192:	8a 95       	dec	r24
 194:	e2 f7       	brpl	.-8      	; 0x18e <can_check_free+0x2a>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	20 fd       	sbrc	r18, 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret

0000019e <can_cfg>:
 19e:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	29 c0       	rjmp	.+82     	; 0x1f8 <can_cfg+0x5a>
 1a6:	80 e1       	ldi	r24, 0x10	; 16
 1a8:	48 9f       	mul	r20, r24
 1aa:	90 01       	movw	r18, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	82 2f       	mov	r24, r18
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1b6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 1ba:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1be:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1c2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1c6:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1ca:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1ce:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1d2:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 1d6:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 1da:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <can_cfg+0x54>
 1e2:	98 2f       	mov	r25, r24
 1e4:	92 2b       	or	r25, r18
 1e6:	98 60       	ori	r25, 0x08	; 8
 1e8:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1ec:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	88 30       	cpi	r24, 0x08	; 8
 1f4:	b0 f3       	brcs	.-20     	; 0x1e2 <can_cfg+0x44>
 1f6:	4f 5f       	subi	r20, 0xFF	; 255
 1f8:	4f 30       	cpi	r20, 0x0F	; 15
 1fa:	a8 f2       	brcs	.-86     	; 0x1a6 <can_cfg+0x8>
 1fc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 206:	86 e3       	ldi	r24, 0x36	; 54
 208:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 20c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 210:	e8 ed       	ldi	r30, 0xD8	; 216
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	82 60       	ori	r24, 0x02	; 2
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret

0000021c <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
	
	for(uint8_t byte = 0; byte <8; byte++){
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	10 c0       	rjmp	.+32     	; 0x246 <can_tx+0x2a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 226:	8c 81       	ldd	r24, Y+4	; 0x04
 228:	30 e1       	ldi	r19, 0x10	; 16
 22a:	83 9f       	mul	r24, r19
 22c:	c0 01       	movw	r24, r0
 22e:	11 24       	eor	r1, r1
 230:	82 2b       	or	r24, r18
 232:	88 60       	ori	r24, 0x08	; 8
 234:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANMSG = data[byte];
 238:	fb 01       	movw	r30, r22
 23a:	e2 0f       	add	r30, r18
 23c:	f1 1d       	adc	r31, r1
 23e:	80 81       	ld	r24, Z
 240:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 244:	2f 5f       	subi	r18, 0xFF	; 255
 246:	28 30       	cpi	r18, 0x08	; 8
 248:	70 f3       	brcs	.-36     	; 0x226 <can_tx+0xa>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 24a:	8c 81       	ldd	r24, Y+4	; 0x04
 24c:	82 95       	swap	r24
 24e:	80 7f       	andi	r24, 0xF0	; 240
 250:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 254:	8c 81       	ldd	r24, Y+4	; 0x04
 256:	86 df       	rcall	.-244    	; 0x164 <can_check_free>
 258:	88 23       	and	r24, r24
 25a:	21 f1       	breq	.+72     	; 0x2a4 <can_tx+0x88>
		CANSTMOB = 0;
 25c:	ee ee       	ldi	r30, 0xEE	; 238
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 262:	88 81       	ld	r24, Y
 264:	99 81       	ldd	r25, Y+1	; 0x01
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 276:	88 81       	ld	r24, Y
 278:	82 95       	swap	r24
 27a:	88 0f       	add	r24, r24
 27c:	80 7e       	andi	r24, 0xE0	; 224
 27e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 282:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 286:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 28a:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 28e:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 292:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 296:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 29a:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 29c:	88 e4       	ldi	r24, 0x48	; 72
 29e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 2a2:	10 82       	st	Z, r1
	}
	
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <main>:
uint8_t time_200_ms = 0; 

uint16_t data = 700;
extern uint16_t pressure;

int main(void){
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	2d 97       	sbiw	r28, 0x0d	; 13
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
	/*	Configuration	*/
	port_config();
 2be:	86 d0       	rcall	.+268    	; 0x3cc <port_config>
	sys_timer_config();
 2c0:	8f d0       	rcall	.+286    	; 0x3e0 <sys_timer_config>
	adc_config(); //CHECK WHICH ADC INPUTS CORRESPOND WITH WHAT DATABYTE WE SEND
 2c2:	06 df       	rcall	.-500    	; 0xd0 <adc_config>
 2c4:	6c df       	rcall	.-296    	; 0x19e <can_cfg>
	can_cfg();
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	94 e0       	ldi	r25, 0x04	; 4
	
	struct CAN_MOB can_SHL0_mob;
	can_SHL0_mob.mob_id = 0x410;
 2ca:	9a 83       	std	Y+2, r25	; 0x02
 2cc:	89 83       	std	Y+1, r24	; 0x01
 2ce:	1c 82       	std	Y+4, r1	; 0x04
 2d0:	1b 82       	std	Y+3, r1	; 0x03
	can_SHL0_mob.mob_idmask = 0;//sent
 2d2:	1d 82       	std	Y+5, r1	; 0x05
 2d4:	fe 01       	movw	r30, r28
	can_SHL0_mob.mob_number = 0;
 2d6:	36 96       	adiw	r30, 0x06	; 6
	uint8_t SHL0_databytes[8] = {0};
 2d8:	88 e0       	ldi	r24, 0x08	; 8
 2da:	df 01       	movw	r26, r30
 2dc:	1d 92       	st	X+, r1
 2de:	8a 95       	dec	r24
 2e0:	e9 f7       	brne	.-6      	; 0x2dc <main+0x32>
 2e2:	78 94       	sei
 2e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sys_tick>
	
	sei();
	
	while (1){
		if((sys_tick - time_old) >= 1){ 
 2e8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <sys_tick+0x1>
 2ec:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <sys_tick+0x2>
 2f0:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <sys_tick+0x3>
 2f4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <time_old>
 2f8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <time_old+0x1>
 2fc:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <time_old+0x2>
 300:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <time_old+0x3>
 304:	84 17       	cp	r24, r20
 306:	95 07       	cpc	r25, r21
 308:	a6 07       	cpc	r26, r22
 30a:	b7 07       	cpc	r27, r23
 30c:	c1 f0       	breq	.+48     	; 0x33e <main+0x94>
 30e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <time_old>
			time_old = sys_tick;
 312:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <time_old+0x1>
 316:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <time_old+0x2>
 31a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <time_old+0x3>
 31e:	e3 de       	rcall	.-570    	; 0xe6 <adc_start_conversion>
			adc_start_conversion();
 320:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_10_ms>
			time_10_ms++;
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time_10_ms>
 32a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time_50_ms>
			time_50_ms++;
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <time_50_ms>
 334:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_100_ms>
			time_100_ms++;  	
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time_100_ms>
 33e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_10_ms>
		}
		if(time_10_ms >= 10)
 342:	8a 30       	cpi	r24, 0x0A	; 10
 344:	18 f0       	brcs	.+6      	; 0x34c <main+0xa2>
 346:	cf de       	rcall	.-610    	; 0xe6 <adc_start_conversion>
		{
			adc_start_conversion();
 348:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <time_10_ms>
			
			time_10_ms = 0;
 34c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <time_50_ms>
		}
		if (time_50_ms >= 50)
 350:	82 33       	cpi	r24, 0x32	; 50
 352:	68 f0       	brcs	.+26     	; 0x36e <main+0xc4>
 354:	be 01       	movw	r22, r28
		{
			can_tx(&can_SHL0_mob, SHL0_databytes);
 356:	6a 5f       	subi	r22, 0xFA	; 250
 358:	7f 4f       	sbci	r23, 0xFF	; 255
 35a:	ce 01       	movw	r24, r28
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	5e df       	rcall	.-324    	; 0x21c <can_tx>
 360:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			ADC_brake_Sensor_front(data);
 364:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 368:	22 d0       	rcall	.+68     	; 0x3ae <ADC_brake_Sensor_front>
 36a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <time_50_ms>
			
		time_50_ms = 0;
 36e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_100_ms>
		}
		if (time_100_ms >= 100)
 372:	84 36       	cpi	r24, 0x64	; 100
 374:	08 f4       	brcc	.+2      	; 0x378 <main+0xce>
 376:	b6 cf       	rjmp	.-148    	; 0x2e4 <main+0x3a>
 378:	98 b1       	in	r25, 0x08	; 8
 37a:	84 e0       	ldi	r24, 0x04	; 4
		{
		PORTC ^= (1<<PC2);
 37c:	89 27       	eor	r24, r25
 37e:	88 b9       	out	0x08, r24	; 8
 380:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pressure>
		SHL0_databytes[0] = (pressure		& 0xff)	; //lsb BPS1
 384:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pressure+0x1>
 388:	9e 83       	std	Y+6, r25	; 0x06
		SHL0_databytes[1] = ((pressure>>8)	& 0xff)	; //msb BPS1
 38a:	8f 83       	std	Y+7, r24	; 0x07
		SHL0_databytes[2] = adc_get(2)		& 0xff	; //lsb BPS2
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	e1 de       	rcall	.-574    	; 0x152 <adc_get>
 390:	88 87       	std	Y+8, r24	; 0x08
		SHL0_databytes[3] = (adc_get(2)>>8)	& 0xff	; //msb BPS2
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	de de       	rcall	.-580    	; 0x152 <adc_get>
 396:	99 87       	std	Y+9, r25	; 0x09
		SHL0_databytes[4] = 0; //SPI getter Wheel Speed lsb
 398:	1a 86       	std	Y+10, r1	; 0x0a
		SHL0_databytes[5] = 0; //SPI getter Wheel Speed msb
 39a:	1b 86       	std	Y+11, r1	; 0x0b
		SHL0_databytes[6] = adc_get(3)		& 0xff	; //lsb SA
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	d9 de       	rcall	.-590    	; 0x152 <adc_get>
 3a0:	8c 87       	std	Y+12, r24	; 0x0c
 3a2:	83 e0       	ldi	r24, 0x03	; 3
		SHL0_databytes[7] = (adc_get(3)>>8)	& 0xff	; //msb SA
 3a4:	d6 de       	rcall	.-596    	; 0x152 <adc_get>
 3a6:	9d 87       	std	Y+13, r25	; 0x0d
 3a8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <time_100_ms>
		
		time_100_ms = 0;
 3ac:	9b cf       	rjmp	.-202    	; 0x2e4 <main+0x3a>

000003ae <ADC_brake_Sensor_front>:
#include <avr/io.h>
uint16_t pressure = 0;

void ADC_brake_Sensor_front(uint16_t data){

	pressure = (data/10.24);
 3ae:	bc 01       	movw	r22, r24
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	d6 d0       	rcall	.+428    	; 0x562 <__floatunsisf>
 3b6:	2a e0       	ldi	r18, 0x0A	; 10
 3b8:	37 ed       	ldi	r19, 0xD7	; 215
 3ba:	43 e2       	ldi	r20, 0x23	; 35
 3bc:	51 e4       	ldi	r21, 0x41	; 65
 3be:	3d d0       	rcall	.+122    	; 0x43a <__divsf3>
 3c0:	a4 d0       	rcall	.+328    	; 0x50a <__fixunssfsi>
 3c2:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <pressure+0x1>
 3c6:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <pressure>
 3ca:	08 95       	ret

000003cc <port_config>:
/*	FUNCTIONS	*/

void port_config(void)
{
	//Fault-LED, Heart-LED
	DDRC |= (1<<PC0) | (1<<PC2);
 3cc:	87 b1       	in	r24, 0x07	; 7
 3ce:	85 60       	ori	r24, 0x05	; 5
 3d0:	87 b9       	out	0x07, r24	; 7
	//CS-TYPK1, CS-TYPK2
	DDRE |= (1<<PE0) | (1<<PE1);
 3d2:	8d b1       	in	r24, 0x0d	; 13
 3d4:	83 60       	ori	r24, 0x03	; 3
 3d6:	8d b9       	out	0x0d, r24	; 13
	//BPS1, BPS2, SA (Steering Angle)
	DDRF &= ~(1<<PF0) & ~(1<<PF1) & ~(1<<PF2);
 3d8:	80 b3       	in	r24, 0x10	; 16
 3da:	88 7f       	andi	r24, 0xF8	; 248
 3dc:	80 bb       	out	0x10, r24	; 16
 3de:	08 95       	ret

000003e0 <sys_timer_config>:
}

void sys_timer_config(void)
{
	//CTC-Mode, /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
 3e0:	8b e0       	ldi	r24, 0x0B	; 11
 3e2:	84 bd       	out	0x24, r24	; 36
	//Compare value for 1ms (Formula in Datasheet)
	OCR0A = 249;
 3e4:	89 ef       	ldi	r24, 0xF9	; 249
 3e6:	87 bd       	out	0x27, r24	; 39
	//Compare Interrupt Enable
	TIMSK0 = 0 | (1<<OCIE0A);
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 3ee:	08 95       	ret

000003f0 <__vector_16>:
}

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
	sys_tick++;
 402:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sys_tick>
 406:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <sys_tick+0x1>
 40a:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <sys_tick+0x2>
 40e:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <sys_tick+0x3>
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	a1 1d       	adc	r26, r1
 416:	b1 1d       	adc	r27, r1
 418:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sys_tick>
 41c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <sys_tick+0x1>
 420:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <sys_tick+0x2>
 424:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <sys_tick+0x3>
 428:	bf 91       	pop	r27
 42a:	af 91       	pop	r26
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__divsf3>:
 43a:	0c d0       	rcall	.+24     	; 0x454 <__divsf3x>
 43c:	e6 c0       	rjmp	.+460    	; 0x60a <__fp_round>
 43e:	de d0       	rcall	.+444    	; 0x5fc <__fp_pscB>
 440:	40 f0       	brcs	.+16     	; 0x452 <__divsf3+0x18>
 442:	d5 d0       	rcall	.+426    	; 0x5ee <__fp_pscA>
 444:	30 f0       	brcs	.+12     	; 0x452 <__divsf3+0x18>
 446:	21 f4       	brne	.+8      	; 0x450 <__divsf3+0x16>
 448:	5f 3f       	cpi	r21, 0xFF	; 255
 44a:	19 f0       	breq	.+6      	; 0x452 <__divsf3+0x18>
 44c:	c7 c0       	rjmp	.+398    	; 0x5dc <__fp_inf>
 44e:	51 11       	cpse	r21, r1
 450:	10 c1       	rjmp	.+544    	; 0x672 <__fp_szero>
 452:	ca c0       	rjmp	.+404    	; 0x5e8 <__fp_nan>

00000454 <__divsf3x>:
 454:	eb d0       	rcall	.+470    	; 0x62c <__fp_split3>
 456:	98 f3       	brcs	.-26     	; 0x43e <__divsf3+0x4>

00000458 <__divsf3_pse>:
 458:	99 23       	and	r25, r25
 45a:	c9 f3       	breq	.-14     	; 0x44e <__divsf3+0x14>
 45c:	55 23       	and	r21, r21
 45e:	b1 f3       	breq	.-20     	; 0x44c <__divsf3+0x12>
 460:	95 1b       	sub	r25, r21
 462:	55 0b       	sbc	r21, r21
 464:	bb 27       	eor	r27, r27
 466:	aa 27       	eor	r26, r26
 468:	62 17       	cp	r22, r18
 46a:	73 07       	cpc	r23, r19
 46c:	84 07       	cpc	r24, r20
 46e:	38 f0       	brcs	.+14     	; 0x47e <__divsf3_pse+0x26>
 470:	9f 5f       	subi	r25, 0xFF	; 255
 472:	5f 4f       	sbci	r21, 0xFF	; 255
 474:	22 0f       	add	r18, r18
 476:	33 1f       	adc	r19, r19
 478:	44 1f       	adc	r20, r20
 47a:	aa 1f       	adc	r26, r26
 47c:	a9 f3       	breq	.-22     	; 0x468 <__divsf3_pse+0x10>
 47e:	33 d0       	rcall	.+102    	; 0x4e6 <__divsf3_pse+0x8e>
 480:	0e 2e       	mov	r0, r30
 482:	3a f0       	brmi	.+14     	; 0x492 <__divsf3_pse+0x3a>
 484:	e0 e8       	ldi	r30, 0x80	; 128
 486:	30 d0       	rcall	.+96     	; 0x4e8 <__divsf3_pse+0x90>
 488:	91 50       	subi	r25, 0x01	; 1
 48a:	50 40       	sbci	r21, 0x00	; 0
 48c:	e6 95       	lsr	r30
 48e:	00 1c       	adc	r0, r0
 490:	ca f7       	brpl	.-14     	; 0x484 <__divsf3_pse+0x2c>
 492:	29 d0       	rcall	.+82     	; 0x4e6 <__divsf3_pse+0x8e>
 494:	fe 2f       	mov	r31, r30
 496:	27 d0       	rcall	.+78     	; 0x4e6 <__divsf3_pse+0x8e>
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	bb 1f       	adc	r27, r27
 4a0:	26 17       	cp	r18, r22
 4a2:	37 07       	cpc	r19, r23
 4a4:	48 07       	cpc	r20, r24
 4a6:	ab 07       	cpc	r26, r27
 4a8:	b0 e8       	ldi	r27, 0x80	; 128
 4aa:	09 f0       	breq	.+2      	; 0x4ae <__divsf3_pse+0x56>
 4ac:	bb 0b       	sbc	r27, r27
 4ae:	80 2d       	mov	r24, r0
 4b0:	bf 01       	movw	r22, r30
 4b2:	ff 27       	eor	r31, r31
 4b4:	93 58       	subi	r25, 0x83	; 131
 4b6:	5f 4f       	sbci	r21, 0xFF	; 255
 4b8:	2a f0       	brmi	.+10     	; 0x4c4 <__divsf3_pse+0x6c>
 4ba:	9e 3f       	cpi	r25, 0xFE	; 254
 4bc:	51 05       	cpc	r21, r1
 4be:	68 f0       	brcs	.+26     	; 0x4da <__divsf3_pse+0x82>
 4c0:	8d c0       	rjmp	.+282    	; 0x5dc <__fp_inf>
 4c2:	d7 c0       	rjmp	.+430    	; 0x672 <__fp_szero>
 4c4:	5f 3f       	cpi	r21, 0xFF	; 255
 4c6:	ec f3       	brlt	.-6      	; 0x4c2 <__divsf3_pse+0x6a>
 4c8:	98 3e       	cpi	r25, 0xE8	; 232
 4ca:	dc f3       	brlt	.-10     	; 0x4c2 <__divsf3_pse+0x6a>
 4cc:	86 95       	lsr	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b7 95       	ror	r27
 4d4:	f7 95       	ror	r31
 4d6:	9f 5f       	subi	r25, 0xFF	; 255
 4d8:	c9 f7       	brne	.-14     	; 0x4cc <__divsf3_pse+0x74>
 4da:	88 0f       	add	r24, r24
 4dc:	91 1d       	adc	r25, r1
 4de:	96 95       	lsr	r25
 4e0:	87 95       	ror	r24
 4e2:	97 f9       	bld	r25, 7
 4e4:	08 95       	ret
 4e6:	e1 e0       	ldi	r30, 0x01	; 1
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 1f       	adc	r24, r24
 4ee:	bb 1f       	adc	r27, r27
 4f0:	62 17       	cp	r22, r18
 4f2:	73 07       	cpc	r23, r19
 4f4:	84 07       	cpc	r24, r20
 4f6:	ba 07       	cpc	r27, r26
 4f8:	20 f0       	brcs	.+8      	; 0x502 <__divsf3_pse+0xaa>
 4fa:	62 1b       	sub	r22, r18
 4fc:	73 0b       	sbc	r23, r19
 4fe:	84 0b       	sbc	r24, r20
 500:	ba 0b       	sbc	r27, r26
 502:	ee 1f       	adc	r30, r30
 504:	88 f7       	brcc	.-30     	; 0x4e8 <__divsf3_pse+0x90>
 506:	e0 95       	com	r30
 508:	08 95       	ret

0000050a <__fixunssfsi>:
 50a:	98 d0       	rcall	.+304    	; 0x63c <__fp_splitA>
 50c:	88 f0       	brcs	.+34     	; 0x530 <__fixunssfsi+0x26>
 50e:	9f 57       	subi	r25, 0x7F	; 127
 510:	90 f0       	brcs	.+36     	; 0x536 <__fixunssfsi+0x2c>
 512:	b9 2f       	mov	r27, r25
 514:	99 27       	eor	r25, r25
 516:	b7 51       	subi	r27, 0x17	; 23
 518:	a0 f0       	brcs	.+40     	; 0x542 <__fixunssfsi+0x38>
 51a:	d1 f0       	breq	.+52     	; 0x550 <__fixunssfsi+0x46>
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	88 1f       	adc	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	1a f0       	brmi	.+6      	; 0x52c <__fixunssfsi+0x22>
 526:	ba 95       	dec	r27
 528:	c9 f7       	brne	.-14     	; 0x51c <__fixunssfsi+0x12>
 52a:	12 c0       	rjmp	.+36     	; 0x550 <__fixunssfsi+0x46>
 52c:	b1 30       	cpi	r27, 0x01	; 1
 52e:	81 f0       	breq	.+32     	; 0x550 <__fixunssfsi+0x46>
 530:	9f d0       	rcall	.+318    	; 0x670 <__fp_zero>
 532:	b1 e0       	ldi	r27, 0x01	; 1
 534:	08 95       	ret
 536:	9c c0       	rjmp	.+312    	; 0x670 <__fp_zero>
 538:	67 2f       	mov	r22, r23
 53a:	78 2f       	mov	r23, r24
 53c:	88 27       	eor	r24, r24
 53e:	b8 5f       	subi	r27, 0xF8	; 248
 540:	39 f0       	breq	.+14     	; 0x550 <__fixunssfsi+0x46>
 542:	b9 3f       	cpi	r27, 0xF9	; 249
 544:	cc f3       	brlt	.-14     	; 0x538 <__fixunssfsi+0x2e>
 546:	86 95       	lsr	r24
 548:	77 95       	ror	r23
 54a:	67 95       	ror	r22
 54c:	b3 95       	inc	r27
 54e:	d9 f7       	brne	.-10     	; 0x546 <__fixunssfsi+0x3c>
 550:	3e f4       	brtc	.+14     	; 0x560 <__fixunssfsi+0x56>
 552:	90 95       	com	r25
 554:	80 95       	com	r24
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <__floatunsisf>:
 562:	e8 94       	clt
 564:	09 c0       	rjmp	.+18     	; 0x578 <__floatsisf+0x12>

00000566 <__floatsisf>:
 566:	97 fb       	bst	r25, 7
 568:	3e f4       	brtc	.+14     	; 0x578 <__floatsisf+0x12>
 56a:	90 95       	com	r25
 56c:	80 95       	com	r24
 56e:	70 95       	com	r23
 570:	61 95       	neg	r22
 572:	7f 4f       	sbci	r23, 0xFF	; 255
 574:	8f 4f       	sbci	r24, 0xFF	; 255
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	99 23       	and	r25, r25
 57a:	a9 f0       	breq	.+42     	; 0x5a6 <__floatsisf+0x40>
 57c:	f9 2f       	mov	r31, r25
 57e:	96 e9       	ldi	r25, 0x96	; 150
 580:	bb 27       	eor	r27, r27
 582:	93 95       	inc	r25
 584:	f6 95       	lsr	r31
 586:	87 95       	ror	r24
 588:	77 95       	ror	r23
 58a:	67 95       	ror	r22
 58c:	b7 95       	ror	r27
 58e:	f1 11       	cpse	r31, r1
 590:	f8 cf       	rjmp	.-16     	; 0x582 <__floatsisf+0x1c>
 592:	fa f4       	brpl	.+62     	; 0x5d2 <__floatsisf+0x6c>
 594:	bb 0f       	add	r27, r27
 596:	11 f4       	brne	.+4      	; 0x59c <__floatsisf+0x36>
 598:	60 ff       	sbrs	r22, 0
 59a:	1b c0       	rjmp	.+54     	; 0x5d2 <__floatsisf+0x6c>
 59c:	6f 5f       	subi	r22, 0xFF	; 255
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	8f 4f       	sbci	r24, 0xFF	; 255
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	16 c0       	rjmp	.+44     	; 0x5d2 <__floatsisf+0x6c>
 5a6:	88 23       	and	r24, r24
 5a8:	11 f0       	breq	.+4      	; 0x5ae <__floatsisf+0x48>
 5aa:	96 e9       	ldi	r25, 0x96	; 150
 5ac:	11 c0       	rjmp	.+34     	; 0x5d0 <__floatsisf+0x6a>
 5ae:	77 23       	and	r23, r23
 5b0:	21 f0       	breq	.+8      	; 0x5ba <__floatsisf+0x54>
 5b2:	9e e8       	ldi	r25, 0x8E	; 142
 5b4:	87 2f       	mov	r24, r23
 5b6:	76 2f       	mov	r23, r22
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <__floatsisf+0x5e>
 5ba:	66 23       	and	r22, r22
 5bc:	71 f0       	breq	.+28     	; 0x5da <__floatsisf+0x74>
 5be:	96 e8       	ldi	r25, 0x86	; 134
 5c0:	86 2f       	mov	r24, r22
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	2a f0       	brmi	.+10     	; 0x5d2 <__floatsisf+0x6c>
 5c8:	9a 95       	dec	r25
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	88 1f       	adc	r24, r24
 5d0:	da f7       	brpl	.-10     	; 0x5c8 <__floatsisf+0x62>
 5d2:	88 0f       	add	r24, r24
 5d4:	96 95       	lsr	r25
 5d6:	87 95       	ror	r24
 5d8:	97 f9       	bld	r25, 7
 5da:	08 95       	ret

000005dc <__fp_inf>:
 5dc:	97 f9       	bld	r25, 7
 5de:	9f 67       	ori	r25, 0x7F	; 127
 5e0:	80 e8       	ldi	r24, 0x80	; 128
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	08 95       	ret

000005e8 <__fp_nan>:
 5e8:	9f ef       	ldi	r25, 0xFF	; 255
 5ea:	80 ec       	ldi	r24, 0xC0	; 192
 5ec:	08 95       	ret

000005ee <__fp_pscA>:
 5ee:	00 24       	eor	r0, r0
 5f0:	0a 94       	dec	r0
 5f2:	16 16       	cp	r1, r22
 5f4:	17 06       	cpc	r1, r23
 5f6:	18 06       	cpc	r1, r24
 5f8:	09 06       	cpc	r0, r25
 5fa:	08 95       	ret

000005fc <__fp_pscB>:
 5fc:	00 24       	eor	r0, r0
 5fe:	0a 94       	dec	r0
 600:	12 16       	cp	r1, r18
 602:	13 06       	cpc	r1, r19
 604:	14 06       	cpc	r1, r20
 606:	05 06       	cpc	r0, r21
 608:	08 95       	ret

0000060a <__fp_round>:
 60a:	09 2e       	mov	r0, r25
 60c:	03 94       	inc	r0
 60e:	00 0c       	add	r0, r0
 610:	11 f4       	brne	.+4      	; 0x616 <__fp_round+0xc>
 612:	88 23       	and	r24, r24
 614:	52 f0       	brmi	.+20     	; 0x62a <__fp_round+0x20>
 616:	bb 0f       	add	r27, r27
 618:	40 f4       	brcc	.+16     	; 0x62a <__fp_round+0x20>
 61a:	bf 2b       	or	r27, r31
 61c:	11 f4       	brne	.+4      	; 0x622 <__fp_round+0x18>
 61e:	60 ff       	sbrs	r22, 0
 620:	04 c0       	rjmp	.+8      	; 0x62a <__fp_round+0x20>
 622:	6f 5f       	subi	r22, 0xFF	; 255
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	08 95       	ret

0000062c <__fp_split3>:
 62c:	57 fd       	sbrc	r21, 7
 62e:	90 58       	subi	r25, 0x80	; 128
 630:	44 0f       	add	r20, r20
 632:	55 1f       	adc	r21, r21
 634:	59 f0       	breq	.+22     	; 0x64c <__fp_splitA+0x10>
 636:	5f 3f       	cpi	r21, 0xFF	; 255
 638:	71 f0       	breq	.+28     	; 0x656 <__fp_splitA+0x1a>
 63a:	47 95       	ror	r20

0000063c <__fp_splitA>:
 63c:	88 0f       	add	r24, r24
 63e:	97 fb       	bst	r25, 7
 640:	99 1f       	adc	r25, r25
 642:	61 f0       	breq	.+24     	; 0x65c <__fp_splitA+0x20>
 644:	9f 3f       	cpi	r25, 0xFF	; 255
 646:	79 f0       	breq	.+30     	; 0x666 <__fp_splitA+0x2a>
 648:	87 95       	ror	r24
 64a:	08 95       	ret
 64c:	12 16       	cp	r1, r18
 64e:	13 06       	cpc	r1, r19
 650:	14 06       	cpc	r1, r20
 652:	55 1f       	adc	r21, r21
 654:	f2 cf       	rjmp	.-28     	; 0x63a <__fp_split3+0xe>
 656:	46 95       	lsr	r20
 658:	f1 df       	rcall	.-30     	; 0x63c <__fp_splitA>
 65a:	08 c0       	rjmp	.+16     	; 0x66c <__fp_splitA+0x30>
 65c:	16 16       	cp	r1, r22
 65e:	17 06       	cpc	r1, r23
 660:	18 06       	cpc	r1, r24
 662:	99 1f       	adc	r25, r25
 664:	f1 cf       	rjmp	.-30     	; 0x648 <__fp_splitA+0xc>
 666:	86 95       	lsr	r24
 668:	71 05       	cpc	r23, r1
 66a:	61 05       	cpc	r22, r1
 66c:	08 94       	sec
 66e:	08 95       	ret

00000670 <__fp_zero>:
 670:	e8 94       	clt

00000672 <__fp_szero>:
 672:	bb 27       	eor	r27, r27
 674:	66 27       	eor	r22, r22
 676:	77 27       	eor	r23, r23
 678:	cb 01       	movw	r24, r22
 67a:	97 f9       	bld	r25, 7
 67c:	08 95       	ret

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
