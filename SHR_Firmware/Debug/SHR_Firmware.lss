
SHR_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  000008f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001146  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d57  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a4  00000000  00000000  000028e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00003188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000713  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000549  00000000  00000000  00003a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c2       	rjmp	.+1178   	; 0x4dc <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__vector_25>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	ad 31       	cpi	r26, 0x1D	; 29
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	fe d0       	rcall	.+508    	; 0x2ae <main>
  b2:	e3 c3       	rjmp	.+1990   	; 0x87a <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <adc_config>:


void adc_config()
{
	//AREF = AVCC, PF0
	ADMUX = (1<<REFS0);
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//ADC Enable, /16, Interrupt Enable
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8c e8       	ldi	r24, 0x8C	; 140
  c2:	80 83       	st	Z, r24
	//Start Conversion
	ADCSRA |= (1<<ADSC);
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <adc_start_conversion>:
}

void adc_start_conversion()
{
	//Start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC);
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d2:	08 95       	ret

000000d4 <__vector_25>:
}

ISR(ADC_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	0b b6       	in	r0, 0x3b	; 59
  e0:	0f 92       	push	r0
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 106:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ef 5e       	subi	r30, 0xEF	; 239
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	31 83       	std	Z+1, r19	; 0x01
 114:	20 83       	st	Z, r18
	adc_next++;
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(adc_next == ADCVALUES)
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	11 f4       	brne	.+4      	; 0x124 <__vector_25+0x50>
	{
		adc_next = 0;
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	adc_start_conversion();
 12e:	ce df       	rcall	.-100    	; 0xcc <adc_start_conversion>
	
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0b be       	out	0x3b, r0	; 59
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <adc_get>:

// getter for each adc var
uint16_t adc_get(uint8_t adc)
{
	return adc_values[adc];
 156:	e8 2f       	mov	r30, r24
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	ef 5e       	subi	r30, 0xEF	; 239
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 81       	ld	r24, Z
 164:	91 81       	ldd	r25, Z+1	; 0x01
 166:	08 95       	ret

00000168 <can_check_free>:
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	78 f0       	brcs	.+30     	; 0x18a <can_check_free+0x22>
 16c:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 97       	sbiw	r24, 0x08	; 8
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <can_check_free+0x14>
 178:	35 95       	asr	r19
 17a:	27 95       	ror	r18
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <can_check_free+0x10>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	20 ff       	sbrs	r18, 0
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <can_check_free+0x38>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret
 18a:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <can_check_free+0x2e>
 192:	35 95       	asr	r19
 194:	27 95       	ror	r18
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <can_check_free+0x2a>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	20 fd       	sbrc	r18, 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <can_cfg>:
 1a2:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	29 c0       	rjmp	.+82     	; 0x1fc <can_cfg+0x5a>
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	48 9f       	mul	r20, r24
 1ae:	90 01       	movw	r18, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	82 2f       	mov	r24, r18
 1b4:	88 60       	ori	r24, 0x08	; 8
 1b6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1ba:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 1be:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1c2:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1c6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1ca:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1ce:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1d2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1d6:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 1da:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 1de:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <can_cfg+0x54>
 1e6:	98 2f       	mov	r25, r24
 1e8:	92 2b       	or	r25, r18
 1ea:	98 60       	ori	r25, 0x08	; 8
 1ec:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1f0:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	88 30       	cpi	r24, 0x08	; 8
 1f8:	b0 f3       	brcs	.-20     	; 0x1e6 <can_cfg+0x44>
 1fa:	4f 5f       	subi	r20, 0xFF	; 255
 1fc:	4f 30       	cpi	r20, 0x0F	; 15
 1fe:	a8 f2       	brcs	.-86     	; 0x1aa <can_cfg+0x8>
 200:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 20a:	86 e3       	ldi	r24, 0x36	; 54
 20c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 210:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 214:	e8 ed       	ldi	r30, 0xD8	; 216
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret

00000220 <can_tx>:
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	10 c0       	rjmp	.+32     	; 0x24a <can_tx+0x2a>
 22a:	8c 81       	ldd	r24, Y+4	; 0x04
 22c:	30 e1       	ldi	r19, 0x10	; 16
 22e:	83 9f       	mul	r24, r19
 230:	c0 01       	movw	r24, r0
 232:	11 24       	eor	r1, r1
 234:	82 2b       	or	r24, r18
 236:	88 60       	ori	r24, 0x08	; 8
 238:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 23c:	fb 01       	movw	r30, r22
 23e:	e2 0f       	add	r30, r18
 240:	f1 1d       	adc	r31, r1
 242:	80 81       	ld	r24, Z
 244:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	28 30       	cpi	r18, 0x08	; 8
 24c:	70 f3       	brcs	.-36     	; 0x22a <can_tx+0xa>
 24e:	8c 81       	ldd	r24, Y+4	; 0x04
 250:	82 95       	swap	r24
 252:	80 7f       	andi	r24, 0xF0	; 240
 254:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 258:	8c 81       	ldd	r24, Y+4	; 0x04
 25a:	86 df       	rcall	.-244    	; 0x168 <can_check_free>
 25c:	88 23       	and	r24, r24
 25e:	21 f1       	breq	.+72     	; 0x2a8 <can_tx+0x88>
 260:	ee ee       	ldi	r30, 0xEE	; 238
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	10 82       	st	Z, r1
 266:	88 81       	ld	r24, Y
 268:	99 81       	ldd	r25, Y+1	; 0x01
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 27a:	88 81       	ld	r24, Y
 27c:	82 95       	swap	r24
 27e:	88 0f       	add	r24, r24
 280:	80 7e       	andi	r24, 0xE0	; 224
 282:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 286:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 28a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 28e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 292:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 296:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 29a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 29e:	10 82       	st	Z, r1
 2a0:	88 e4       	ldi	r24, 0x48	; 72
 2a2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 2a6:	10 82       	st	Z, r1
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <main>:

float apps1_percentage;
float apps2_percentage;

int main(void)
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	2d 97       	sbiw	r28, 0x0d	; 13
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
	/*	Configuration	*/
	port_config();
 2c2:	fa d0       	rcall	.+500    	; 0x4b8 <port_config>
	sys_timer_config();
 2c4:	03 d1       	rcall	.+518    	; 0x4cc <sys_timer_config>
	adc_config(); //CHECK WHICH ADC INPUTS CORRESPOND WITH WHAT DATABYTE WE SEND
 2c6:	f7 de       	rcall	.-530    	; 0xb6 <adc_config>
 2c8:	6c df       	rcall	.-296    	; 0x1a2 <can_cfg>
	can_cfg();
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	94 e0       	ldi	r25, 0x04	; 4
	
	struct CAN_MOB can_SHR0_mob;
	can_SHR0_mob.mob_id = 0x400;
 2ce:	9a 83       	std	Y+2, r25	; 0x02
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	1c 82       	std	Y+4, r1	; 0x04
 2d4:	1b 82       	std	Y+3, r1	; 0x03
	can_SHR0_mob.mob_idmask = 0; //send
 2d6:	1d 82       	std	Y+5, r1	; 0x05
 2d8:	fe 01       	movw	r30, r28
	can_SHR0_mob.mob_number = 0;  //IDs might be wrong
 2da:	36 96       	adiw	r30, 0x06	; 6
	uint8_t SHR0_databytes[8] = {0};
 2dc:	88 e0       	ldi	r24, 0x08	; 8
 2de:	df 01       	movw	r26, r30
 2e0:	1d 92       	st	X+, r1
 2e2:	8a 95       	dec	r24
 2e4:	e9 f7       	brne	.-6      	; 0x2e0 <main+0x32>
 2e6:	78 94       	sei
 2e8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <sys_tick>
	sei();
	
	
    while (1) 
    {
		if ((sys_tick - time_old) >= 1)
 2ec:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <sys_tick+0x1>
 2f0:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <sys_tick+0x2>
 2f4:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <sys_tick+0x3>
 2f8:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <time_old>
 2fc:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <time_old+0x1>
 300:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <time_old+0x2>
 304:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <time_old+0x3>
 308:	84 17       	cp	r24, r20
 30a:	95 07       	cpc	r25, r21
 30c:	a6 07       	cpc	r26, r22
 30e:	b7 07       	cpc	r27, r23
 310:	79 f1       	breq	.+94     	; 0x370 <main+0xc2>
 312:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <time_old>
		{
			time_old = sys_tick;
 316:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <time_old+0x1>
 31a:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <time_old+0x2>
 31e:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <time_old+0x3>
 322:	d4 de       	rcall	.-600    	; 0xcc <adc_start_conversion>
			adc_start_conversion();
 324:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_old_10ms>
			time_old_10ms++;
 328:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <time_old_10ms+0x1>
 32c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <time_old_10ms+0x2>
 330:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <time_old_10ms+0x3>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	a1 1d       	adc	r26, r1
 338:	b1 1d       	adc	r27, r1
 33a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time_old_10ms>
 33e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <time_old_10ms+0x1>
 342:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <time_old_10ms+0x2>
 346:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <time_old_10ms+0x3>
 34a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_old_100ms>
			time_old_100ms++;
 34e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <time_old_100ms+0x1>
 352:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <time_old_100ms+0x2>
 356:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <time_old_100ms+0x3>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	a1 1d       	adc	r26, r1
 35e:	b1 1d       	adc	r27, r1
 360:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time_old_100ms>
 364:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <time_old_100ms+0x1>
 368:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <time_old_100ms+0x2>
 36c:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <time_old_100ms+0x3>
 370:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_old_10ms>
		}
		
		if (TIME_PASSED_10_MS)
 374:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <time_old_10ms+0x1>
 378:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <time_old_10ms+0x2>
 37c:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <time_old_10ms+0x3>
 380:	0a 97       	sbiw	r24, 0x0a	; 10
 382:	a1 05       	cpc	r26, r1
 384:	b1 05       	cpc	r27, r1
 386:	08 f4       	brcc	.+2      	; 0x38a <main+0xdc>
 388:	44 c0       	rjmp	.+136    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 38a:	80 e0       	ldi	r24, 0x00	; 0
		{
			apps1_percentage = update_apps_percentage((float)adc_get(0), 1);
 38c:	e4 de       	rcall	.-568    	; 0x156 <adc_get>
 38e:	bc 01       	movw	r22, r24
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	5d d1       	rcall	.+698    	; 0x650 <__floatunsisf>
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	57 d0       	rcall	.+174    	; 0x448 <update_apps_percentage>
 39a:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <apps1_percentage>
 39e:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <apps1_percentage+0x1>
 3a2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <apps1_percentage+0x2>
 3a6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <apps1_percentage+0x3>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
			apps2_percentage = update_apps_percentage((float)adc_get(1), 2);
 3ac:	d4 de       	rcall	.-600    	; 0x156 <adc_get>
 3ae:	bc 01       	movw	r22, r24
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	4d d1       	rcall	.+666    	; 0x650 <__floatunsisf>
 3b6:	42 e0       	ldi	r20, 0x02	; 2
 3b8:	47 d0       	rcall	.+142    	; 0x448 <update_apps_percentage>
 3ba:	6b 01       	movw	r12, r22
 3bc:	7c 01       	movw	r14, r24
 3be:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <apps2_percentage>
 3c2:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <apps2_percentage+0x1>
 3c6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <apps2_percentage+0x2>
 3ca:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <apps2_percentage+0x3>
 3ce:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <apps1_percentage>
 3d2:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <apps1_percentage+0x1>
			
			SHR0_databytes[0] =  (uint16_t)apps1_percentage;			//lsb APPS1
 3d6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <apps1_percentage+0x2>
 3da:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <apps1_percentage+0x3>
 3de:	0c d1       	rcall	.+536    	; 0x5f8 <__fixunssfsi>
 3e0:	6e 83       	std	Y+6, r22	; 0x06
 3e2:	7f 83       	std	Y+7, r23	; 0x07
 3e4:	c7 01       	movw	r24, r14
 3e6:	b6 01       	movw	r22, r12
			SHR0_databytes[1] = ((uint16_t)apps1_percentage >> 8);		//msb APPS1
 3e8:	07 d1       	rcall	.+526    	; 0x5f8 <__fixunssfsi>
			SHR0_databytes[2] =  (uint16_t)apps2_percentage;			//lsb APPS2
 3ea:	68 87       	std	Y+8, r22	; 0x08
 3ec:	79 87       	std	Y+9, r23	; 0x09
 3ee:	1a 86       	std	Y+10, r1	; 0x0a
 3f0:	1b 86       	std	Y+11, r1	; 0x0b
			SHR0_databytes[3] = ((uint16_t)apps2_percentage >> 8);		//msb APPS2
 3f2:	1c 86       	std	Y+12, r1	; 0x0c
			SHR0_databytes[4] = 0; //SPI getter Wheel Speed R lsb
 3f4:	1d 86       	std	Y+13, r1	; 0x0d
			SHR0_databytes[5] = 0; //SPI getter Wheel Speed R msb
 3f6:	be 01       	movw	r22, r28
			SHR0_databytes[6] = 0;
 3f8:	6a 5f       	subi	r22, 0xFA	; 250
			SHR0_databytes[7] = 0;
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
			
			can_tx(&can_SHR0_mob, SHR0_databytes);
 3fc:	ce 01       	movw	r24, r28
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	0f df       	rcall	.-482    	; 0x220 <can_tx>
 402:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <time_old_10ms>
 406:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <time_old_10ms+0x1>
			time_old_10ms = 0;
 40a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <time_old_10ms+0x2>
 40e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <time_old_10ms+0x3>
 412:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_old_100ms>
 416:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <time_old_100ms+0x1>
		}
		
		if (TIME_PASSED_100_MS)
 41a:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <time_old_100ms+0x2>
 41e:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <time_old_100ms+0x3>
 422:	84 36       	cpi	r24, 0x64	; 100
 424:	91 05       	cpc	r25, r1
 426:	a1 05       	cpc	r26, r1
 428:	b1 05       	cpc	r27, r1
 42a:	08 f4       	brcc	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	5d cf       	rjmp	.-326    	; 0x2e8 <main+0x3a>
 42e:	98 b1       	in	r25, 0x08	; 8
 430:	84 e0       	ldi	r24, 0x04	; 4
 432:	89 27       	eor	r24, r25
 434:	88 b9       	out	0x08, r24	; 8
		{
			PORTC ^= (1<<PC2);
 436:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <time_old_100ms>
 43a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time_old_100ms+0x1>
			time_old_100ms = 0;
 43e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <time_old_100ms+0x2>
 442:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <time_old_100ms+0x3>
 446:	50 cf       	rjmp	.-352    	; 0x2e8 <main+0x3a>

00000448 <update_apps_percentage>:
#include "sensor_functions.h"

/*	Functions	*/

float update_apps_percentage(float apps_adc, uint8_t apps_sensor)
{
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
	float apps_value = 0;
	switch (apps_sensor)
 450:	41 30       	cpi	r20, 0x01	; 1
 452:	19 f0       	breq	.+6      	; 0x45a <update_apps_percentage+0x12>
 454:	42 30       	cpi	r20, 0x02	; 2
 456:	71 f0       	breq	.+28     	; 0x474 <update_apps_percentage+0x2c>
 458:	1a c0       	rjmp	.+52     	; 0x48e <update_apps_percentage+0x46>
	{
		case 1: {apps_value = (1000/(float)(APPS1_MAX - APPS1_MIN)) * (apps_adc - (float)APPS1_MIN); break;}
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e8       	ldi	r19, 0x80	; 128
 45e:	47 e6       	ldi	r20, 0x67	; 103
 460:	54 e4       	ldi	r21, 0x44	; 68
 462:	61 d0       	rcall	.+194    	; 0x526 <__subsf3>
 464:	21 ee       	ldi	r18, 0xE1	; 225
 466:	36 e9       	ldi	r19, 0x96	; 150
 468:	4a e1       	ldi	r20, 0x1A	; 26
 46a:	50 ec       	ldi	r21, 0xC0	; 192
 46c:	a3 d1       	rcall	.+838    	; 0x7b4 <__mulsf3>
 46e:	6b 01       	movw	r12, r22
 470:	7c 01       	movw	r14, r24
 472:	10 c0       	rjmp	.+32     	; 0x494 <update_apps_percentage+0x4c>
		case 2: {apps_value = (1000/(float)(APPS2_MAX - APPS2_MIN)) * (apps_adc - (float)APPS2_MIN); break;}
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	4f e7       	ldi	r20, 0x7F	; 127
 47a:	54 e4       	ldi	r21, 0x44	; 68
 47c:	54 d0       	rcall	.+168    	; 0x526 <__subsf3>
 47e:	20 ea       	ldi	r18, 0xA0	; 160
 480:	3a ef       	ldi	r19, 0xFA	; 250
 482:	47 e2       	ldi	r20, 0x27	; 39
 484:	50 ec       	ldi	r21, 0xC0	; 192
 486:	96 d1       	rcall	.+812    	; 0x7b4 <__mulsf3>
 488:	6b 01       	movw	r12, r22
 48a:	7c 01       	movw	r14, r24
 48c:	03 c0       	rjmp	.+6      	; 0x494 <update_apps_percentage+0x4c>

/*	Functions	*/

float update_apps_percentage(float apps_adc, uint8_t apps_sensor)
{
	float apps_value = 0;
 48e:	c1 2c       	mov	r12, r1
 490:	d1 2c       	mov	r13, r1
 492:	76 01       	movw	r14, r12
	{
		case 1: {apps_value = (1000/(float)(APPS1_MAX - APPS1_MIN)) * (apps_adc - (float)APPS1_MIN); break;}
		case 2: {apps_value = (1000/(float)(APPS2_MAX - APPS2_MIN)) * (apps_adc - (float)APPS2_MIN); break;}
	}
		
	if(apps_value < 0)
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	a9 01       	movw	r20, r18
 49a:	c7 01       	movw	r24, r14
 49c:	b6 01       	movw	r22, r12
 49e:	a8 d0       	rcall	.+336    	; 0x5f0 <__cmpsf2>
 4a0:	88 23       	and	r24, r24
 4a2:	1c f4       	brge	.+6      	; 0x4aa <update_apps_percentage+0x62>
	{
		apps_value = 0;
 4a4:	c1 2c       	mov	r12, r1
 4a6:	d1 2c       	mov	r13, r1
 4a8:	76 01       	movw	r14, r12
	}

	return apps_value;
 4aa:	c7 01       	movw	r24, r14
 4ac:	b6 01       	movw	r22, r12
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	df 90       	pop	r13
 4b4:	cf 90       	pop	r12
 4b6:	08 95       	ret

000004b8 <port_config>:
/*	FUNCTIONS	*/

void port_config(void)
{
	//Fault-LED, Heart-LED
	DDRC |= (1<<PC0) | (1<<PC2);
 4b8:	87 b1       	in	r24, 0x07	; 7
 4ba:	85 60       	ori	r24, 0x05	; 5
 4bc:	87 b9       	out	0x07, r24	; 7
	//CS-TYPK1, CS-TYPK2
	DDRE |= (1<<PE0) | (1<<PE1);
 4be:	8d b1       	in	r24, 0x0d	; 13
 4c0:	83 60       	ori	r24, 0x03	; 3
 4c2:	8d b9       	out	0x0d, r24	; 13
	//APPS1, APPS2
	DDRF &= ~(1<<PF0) & ~(1<<PF1);
 4c4:	80 b3       	in	r24, 0x10	; 16
 4c6:	8c 7f       	andi	r24, 0xFC	; 252
 4c8:	80 bb       	out	0x10, r24	; 16
 4ca:	08 95       	ret

000004cc <sys_timer_config>:
}

void sys_timer_config(void)
{
	//CTC-Mode, /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
 4cc:	8b e0       	ldi	r24, 0x0B	; 11
 4ce:	84 bd       	out	0x24, r24	; 36
	//Compare value for 1ms (Formula in Datasheet)
	OCR0A = 249;
 4d0:	89 ef       	ldi	r24, 0xF9	; 249
 4d2:	87 bd       	out	0x27, r24	; 39
	//Compare Interrupt Enable
	TIMSK0 = 0 | (1<<OCIE0A);
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 4da:	08 95       	ret

000004dc <__vector_16>:
}

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
	sys_tick++;
 4ee:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <sys_tick>
 4f2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <sys_tick+0x1>
 4f6:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <sys_tick+0x2>
 4fa:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <sys_tick+0x3>
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	a1 1d       	adc	r26, r1
 502:	b1 1d       	adc	r27, r1
 504:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <sys_tick>
 508:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <sys_tick+0x1>
 50c:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <sys_tick+0x2>
 510:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <sys_tick+0x3>
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <__subsf3>:
 526:	50 58       	subi	r21, 0x80	; 128

00000528 <__addsf3>:
 528:	bb 27       	eor	r27, r27
 52a:	aa 27       	eor	r26, r26
 52c:	0e d0       	rcall	.+28     	; 0x54a <__addsf3x>
 52e:	08 c1       	rjmp	.+528    	; 0x740 <__fp_round>
 530:	f9 d0       	rcall	.+498    	; 0x724 <__fp_pscA>
 532:	30 f0       	brcs	.+12     	; 0x540 <__addsf3+0x18>
 534:	fe d0       	rcall	.+508    	; 0x732 <__fp_pscB>
 536:	20 f0       	brcs	.+8      	; 0x540 <__addsf3+0x18>
 538:	31 f4       	brne	.+12     	; 0x546 <__addsf3+0x1e>
 53a:	9f 3f       	cpi	r25, 0xFF	; 255
 53c:	11 f4       	brne	.+4      	; 0x542 <__addsf3+0x1a>
 53e:	1e f4       	brtc	.+6      	; 0x546 <__addsf3+0x1e>
 540:	ee c0       	rjmp	.+476    	; 0x71e <__fp_nan>
 542:	0e f4       	brtc	.+2      	; 0x546 <__addsf3+0x1e>
 544:	e0 95       	com	r30
 546:	e7 fb       	bst	r30, 7
 548:	e4 c0       	rjmp	.+456    	; 0x712 <__fp_inf>

0000054a <__addsf3x>:
 54a:	e9 2f       	mov	r30, r25
 54c:	0a d1       	rcall	.+532    	; 0x762 <__fp_split3>
 54e:	80 f3       	brcs	.-32     	; 0x530 <__addsf3+0x8>
 550:	ba 17       	cp	r27, r26
 552:	62 07       	cpc	r22, r18
 554:	73 07       	cpc	r23, r19
 556:	84 07       	cpc	r24, r20
 558:	95 07       	cpc	r25, r21
 55a:	18 f0       	brcs	.+6      	; 0x562 <__addsf3x+0x18>
 55c:	71 f4       	brne	.+28     	; 0x57a <__addsf3x+0x30>
 55e:	9e f5       	brtc	.+102    	; 0x5c6 <__addsf3x+0x7c>
 560:	22 c1       	rjmp	.+580    	; 0x7a6 <__fp_zero>
 562:	0e f4       	brtc	.+2      	; 0x566 <__addsf3x+0x1c>
 564:	e0 95       	com	r30
 566:	0b 2e       	mov	r0, r27
 568:	ba 2f       	mov	r27, r26
 56a:	a0 2d       	mov	r26, r0
 56c:	0b 01       	movw	r0, r22
 56e:	b9 01       	movw	r22, r18
 570:	90 01       	movw	r18, r0
 572:	0c 01       	movw	r0, r24
 574:	ca 01       	movw	r24, r20
 576:	a0 01       	movw	r20, r0
 578:	11 24       	eor	r1, r1
 57a:	ff 27       	eor	r31, r31
 57c:	59 1b       	sub	r21, r25
 57e:	99 f0       	breq	.+38     	; 0x5a6 <__addsf3x+0x5c>
 580:	59 3f       	cpi	r21, 0xF9	; 249
 582:	50 f4       	brcc	.+20     	; 0x598 <__addsf3x+0x4e>
 584:	50 3e       	cpi	r21, 0xE0	; 224
 586:	68 f1       	brcs	.+90     	; 0x5e2 <__addsf3x+0x98>
 588:	1a 16       	cp	r1, r26
 58a:	f0 40       	sbci	r31, 0x00	; 0
 58c:	a2 2f       	mov	r26, r18
 58e:	23 2f       	mov	r18, r19
 590:	34 2f       	mov	r19, r20
 592:	44 27       	eor	r20, r20
 594:	58 5f       	subi	r21, 0xF8	; 248
 596:	f3 cf       	rjmp	.-26     	; 0x57e <__addsf3x+0x34>
 598:	46 95       	lsr	r20
 59a:	37 95       	ror	r19
 59c:	27 95       	ror	r18
 59e:	a7 95       	ror	r26
 5a0:	f0 40       	sbci	r31, 0x00	; 0
 5a2:	53 95       	inc	r21
 5a4:	c9 f7       	brne	.-14     	; 0x598 <__addsf3x+0x4e>
 5a6:	7e f4       	brtc	.+30     	; 0x5c6 <__addsf3x+0x7c>
 5a8:	1f 16       	cp	r1, r31
 5aa:	ba 0b       	sbc	r27, r26
 5ac:	62 0b       	sbc	r22, r18
 5ae:	73 0b       	sbc	r23, r19
 5b0:	84 0b       	sbc	r24, r20
 5b2:	ba f0       	brmi	.+46     	; 0x5e2 <__addsf3x+0x98>
 5b4:	91 50       	subi	r25, 0x01	; 1
 5b6:	a1 f0       	breq	.+40     	; 0x5e0 <__addsf3x+0x96>
 5b8:	ff 0f       	add	r31, r31
 5ba:	bb 1f       	adc	r27, r27
 5bc:	66 1f       	adc	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	88 1f       	adc	r24, r24
 5c2:	c2 f7       	brpl	.-16     	; 0x5b4 <__addsf3x+0x6a>
 5c4:	0e c0       	rjmp	.+28     	; 0x5e2 <__addsf3x+0x98>
 5c6:	ba 0f       	add	r27, r26
 5c8:	62 1f       	adc	r22, r18
 5ca:	73 1f       	adc	r23, r19
 5cc:	84 1f       	adc	r24, r20
 5ce:	48 f4       	brcc	.+18     	; 0x5e2 <__addsf3x+0x98>
 5d0:	87 95       	ror	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b7 95       	ror	r27
 5d8:	f7 95       	ror	r31
 5da:	9e 3f       	cpi	r25, 0xFE	; 254
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <__addsf3x+0x96>
 5de:	b3 cf       	rjmp	.-154    	; 0x546 <__addsf3+0x1e>
 5e0:	93 95       	inc	r25
 5e2:	88 0f       	add	r24, r24
 5e4:	08 f0       	brcs	.+2      	; 0x5e8 <__addsf3x+0x9e>
 5e6:	99 27       	eor	r25, r25
 5e8:	ee 0f       	add	r30, r30
 5ea:	97 95       	ror	r25
 5ec:	87 95       	ror	r24
 5ee:	08 95       	ret

000005f0 <__cmpsf2>:
 5f0:	6c d0       	rcall	.+216    	; 0x6ca <__fp_cmp>
 5f2:	08 f4       	brcc	.+2      	; 0x5f6 <__cmpsf2+0x6>
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	08 95       	ret

000005f8 <__fixunssfsi>:
 5f8:	bc d0       	rcall	.+376    	; 0x772 <__fp_splitA>
 5fa:	88 f0       	brcs	.+34     	; 0x61e <__fixunssfsi+0x26>
 5fc:	9f 57       	subi	r25, 0x7F	; 127
 5fe:	90 f0       	brcs	.+36     	; 0x624 <__fixunssfsi+0x2c>
 600:	b9 2f       	mov	r27, r25
 602:	99 27       	eor	r25, r25
 604:	b7 51       	subi	r27, 0x17	; 23
 606:	a0 f0       	brcs	.+40     	; 0x630 <__fixunssfsi+0x38>
 608:	d1 f0       	breq	.+52     	; 0x63e <__fixunssfsi+0x46>
 60a:	66 0f       	add	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	1a f0       	brmi	.+6      	; 0x61a <__fixunssfsi+0x22>
 614:	ba 95       	dec	r27
 616:	c9 f7       	brne	.-14     	; 0x60a <__fixunssfsi+0x12>
 618:	12 c0       	rjmp	.+36     	; 0x63e <__fixunssfsi+0x46>
 61a:	b1 30       	cpi	r27, 0x01	; 1
 61c:	81 f0       	breq	.+32     	; 0x63e <__fixunssfsi+0x46>
 61e:	c3 d0       	rcall	.+390    	; 0x7a6 <__fp_zero>
 620:	b1 e0       	ldi	r27, 0x01	; 1
 622:	08 95       	ret
 624:	c0 c0       	rjmp	.+384    	; 0x7a6 <__fp_zero>
 626:	67 2f       	mov	r22, r23
 628:	78 2f       	mov	r23, r24
 62a:	88 27       	eor	r24, r24
 62c:	b8 5f       	subi	r27, 0xF8	; 248
 62e:	39 f0       	breq	.+14     	; 0x63e <__fixunssfsi+0x46>
 630:	b9 3f       	cpi	r27, 0xF9	; 249
 632:	cc f3       	brlt	.-14     	; 0x626 <__fixunssfsi+0x2e>
 634:	86 95       	lsr	r24
 636:	77 95       	ror	r23
 638:	67 95       	ror	r22
 63a:	b3 95       	inc	r27
 63c:	d9 f7       	brne	.-10     	; 0x634 <__fixunssfsi+0x3c>
 63e:	3e f4       	brtc	.+14     	; 0x64e <__fixunssfsi+0x56>
 640:	90 95       	com	r25
 642:	80 95       	com	r24
 644:	70 95       	com	r23
 646:	61 95       	neg	r22
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	08 95       	ret

00000650 <__floatunsisf>:
 650:	e8 94       	clt
 652:	09 c0       	rjmp	.+18     	; 0x666 <__floatsisf+0x12>

00000654 <__floatsisf>:
 654:	97 fb       	bst	r25, 7
 656:	3e f4       	brtc	.+14     	; 0x666 <__floatsisf+0x12>
 658:	90 95       	com	r25
 65a:	80 95       	com	r24
 65c:	70 95       	com	r23
 65e:	61 95       	neg	r22
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	8f 4f       	sbci	r24, 0xFF	; 255
 664:	9f 4f       	sbci	r25, 0xFF	; 255
 666:	99 23       	and	r25, r25
 668:	a9 f0       	breq	.+42     	; 0x694 <__floatsisf+0x40>
 66a:	f9 2f       	mov	r31, r25
 66c:	96 e9       	ldi	r25, 0x96	; 150
 66e:	bb 27       	eor	r27, r27
 670:	93 95       	inc	r25
 672:	f6 95       	lsr	r31
 674:	87 95       	ror	r24
 676:	77 95       	ror	r23
 678:	67 95       	ror	r22
 67a:	b7 95       	ror	r27
 67c:	f1 11       	cpse	r31, r1
 67e:	f8 cf       	rjmp	.-16     	; 0x670 <__floatsisf+0x1c>
 680:	fa f4       	brpl	.+62     	; 0x6c0 <__floatsisf+0x6c>
 682:	bb 0f       	add	r27, r27
 684:	11 f4       	brne	.+4      	; 0x68a <__floatsisf+0x36>
 686:	60 ff       	sbrs	r22, 0
 688:	1b c0       	rjmp	.+54     	; 0x6c0 <__floatsisf+0x6c>
 68a:	6f 5f       	subi	r22, 0xFF	; 255
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	16 c0       	rjmp	.+44     	; 0x6c0 <__floatsisf+0x6c>
 694:	88 23       	and	r24, r24
 696:	11 f0       	breq	.+4      	; 0x69c <__floatsisf+0x48>
 698:	96 e9       	ldi	r25, 0x96	; 150
 69a:	11 c0       	rjmp	.+34     	; 0x6be <__floatsisf+0x6a>
 69c:	77 23       	and	r23, r23
 69e:	21 f0       	breq	.+8      	; 0x6a8 <__floatsisf+0x54>
 6a0:	9e e8       	ldi	r25, 0x8E	; 142
 6a2:	87 2f       	mov	r24, r23
 6a4:	76 2f       	mov	r23, r22
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <__floatsisf+0x5e>
 6a8:	66 23       	and	r22, r22
 6aa:	71 f0       	breq	.+28     	; 0x6c8 <__floatsisf+0x74>
 6ac:	96 e8       	ldi	r25, 0x86	; 134
 6ae:	86 2f       	mov	r24, r22
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	2a f0       	brmi	.+10     	; 0x6c0 <__floatsisf+0x6c>
 6b6:	9a 95       	dec	r25
 6b8:	66 0f       	add	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	88 1f       	adc	r24, r24
 6be:	da f7       	brpl	.-10     	; 0x6b6 <__floatsisf+0x62>
 6c0:	88 0f       	add	r24, r24
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	97 f9       	bld	r25, 7
 6c8:	08 95       	ret

000006ca <__fp_cmp>:
 6ca:	99 0f       	add	r25, r25
 6cc:	00 08       	sbc	r0, r0
 6ce:	55 0f       	add	r21, r21
 6d0:	aa 0b       	sbc	r26, r26
 6d2:	e0 e8       	ldi	r30, 0x80	; 128
 6d4:	fe ef       	ldi	r31, 0xFE	; 254
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	e8 07       	cpc	r30, r24
 6dc:	f9 07       	cpc	r31, r25
 6de:	c0 f0       	brcs	.+48     	; 0x710 <__fp_cmp+0x46>
 6e0:	12 16       	cp	r1, r18
 6e2:	13 06       	cpc	r1, r19
 6e4:	e4 07       	cpc	r30, r20
 6e6:	f5 07       	cpc	r31, r21
 6e8:	98 f0       	brcs	.+38     	; 0x710 <__fp_cmp+0x46>
 6ea:	62 1b       	sub	r22, r18
 6ec:	73 0b       	sbc	r23, r19
 6ee:	84 0b       	sbc	r24, r20
 6f0:	95 0b       	sbc	r25, r21
 6f2:	39 f4       	brne	.+14     	; 0x702 <__fp_cmp+0x38>
 6f4:	0a 26       	eor	r0, r26
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_cmp+0x46>
 6f8:	23 2b       	or	r18, r19
 6fa:	24 2b       	or	r18, r20
 6fc:	25 2b       	or	r18, r21
 6fe:	21 f4       	brne	.+8      	; 0x708 <__fp_cmp+0x3e>
 700:	08 95       	ret
 702:	0a 26       	eor	r0, r26
 704:	09 f4       	brne	.+2      	; 0x708 <__fp_cmp+0x3e>
 706:	a1 40       	sbci	r26, 0x01	; 1
 708:	a6 95       	lsr	r26
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	81 1d       	adc	r24, r1
 70e:	81 1d       	adc	r24, r1
 710:	08 95       	ret

00000712 <__fp_inf>:
 712:	97 f9       	bld	r25, 7
 714:	9f 67       	ori	r25, 0x7F	; 127
 716:	80 e8       	ldi	r24, 0x80	; 128
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	08 95       	ret

0000071e <__fp_nan>:
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	80 ec       	ldi	r24, 0xC0	; 192
 722:	08 95       	ret

00000724 <__fp_pscA>:
 724:	00 24       	eor	r0, r0
 726:	0a 94       	dec	r0
 728:	16 16       	cp	r1, r22
 72a:	17 06       	cpc	r1, r23
 72c:	18 06       	cpc	r1, r24
 72e:	09 06       	cpc	r0, r25
 730:	08 95       	ret

00000732 <__fp_pscB>:
 732:	00 24       	eor	r0, r0
 734:	0a 94       	dec	r0
 736:	12 16       	cp	r1, r18
 738:	13 06       	cpc	r1, r19
 73a:	14 06       	cpc	r1, r20
 73c:	05 06       	cpc	r0, r21
 73e:	08 95       	ret

00000740 <__fp_round>:
 740:	09 2e       	mov	r0, r25
 742:	03 94       	inc	r0
 744:	00 0c       	add	r0, r0
 746:	11 f4       	brne	.+4      	; 0x74c <__fp_round+0xc>
 748:	88 23       	and	r24, r24
 74a:	52 f0       	brmi	.+20     	; 0x760 <__fp_round+0x20>
 74c:	bb 0f       	add	r27, r27
 74e:	40 f4       	brcc	.+16     	; 0x760 <__fp_round+0x20>
 750:	bf 2b       	or	r27, r31
 752:	11 f4       	brne	.+4      	; 0x758 <__fp_round+0x18>
 754:	60 ff       	sbrs	r22, 0
 756:	04 c0       	rjmp	.+8      	; 0x760 <__fp_round+0x20>
 758:	6f 5f       	subi	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <__fp_split3>:
 762:	57 fd       	sbrc	r21, 7
 764:	90 58       	subi	r25, 0x80	; 128
 766:	44 0f       	add	r20, r20
 768:	55 1f       	adc	r21, r21
 76a:	59 f0       	breq	.+22     	; 0x782 <__fp_splitA+0x10>
 76c:	5f 3f       	cpi	r21, 0xFF	; 255
 76e:	71 f0       	breq	.+28     	; 0x78c <__fp_splitA+0x1a>
 770:	47 95       	ror	r20

00000772 <__fp_splitA>:
 772:	88 0f       	add	r24, r24
 774:	97 fb       	bst	r25, 7
 776:	99 1f       	adc	r25, r25
 778:	61 f0       	breq	.+24     	; 0x792 <__fp_splitA+0x20>
 77a:	9f 3f       	cpi	r25, 0xFF	; 255
 77c:	79 f0       	breq	.+30     	; 0x79c <__fp_splitA+0x2a>
 77e:	87 95       	ror	r24
 780:	08 95       	ret
 782:	12 16       	cp	r1, r18
 784:	13 06       	cpc	r1, r19
 786:	14 06       	cpc	r1, r20
 788:	55 1f       	adc	r21, r21
 78a:	f2 cf       	rjmp	.-28     	; 0x770 <__fp_split3+0xe>
 78c:	46 95       	lsr	r20
 78e:	f1 df       	rcall	.-30     	; 0x772 <__fp_splitA>
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <__fp_splitA+0x30>
 792:	16 16       	cp	r1, r22
 794:	17 06       	cpc	r1, r23
 796:	18 06       	cpc	r1, r24
 798:	99 1f       	adc	r25, r25
 79a:	f1 cf       	rjmp	.-30     	; 0x77e <__fp_splitA+0xc>
 79c:	86 95       	lsr	r24
 79e:	71 05       	cpc	r23, r1
 7a0:	61 05       	cpc	r22, r1
 7a2:	08 94       	sec
 7a4:	08 95       	ret

000007a6 <__fp_zero>:
 7a6:	e8 94       	clt

000007a8 <__fp_szero>:
 7a8:	bb 27       	eor	r27, r27
 7aa:	66 27       	eor	r22, r22
 7ac:	77 27       	eor	r23, r23
 7ae:	cb 01       	movw	r24, r22
 7b0:	97 f9       	bld	r25, 7
 7b2:	08 95       	ret

000007b4 <__mulsf3>:
 7b4:	0b d0       	rcall	.+22     	; 0x7cc <__mulsf3x>
 7b6:	c4 cf       	rjmp	.-120    	; 0x740 <__fp_round>
 7b8:	b5 df       	rcall	.-150    	; 0x724 <__fp_pscA>
 7ba:	28 f0       	brcs	.+10     	; 0x7c6 <__mulsf3+0x12>
 7bc:	ba df       	rcall	.-140    	; 0x732 <__fp_pscB>
 7be:	18 f0       	brcs	.+6      	; 0x7c6 <__mulsf3+0x12>
 7c0:	95 23       	and	r25, r21
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <__mulsf3+0x12>
 7c4:	a6 cf       	rjmp	.-180    	; 0x712 <__fp_inf>
 7c6:	ab cf       	rjmp	.-170    	; 0x71e <__fp_nan>
 7c8:	11 24       	eor	r1, r1
 7ca:	ee cf       	rjmp	.-36     	; 0x7a8 <__fp_szero>

000007cc <__mulsf3x>:
 7cc:	ca df       	rcall	.-108    	; 0x762 <__fp_split3>
 7ce:	a0 f3       	brcs	.-24     	; 0x7b8 <__mulsf3+0x4>

000007d0 <__mulsf3_pse>:
 7d0:	95 9f       	mul	r25, r21
 7d2:	d1 f3       	breq	.-12     	; 0x7c8 <__mulsf3+0x14>
 7d4:	95 0f       	add	r25, r21
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	55 1f       	adc	r21, r21
 7da:	62 9f       	mul	r22, r18
 7dc:	f0 01       	movw	r30, r0
 7de:	72 9f       	mul	r23, r18
 7e0:	bb 27       	eor	r27, r27
 7e2:	f0 0d       	add	r31, r0
 7e4:	b1 1d       	adc	r27, r1
 7e6:	63 9f       	mul	r22, r19
 7e8:	aa 27       	eor	r26, r26
 7ea:	f0 0d       	add	r31, r0
 7ec:	b1 1d       	adc	r27, r1
 7ee:	aa 1f       	adc	r26, r26
 7f0:	64 9f       	mul	r22, r20
 7f2:	66 27       	eor	r22, r22
 7f4:	b0 0d       	add	r27, r0
 7f6:	a1 1d       	adc	r26, r1
 7f8:	66 1f       	adc	r22, r22
 7fa:	82 9f       	mul	r24, r18
 7fc:	22 27       	eor	r18, r18
 7fe:	b0 0d       	add	r27, r0
 800:	a1 1d       	adc	r26, r1
 802:	62 1f       	adc	r22, r18
 804:	73 9f       	mul	r23, r19
 806:	b0 0d       	add	r27, r0
 808:	a1 1d       	adc	r26, r1
 80a:	62 1f       	adc	r22, r18
 80c:	83 9f       	mul	r24, r19
 80e:	a0 0d       	add	r26, r0
 810:	61 1d       	adc	r22, r1
 812:	22 1f       	adc	r18, r18
 814:	74 9f       	mul	r23, r20
 816:	33 27       	eor	r19, r19
 818:	a0 0d       	add	r26, r0
 81a:	61 1d       	adc	r22, r1
 81c:	23 1f       	adc	r18, r19
 81e:	84 9f       	mul	r24, r20
 820:	60 0d       	add	r22, r0
 822:	21 1d       	adc	r18, r1
 824:	82 2f       	mov	r24, r18
 826:	76 2f       	mov	r23, r22
 828:	6a 2f       	mov	r22, r26
 82a:	11 24       	eor	r1, r1
 82c:	9f 57       	subi	r25, 0x7F	; 127
 82e:	50 40       	sbci	r21, 0x00	; 0
 830:	8a f0       	brmi	.+34     	; 0x854 <__mulsf3_pse+0x84>
 832:	e1 f0       	breq	.+56     	; 0x86c <__mulsf3_pse+0x9c>
 834:	88 23       	and	r24, r24
 836:	4a f0       	brmi	.+18     	; 0x84a <__mulsf3_pse+0x7a>
 838:	ee 0f       	add	r30, r30
 83a:	ff 1f       	adc	r31, r31
 83c:	bb 1f       	adc	r27, r27
 83e:	66 1f       	adc	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	91 50       	subi	r25, 0x01	; 1
 846:	50 40       	sbci	r21, 0x00	; 0
 848:	a9 f7       	brne	.-22     	; 0x834 <__mulsf3_pse+0x64>
 84a:	9e 3f       	cpi	r25, 0xFE	; 254
 84c:	51 05       	cpc	r21, r1
 84e:	70 f0       	brcs	.+28     	; 0x86c <__mulsf3_pse+0x9c>
 850:	60 cf       	rjmp	.-320    	; 0x712 <__fp_inf>
 852:	aa cf       	rjmp	.-172    	; 0x7a8 <__fp_szero>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	ec f3       	brlt	.-6      	; 0x852 <__mulsf3_pse+0x82>
 858:	98 3e       	cpi	r25, 0xE8	; 232
 85a:	dc f3       	brlt	.-10     	; 0x852 <__mulsf3_pse+0x82>
 85c:	86 95       	lsr	r24
 85e:	77 95       	ror	r23
 860:	67 95       	ror	r22
 862:	b7 95       	ror	r27
 864:	f7 95       	ror	r31
 866:	e7 95       	ror	r30
 868:	9f 5f       	subi	r25, 0xFF	; 255
 86a:	c1 f7       	brne	.-16     	; 0x85c <__mulsf3_pse+0x8c>
 86c:	fe 2b       	or	r31, r30
 86e:	88 0f       	add	r24, r24
 870:	91 1d       	adc	r25, r1
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <_exit>:
 87a:	f8 94       	cli

0000087c <__stop_program>:
 87c:	ff cf       	rjmp	.-2      	; 0x87c <__stop_program>
