
SHR_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000920  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800100  00800100  00000994  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c2  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d88  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ec  00000000  00000000  00002a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  0000331c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ef  00000000  00000000  000034ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000550  00000000  00000000  00003bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000412b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9a c2       	rjmp	.+1332   	; 0x576 <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__vector_25>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a6 31       	cpi	r26, 0x16	; 22
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	f2 d0       	rcall	.+484    	; 0x296 <main>
  b2:	34 c4       	rjmp	.+2152   	; 0x91c <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <adc_config>:


void adc_config()
{
	//AREF = AVCC, PF0
	ADMUX = (1<<REFS0) | (1<<MUX0);
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//ADC Enable, /16, Interrupt Enable
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8c e8       	ldi	r24, 0x8C	; 140
  c2:	80 83       	st	Z, r24
	//Start Conversion
	ADCSRA |= (1<<ADSC);
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <adc_start_conversion>:
}

void adc_start_conversion()
{
	//start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0) | (1<<ADIE) | (1<<ADSC); //prescaler to 16
  cc:	8d ec       	ldi	r24, 0xCD	; 205
  ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//!!! Currently we have to Start the conversion manually with ADSC=1. Normally SMCR should auto trigger the conversion but as of now it does not work. neither do we know if the uC goes into Noise reduction mode
	SMCR = (1<<SM0)|(0<<SM1)|(0<<SM2); //enable ADC noise reduction mode and starts the conversion
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	83 bf       	out	0x33, r24	; 51
  d6:	08 95       	ret

000000d8 <__vector_25>:
}


ISR(ADC_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0b b6       	in	r0, 0x3b	; 59
  e4:	0f 92       	push	r0
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	8f 93       	push	r24
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	
	// store ADC result
	adc_values[adc_next] = ADC;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	e8 2f       	mov	r30, r24
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  fc:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 100:	ee 0f       	add	r30, r30
 102:	ff 1f       	adc	r31, r31
 104:	ee 5e       	subi	r30, 0xEE	; 238
 106:	fe 4f       	sbci	r31, 0xFE	; 254
 108:	31 83       	std	Z+1, r19	; 0x01
 10a:	20 83       	st	Z, r18
	adc_next++;
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	// reset index var
	if(adc_next == 5){
 112:	85 30       	cpi	r24, 0x05	; 5
 114:	11 f4       	brne	.+4      	; 0x11a <__vector_25+0x42>
		adc_next = 0;
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	8f 91       	pop	r24
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0b be       	out	0x3b, r0	; 59
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <adc_get>:

// getter for each adc var
uint16_t adc_get(uint8_t adc)
{
	return adc_values[adc];
 13c:	e8 2f       	mov	r30, r24
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	ee 5e       	subi	r30, 0xEE	; 238
 146:	fe 4f       	sbci	r31, 0xFE	; 254
 148:	80 81       	ld	r24, Z
 14a:	91 81       	ldd	r25, Z+1	; 0x01
 14c:	08 95       	ret

0000014e <can_check_free>:
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	78 f0       	brcs	.+30     	; 0x170 <can_check_free+0x22>
 152:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 97       	sbiw	r24, 0x08	; 8
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <can_check_free+0x14>
 15e:	35 95       	asr	r19
 160:	27 95       	ror	r18
 162:	8a 95       	dec	r24
 164:	e2 f7       	brpl	.-8      	; 0x15e <can_check_free+0x10>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	20 ff       	sbrs	r18, 0
 16a:	0d c0       	rjmp	.+26     	; 0x186 <can_check_free+0x38>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
 170:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <can_check_free+0x2e>
 178:	35 95       	asr	r19
 17a:	27 95       	ror	r18
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <can_check_free+0x2a>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	20 fd       	sbrc	r18, 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	08 95       	ret

00000188 <can_cfg>:
 188:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	29 c0       	rjmp	.+82     	; 0x1e2 <can_cfg+0x5a>
 190:	80 e1       	ldi	r24, 0x10	; 16
 192:	48 9f       	mul	r20, r24
 194:	90 01       	movw	r18, r0
 196:	11 24       	eor	r1, r1
 198:	82 2f       	mov	r24, r18
 19a:	88 60       	ori	r24, 0x08	; 8
 19c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1a0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 1a4:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1a8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1ac:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1b0:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1b4:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1b8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1bc:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 1c0:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 1c4:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <can_cfg+0x54>
 1cc:	98 2f       	mov	r25, r24
 1ce:	92 2b       	or	r25, r18
 1d0:	98 60       	ori	r25, 0x08	; 8
 1d2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1d6:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	88 30       	cpi	r24, 0x08	; 8
 1de:	b0 f3       	brcs	.-20     	; 0x1cc <can_cfg+0x44>
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	4f 30       	cpi	r20, 0x0F	; 15
 1e4:	a8 f2       	brcs	.-86     	; 0x190 <can_cfg+0x8>
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 1f2:	87 e3       	ldi	r24, 0x37	; 55
 1f4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 1f8:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 1fc:	e8 ed       	ldi	r30, 0xD8	; 216
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	82 60       	ori	r24, 0x02	; 2
 204:	80 83       	st	Z, r24
 206:	08 95       	ret

00000208 <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
	
	for(uint8_t byte = 0; byte <8; byte++){
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	10 c0       	rjmp	.+32     	; 0x232 <can_tx+0x2a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 212:	8c 81       	ldd	r24, Y+4	; 0x04
 214:	30 e1       	ldi	r19, 0x10	; 16
 216:	83 9f       	mul	r24, r19
 218:	c0 01       	movw	r24, r0
 21a:	11 24       	eor	r1, r1
 21c:	82 2b       	or	r24, r18
 21e:	88 60       	ori	r24, 0x08	; 8
 220:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANMSG = data[byte];
 224:	fb 01       	movw	r30, r22
 226:	e2 0f       	add	r30, r18
 228:	f1 1d       	adc	r31, r1
 22a:	80 81       	ld	r24, Z
 22c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	28 30       	cpi	r18, 0x08	; 8
 234:	70 f3       	brcs	.-36     	; 0x212 <can_tx+0xa>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 236:	8c 81       	ldd	r24, Y+4	; 0x04
 238:	82 95       	swap	r24
 23a:	80 7f       	andi	r24, 0xF0	; 240
 23c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 240:	8c 81       	ldd	r24, Y+4	; 0x04
 242:	85 df       	rcall	.-246    	; 0x14e <can_check_free>
 244:	88 23       	and	r24, r24
 246:	21 f1       	breq	.+72     	; 0x290 <can_tx+0x88>
		CANSTMOB = 0;
 248:	ee ee       	ldi	r30, 0xEE	; 238
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 24e:	88 81       	ld	r24, Y
 250:	99 81       	ldd	r25, Y+1	; 0x01
 252:	96 95       	lsr	r25
 254:	87 95       	ror	r24
 256:	96 95       	lsr	r25
 258:	87 95       	ror	r24
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 262:	88 81       	ld	r24, Y
 264:	82 95       	swap	r24
 266:	88 0f       	add	r24, r24
 268:	80 7e       	andi	r24, 0xE0	; 224
 26a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 26e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 272:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 276:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 27a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 27e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 282:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 286:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 288:	88 e4       	ldi	r24, 0x48	; 72
 28a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 28e:	10 82       	st	Z, r1
	}
	
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <main>:
float apps2_percentage;
uint8_t sdc_open = 0;
extern uint16_t adc_values[1];

int main(void)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	61 97       	sbiw	r28, 0x11	; 17
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
	/*	Configuration	*/
	port_config();
 2aa:	53 d1       	rcall	.+678    	; 0x552 <port_config>
	sys_timer_config();
 2ac:	5c d1       	rcall	.+696    	; 0x566 <sys_timer_config>
	adc_config(); //CHECK WHICH ADC INPUTS CORRESPOND WITH WHAT DATABYTE WE SEND
 2ae:	03 df       	rcall	.-506    	; 0xb6 <adc_config>
 2b0:	6b df       	rcall	.-298    	; 0x188 <can_cfg>
	can_cfg();
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	94 e0       	ldi	r25, 0x04	; 4
	
	struct CAN_MOB can_SHR0_mob;
	can_SHR0_mob.mob_id = 0x400;
 2b6:	9a 83       	std	Y+2, r25	; 0x02
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	1c 82       	std	Y+4, r1	; 0x04
 2bc:	1b 82       	std	Y+3, r1	; 0x03
	can_SHR0_mob.mob_idmask = 0; //send
 2be:	1d 82       	std	Y+5, r1	; 0x05
 2c0:	fe 01       	movw	r30, r28
	can_SHR0_mob.mob_number = 0;  //IDs might be wrong
 2c2:	36 96       	adiw	r30, 0x06	; 6
	uint8_t SHR0_databytes[8] = {0};
 2c4:	88 e0       	ldi	r24, 0x08	; 8
 2c6:	df 01       	movw	r26, r30
 2c8:	1d 92       	st	X+, r1
 2ca:	8a 95       	dec	r24
 2cc:	e9 f7       	brne	.-6      	; 0x2c8 <main+0x32>
 2ce:	78 94       	sei
 2d0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sys_tick>

	sei();

    while (1) 
    {
		if ((sys_tick - time_old) >= 1)
 2d4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sys_tick+0x1>
 2d8:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <sys_tick+0x2>
 2dc:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <sys_tick+0x3>
 2e0:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <time_old>
 2e4:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <time_old+0x1>
 2e8:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <time_old+0x2>
 2ec:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <time_old+0x3>
 2f0:	84 17       	cp	r24, r20
 2f2:	95 07       	cpc	r25, r21
 2f4:	a6 07       	cpc	r26, r22
 2f6:	b7 07       	cpc	r27, r23
 2f8:	79 f1       	breq	.+94     	; 0x358 <main+0xc2>
 2fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <time_old>
		{
			time_old = sys_tick;
 2fe:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <time_old+0x1>
 302:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <time_old+0x2>
 306:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <time_old+0x3>
 30a:	e0 de       	rcall	.-576    	; 0xcc <adc_start_conversion>
			adc_start_conversion();
 30c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <time_old_10ms>
			time_old_10ms++;
 310:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <time_old_10ms+0x1>
 314:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <time_old_10ms+0x2>
 318:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <time_old_10ms+0x3>
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	a1 1d       	adc	r26, r1
 320:	b1 1d       	adc	r27, r1
 322:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <time_old_10ms>
 326:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <time_old_10ms+0x1>
 32a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <time_old_10ms+0x2>
 32e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <time_old_10ms+0x3>
 332:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time_old_100ms>
			time_old_100ms++;
 336:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <time_old_100ms+0x1>
 33a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <time_old_100ms+0x2>
 33e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <time_old_100ms+0x3>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	a1 1d       	adc	r26, r1
 346:	b1 1d       	adc	r27, r1
 348:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <time_old_100ms>
 34c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <time_old_100ms+0x1>
 350:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <time_old_100ms+0x2>
 354:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <time_old_100ms+0x3>
 358:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <time_old_10ms>
		}
		
		if (time_old_10ms >= 10)
 35c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <time_old_10ms+0x1>
 360:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <time_old_10ms+0x2>
 364:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <time_old_10ms+0x3>
 368:	0a 97       	sbiw	r24, 0x0a	; 10
 36a:	a1 05       	cpc	r26, r1
 36c:	b1 05       	cpc	r27, r1
 36e:	08 f4       	brcc	.+2      	; 0x372 <main+0xdc>
 370:	71 c0       	rjmp	.+226    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 372:	80 e0       	ldi	r24, 0x00	; 0
		{	
			
			uint16_t apps1_percentage = update_apps_percentage_alt((double) adc_get(0), 1);
 374:	e3 de       	rcall	.-570    	; 0x13c <adc_get>
 376:	bc 01       	movw	r22, r24
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	b6 d1       	rcall	.+876    	; 0x6ea <__floatunsisf>
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	84 d0       	rcall	.+264    	; 0x48a <update_apps_percentage_alt>
 382:	87 d1       	rcall	.+782    	; 0x692 <__fixunssfsi>
 384:	6b 01       	movw	r12, r22
 386:	7c 01       	movw	r14, r24
 388:	81 e0       	ldi	r24, 0x01	; 1
			uint16_t apps2_percentage = update_apps_percentage_alt((double) adc_get(1), 2);
 38a:	d8 de       	rcall	.-592    	; 0x13c <adc_get>
 38c:	bc 01       	movw	r22, r24
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	ab d1       	rcall	.+854    	; 0x6ea <__floatunsisf>
 394:	42 e0       	ldi	r20, 0x02	; 2
 396:	79 d0       	rcall	.+242    	; 0x48a <update_apps_percentage_alt>
 398:	7c d1       	rcall	.+760    	; 0x692 <__fixunssfsi>
 39a:	4b 01       	movw	r8, r22
 39c:	5c 01       	movw	r10, r24
 39e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adc_values>
 3a2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <adc_values+0x1>
 3a6:	81 35       	cpi	r24, 0x51	; 81
			
				if(adc_values[0] <= 80|| adc_values[1] <= 80){
 3a8:	91 05       	cpc	r25, r1
 3aa:	38 f0       	brcs	.+14     	; 0x3ba <main+0x124>
 3ac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <adc_values+0x2>
 3b0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <adc_values+0x3>
 3b4:	81 35       	cpi	r24, 0x51	; 81
 3b6:	91 05       	cpc	r25, r1
 3b8:	18 f4       	brcc	.+6      	; 0x3c0 <main+0x12a>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sdc_open>
 3c0:	b6 01       	movw	r22, r12
					//if APPS shorted to ground or open circuit
					sdc_open=1;
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
				}
				if (apps1_percentage > apps2_percentage+10.0){
 3c6:	91 d1       	rcall	.+802    	; 0x6ea <__floatunsisf>
 3c8:	6e 87       	std	Y+14, r22	; 0x0e
 3ca:	7f 87       	std	Y+15, r23	; 0x0f
 3cc:	88 8b       	std	Y+16, r24	; 0x10
 3ce:	99 8b       	std	Y+17, r25	; 0x11
 3d0:	b4 01       	movw	r22, r8
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	89 d1       	rcall	.+786    	; 0x6ea <__floatunsisf>
 3d8:	2b 01       	movw	r4, r22
 3da:	3c 01       	movw	r6, r24
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	40 e2       	ldi	r20, 0x20	; 32
 3e2:	51 e4       	ldi	r21, 0x41	; 65
 3e4:	ee d0       	rcall	.+476    	; 0x5c2 <__addsf3>
 3e6:	9b 01       	movw	r18, r22
 3e8:	ac 01       	movw	r20, r24
 3ea:	6e 85       	ldd	r22, Y+14	; 0x0e
 3ec:	7f 85       	ldd	r23, Y+15	; 0x0f
 3ee:	88 89       	ldd	r24, Y+16	; 0x10
 3f0:	99 89       	ldd	r25, Y+17	; 0x11
 3f2:	2d d2       	rcall	.+1114   	; 0x84e <__gesf2>
 3f4:	18 16       	cp	r1, r24
 3f6:	1c f4       	brge	.+6      	; 0x3fe <main+0x168>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sdc_open>
 3fe:	20 e0       	ldi	r18, 0x00	; 0
					sdc_open=1; //deviation between apps +10%
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	40 e2       	ldi	r20, 0x20	; 32
 404:	51 e4       	ldi	r21, 0x41	; 65
				}
				if (apps1_percentage < apps2_percentage-10.0){
 406:	c3 01       	movw	r24, r6
 408:	b2 01       	movw	r22, r4
 40a:	da d0       	rcall	.+436    	; 0x5c0 <__subsf3>
 40c:	9b 01       	movw	r18, r22
 40e:	ac 01       	movw	r20, r24
 410:	6e 85       	ldd	r22, Y+14	; 0x0e
 412:	7f 85       	ldd	r23, Y+15	; 0x0f
 414:	88 89       	ldd	r24, Y+16	; 0x10
 416:	99 89       	ldd	r25, Y+17	; 0x11
 418:	38 d1       	rcall	.+624    	; 0x68a <__cmpsf2>
 41a:	88 23       	and	r24, r24
 41c:	1c f4       	brge	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sdc_open>
 424:	ce 82       	std	Y+6, r12	; 0x06
 426:	df 82       	std	Y+7, r13	; 0x07
					sdc_open=1;//deviation between apps -10%
 428:	88 86       	std	Y+8, r8	; 0x08
 42a:	99 86       	std	Y+9, r9	; 0x09
 42c:	1a 86       	std	Y+10, r1	; 0x0a
				}
			
			
			SHR0_databytes[0] =  (uint16_t)apps1_percentage;			//lsb APPS1
 42e:	1b 86       	std	Y+11, r1	; 0x0b
			SHR0_databytes[1] = ((uint16_t)apps1_percentage >> 8);		//msb APPS1
 430:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sdc_open>
			SHR0_databytes[2] =  (uint16_t)apps2_percentage;			//lsb APPS2
			SHR0_databytes[3] = ((uint16_t)apps2_percentage >> 8);		//msb APPS2
 434:	8c 87       	std	Y+12, r24	; 0x0c
			SHR0_databytes[4] = 0; //SPI getter Wheel Speed R lsb
 436:	1d 86       	std	Y+13, r1	; 0x0d
			SHR0_databytes[5] = 0; //SPI getter Wheel Speed R msb
 438:	be 01       	movw	r22, r28
			SHR0_databytes[6] = sdc_open;
 43a:	6a 5f       	subi	r22, 0xFA	; 250
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	ce 01       	movw	r24, r28
			SHR0_databytes[7] = 0;
 440:	01 96       	adiw	r24, 0x01	; 1
			
			can_tx(&can_SHR0_mob, SHR0_databytes);
 442:	e2 de       	rcall	.-572    	; 0x208 <can_tx>
 444:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <time_old_10ms>
 448:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <time_old_10ms+0x1>
 44c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <time_old_10ms+0x2>
			time_old_10ms = 0;
 450:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <time_old_10ms+0x3>
 454:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <time_old_100ms>
 458:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <time_old_100ms+0x1>
 45c:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <time_old_100ms+0x2>
		}
		
		if (time_old_100ms >= 100)
 460:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <time_old_100ms+0x3>
 464:	84 36       	cpi	r24, 0x64	; 100
 466:	91 05       	cpc	r25, r1
 468:	a1 05       	cpc	r26, r1
 46a:	b1 05       	cpc	r27, r1
 46c:	08 f4       	brcc	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46e:	30 cf       	rjmp	.-416    	; 0x2d0 <main+0x3a>
 470:	98 b1       	in	r25, 0x08	; 8
 472:	84 e0       	ldi	r24, 0x04	; 4
 474:	89 27       	eor	r24, r25
 476:	88 b9       	out	0x08, r24	; 8
 478:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <time_old_100ms>
		{
			PORTC ^= (1<<PC2);
 47c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <time_old_100ms+0x1>
 480:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <time_old_100ms+0x2>
			time_old_100ms = 0;
 484:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <time_old_100ms+0x3>
 488:	23 cf       	rjmp	.-442    	; 0x2d0 <main+0x3a>

0000048a <update_apps_percentage_alt>:

extern uint16_t adc_values[1];

/*	Functions	*/

double update_apps_percentage_alt(double apps_adc, uint8_t apps_sensor){
 48a:	cf 92       	push	r12
 48c:	df 92       	push	r13
 48e:	ef 92       	push	r14
 490:	ff 92       	push	r15
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	6b 01       	movw	r12, r22
 49c:	7c 01       	movw	r14, r24
 49e:	c4 2f       	mov	r28, r20
	double apps_value = 0;
	if (apps_adc < 75){
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	46 e9       	ldi	r20, 0x96	; 150
 4a6:	52 e4       	ldi	r21, 0x42	; 66
 4a8:	f0 d0       	rcall	.+480    	; 0x68a <__cmpsf2>
 4aa:	88 23       	and	r24, r24
 4ac:	0c f4       	brge	.+2      	; 0x4b0 <update_apps_percentage_alt+0x26>
 4ae:	3b c0       	rjmp	.+118    	; 0x526 <update_apps_percentage_alt+0x9c>
		return apps_value = 0;
	}
	switch (apps_sensor){
 4b0:	c1 30       	cpi	r28, 0x01	; 1
 4b2:	19 f0       	breq	.+6      	; 0x4ba <update_apps_percentage_alt+0x30>
 4b4:	c2 30       	cpi	r28, 0x02	; 2
 4b6:	91 f0       	breq	.+36     	; 0x4dc <update_apps_percentage_alt+0x52>
 4b8:	22 c0       	rjmp	.+68     	; 0x4fe <update_apps_percentage_alt+0x74>
		case 1: {
			apps_value = (100/(double)(APPS1_MAX - APPS1_MIN)) * (apps_adc - (double)APPS1_MIN);
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	4e e5       	ldi	r20, 0x5E	; 94
 4c0:	54 e4       	ldi	r21, 0x44	; 68
 4c2:	c7 01       	movw	r24, r14
 4c4:	b6 01       	movw	r22, r12
 4c6:	7c d0       	rcall	.+248    	; 0x5c0 <__subsf3>
 4c8:	2f e4       	ldi	r18, 0x4F	; 79
 4ca:	32 e2       	ldi	r19, 0x22	; 34
 4cc:	43 e5       	ldi	r20, 0x53	; 83
 4ce:	5e eb       	ldi	r21, 0xBE	; 190
 4d0:	c2 d1       	rcall	.+900    	; 0x856 <__mulsf3>
 4d2:	06 2f       	mov	r16, r22
 4d4:	17 2f       	mov	r17, r23
 4d6:	d8 2f       	mov	r29, r24
 4d8:	c9 2f       	mov	r28, r25
			break;
 4da:	15 c0       	rjmp	.+42     	; 0x506 <update_apps_percentage_alt+0x7c>
		}
		case 2: {
			apps_value = (100/(double)(APPS2_MAX - APPS2_MIN)) * (apps_adc - (double)APPS2_MIN);
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	47 e3       	ldi	r20, 0x37	; 55
 4e2:	53 e4       	ldi	r21, 0x43	; 67
 4e4:	c7 01       	movw	r24, r14
 4e6:	b6 01       	movw	r22, r12
 4e8:	6b d0       	rcall	.+214    	; 0x5c0 <__subsf3>
 4ea:	2d e5       	ldi	r18, 0x5D	; 93
 4ec:	35 e8       	ldi	r19, 0x85	; 133
 4ee:	4a e3       	ldi	r20, 0x3A	; 58
 4f0:	5e e3       	ldi	r21, 0x3E	; 62
 4f2:	b1 d1       	rcall	.+866    	; 0x856 <__mulsf3>
 4f4:	06 2f       	mov	r16, r22
 4f6:	17 2f       	mov	r17, r23
 4f8:	d8 2f       	mov	r29, r24
 4fa:	c9 2f       	mov	r28, r25
			break;
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <update_apps_percentage_alt+0x7c>
extern uint16_t adc_values[1];

/*	Functions	*/

double update_apps_percentage_alt(double apps_adc, uint8_t apps_sensor){
	double apps_value = 0;
 4fe:	00 e0       	ldi	r16, 0x00	; 0
 500:	10 e0       	ldi	r17, 0x00	; 0
 502:	d0 e0       	ldi	r29, 0x00	; 0
 504:	c0 e0       	ldi	r28, 0x00	; 0
		case 2: {
			apps_value = (100/(double)(APPS2_MAX - APPS2_MIN)) * (apps_adc - (double)APPS2_MIN);
			break;
		}
	}
	if(apps_value >99){
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	46 ec       	ldi	r20, 0xC6	; 198
 50c:	52 e4       	ldi	r21, 0x42	; 66
 50e:	60 2f       	mov	r22, r16
 510:	71 2f       	mov	r23, r17
 512:	8d 2f       	mov	r24, r29
 514:	9c 2f       	mov	r25, r28
 516:	9b d1       	rcall	.+822    	; 0x84e <__gesf2>
 518:	18 16       	cp	r1, r24
 51a:	54 f0       	brlt	.+20     	; 0x530 <update_apps_percentage_alt+0xa6>
 51c:	50 2f       	mov	r21, r16
 51e:	41 2f       	mov	r20, r17
 520:	3d 2f       	mov	r19, r29
 522:	2c 2f       	mov	r18, r28
 524:	09 c0       	rjmp	.+18     	; 0x538 <update_apps_percentage_alt+0xae>
/*	Functions	*/

double update_apps_percentage_alt(double apps_adc, uint8_t apps_sensor){
	double apps_value = 0;
	if (apps_adc < 75){
		return apps_value = 0;
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	20 e0       	ldi	r18, 0x00	; 0
 52e:	04 c0       	rjmp	.+8      	; 0x538 <update_apps_percentage_alt+0xae>
			apps_value = (100/(double)(APPS2_MAX - APPS2_MIN)) * (apps_adc - (double)APPS2_MIN);
			break;
		}
	}
	if(apps_value >99){
		apps_value = 99;
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	36 ec       	ldi	r19, 0xC6	; 198
 536:	22 e4       	ldi	r18, 0x42	; 66
	}
	return apps_value;
}
 538:	65 2f       	mov	r22, r21
 53a:	74 2f       	mov	r23, r20
 53c:	83 2f       	mov	r24, r19
 53e:	92 2f       	mov	r25, r18
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	08 95       	ret

00000552 <port_config>:
/*	FUNCTIONS	*/

void port_config(void)
{
	//Fault-LED, Heart-LED
	DDRC |= (1<<PC0) | (1<<PC2);
 552:	87 b1       	in	r24, 0x07	; 7
 554:	85 60       	ori	r24, 0x05	; 5
 556:	87 b9       	out	0x07, r24	; 7
	//CS-TYPK1, CS-TYPK2
	DDRE |= (1<<PE0) | (1<<PE1);
 558:	8d b1       	in	r24, 0x0d	; 13
 55a:	83 60       	ori	r24, 0x03	; 3
 55c:	8d b9       	out	0x0d, r24	; 13
	//APPS1, APPS2
	DDRF &= ~(1<<PF0) & ~(1<<PF1);
 55e:	80 b3       	in	r24, 0x10	; 16
 560:	8c 7f       	andi	r24, 0xFC	; 252
 562:	80 bb       	out	0x10, r24	; 16
 564:	08 95       	ret

00000566 <sys_timer_config>:

void sys_timer_config(void)
{
	//8 bit Timer 0 configuration
	//ctc mode and 64 as prescaler for 16Mhz
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
 566:	8b e0       	ldi	r24, 0x0B	; 11
 568:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = 0 | (1<<OCF0A);	//compare interrupt enable
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = 250-1;
 570:	89 ef       	ldi	r24, 0xF9	; 249
 572:	87 bd       	out	0x27, r24	; 39
 574:	08 95       	ret

00000576 <__vector_16>:
	
}

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
	sys_tick++;
 588:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sys_tick>
 58c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sys_tick+0x1>
 590:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <sys_tick+0x2>
 594:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <sys_tick+0x3>
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	a1 1d       	adc	r26, r1
 59c:	b1 1d       	adc	r27, r1
 59e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sys_tick>
 5a2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <sys_tick+0x1>
 5a6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <sys_tick+0x2>
 5aa:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <sys_tick+0x3>
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	0f 90       	pop	r0
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	0f 90       	pop	r0
 5bc:	1f 90       	pop	r1
 5be:	18 95       	reti

000005c0 <__subsf3>:
 5c0:	50 58       	subi	r21, 0x80	; 128

000005c2 <__addsf3>:
 5c2:	bb 27       	eor	r27, r27
 5c4:	aa 27       	eor	r26, r26
 5c6:	0e d0       	rcall	.+28     	; 0x5e4 <__addsf3x>
 5c8:	08 c1       	rjmp	.+528    	; 0x7da <__fp_round>
 5ca:	f9 d0       	rcall	.+498    	; 0x7be <__fp_pscA>
 5cc:	30 f0       	brcs	.+12     	; 0x5da <__addsf3+0x18>
 5ce:	fe d0       	rcall	.+508    	; 0x7cc <__fp_pscB>
 5d0:	20 f0       	brcs	.+8      	; 0x5da <__addsf3+0x18>
 5d2:	31 f4       	brne	.+12     	; 0x5e0 <__addsf3+0x1e>
 5d4:	9f 3f       	cpi	r25, 0xFF	; 255
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__addsf3+0x1a>
 5d8:	1e f4       	brtc	.+6      	; 0x5e0 <__addsf3+0x1e>
 5da:	ee c0       	rjmp	.+476    	; 0x7b8 <__fp_nan>
 5dc:	0e f4       	brtc	.+2      	; 0x5e0 <__addsf3+0x1e>
 5de:	e0 95       	com	r30
 5e0:	e7 fb       	bst	r30, 7
 5e2:	e4 c0       	rjmp	.+456    	; 0x7ac <__fp_inf>

000005e4 <__addsf3x>:
 5e4:	e9 2f       	mov	r30, r25
 5e6:	0a d1       	rcall	.+532    	; 0x7fc <__fp_split3>
 5e8:	80 f3       	brcs	.-32     	; 0x5ca <__addsf3+0x8>
 5ea:	ba 17       	cp	r27, r26
 5ec:	62 07       	cpc	r22, r18
 5ee:	73 07       	cpc	r23, r19
 5f0:	84 07       	cpc	r24, r20
 5f2:	95 07       	cpc	r25, r21
 5f4:	18 f0       	brcs	.+6      	; 0x5fc <__addsf3x+0x18>
 5f6:	71 f4       	brne	.+28     	; 0x614 <__addsf3x+0x30>
 5f8:	9e f5       	brtc	.+102    	; 0x660 <__addsf3x+0x7c>
 5fa:	22 c1       	rjmp	.+580    	; 0x840 <__fp_zero>
 5fc:	0e f4       	brtc	.+2      	; 0x600 <__addsf3x+0x1c>
 5fe:	e0 95       	com	r30
 600:	0b 2e       	mov	r0, r27
 602:	ba 2f       	mov	r27, r26
 604:	a0 2d       	mov	r26, r0
 606:	0b 01       	movw	r0, r22
 608:	b9 01       	movw	r22, r18
 60a:	90 01       	movw	r18, r0
 60c:	0c 01       	movw	r0, r24
 60e:	ca 01       	movw	r24, r20
 610:	a0 01       	movw	r20, r0
 612:	11 24       	eor	r1, r1
 614:	ff 27       	eor	r31, r31
 616:	59 1b       	sub	r21, r25
 618:	99 f0       	breq	.+38     	; 0x640 <__addsf3x+0x5c>
 61a:	59 3f       	cpi	r21, 0xF9	; 249
 61c:	50 f4       	brcc	.+20     	; 0x632 <__addsf3x+0x4e>
 61e:	50 3e       	cpi	r21, 0xE0	; 224
 620:	68 f1       	brcs	.+90     	; 0x67c <__addsf3x+0x98>
 622:	1a 16       	cp	r1, r26
 624:	f0 40       	sbci	r31, 0x00	; 0
 626:	a2 2f       	mov	r26, r18
 628:	23 2f       	mov	r18, r19
 62a:	34 2f       	mov	r19, r20
 62c:	44 27       	eor	r20, r20
 62e:	58 5f       	subi	r21, 0xF8	; 248
 630:	f3 cf       	rjmp	.-26     	; 0x618 <__addsf3x+0x34>
 632:	46 95       	lsr	r20
 634:	37 95       	ror	r19
 636:	27 95       	ror	r18
 638:	a7 95       	ror	r26
 63a:	f0 40       	sbci	r31, 0x00	; 0
 63c:	53 95       	inc	r21
 63e:	c9 f7       	brne	.-14     	; 0x632 <__addsf3x+0x4e>
 640:	7e f4       	brtc	.+30     	; 0x660 <__addsf3x+0x7c>
 642:	1f 16       	cp	r1, r31
 644:	ba 0b       	sbc	r27, r26
 646:	62 0b       	sbc	r22, r18
 648:	73 0b       	sbc	r23, r19
 64a:	84 0b       	sbc	r24, r20
 64c:	ba f0       	brmi	.+46     	; 0x67c <__addsf3x+0x98>
 64e:	91 50       	subi	r25, 0x01	; 1
 650:	a1 f0       	breq	.+40     	; 0x67a <__addsf3x+0x96>
 652:	ff 0f       	add	r31, r31
 654:	bb 1f       	adc	r27, r27
 656:	66 1f       	adc	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	c2 f7       	brpl	.-16     	; 0x64e <__addsf3x+0x6a>
 65e:	0e c0       	rjmp	.+28     	; 0x67c <__addsf3x+0x98>
 660:	ba 0f       	add	r27, r26
 662:	62 1f       	adc	r22, r18
 664:	73 1f       	adc	r23, r19
 666:	84 1f       	adc	r24, r20
 668:	48 f4       	brcc	.+18     	; 0x67c <__addsf3x+0x98>
 66a:	87 95       	ror	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	b7 95       	ror	r27
 672:	f7 95       	ror	r31
 674:	9e 3f       	cpi	r25, 0xFE	; 254
 676:	08 f0       	brcs	.+2      	; 0x67a <__addsf3x+0x96>
 678:	b3 cf       	rjmp	.-154    	; 0x5e0 <__addsf3+0x1e>
 67a:	93 95       	inc	r25
 67c:	88 0f       	add	r24, r24
 67e:	08 f0       	brcs	.+2      	; 0x682 <__addsf3x+0x9e>
 680:	99 27       	eor	r25, r25
 682:	ee 0f       	add	r30, r30
 684:	97 95       	ror	r25
 686:	87 95       	ror	r24
 688:	08 95       	ret

0000068a <__cmpsf2>:
 68a:	6c d0       	rcall	.+216    	; 0x764 <__fp_cmp>
 68c:	08 f4       	brcc	.+2      	; 0x690 <__cmpsf2+0x6>
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	08 95       	ret

00000692 <__fixunssfsi>:
 692:	bc d0       	rcall	.+376    	; 0x80c <__fp_splitA>
 694:	88 f0       	brcs	.+34     	; 0x6b8 <__fixunssfsi+0x26>
 696:	9f 57       	subi	r25, 0x7F	; 127
 698:	90 f0       	brcs	.+36     	; 0x6be <__fixunssfsi+0x2c>
 69a:	b9 2f       	mov	r27, r25
 69c:	99 27       	eor	r25, r25
 69e:	b7 51       	subi	r27, 0x17	; 23
 6a0:	a0 f0       	brcs	.+40     	; 0x6ca <__fixunssfsi+0x38>
 6a2:	d1 f0       	breq	.+52     	; 0x6d8 <__fixunssfsi+0x46>
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	88 1f       	adc	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	1a f0       	brmi	.+6      	; 0x6b4 <__fixunssfsi+0x22>
 6ae:	ba 95       	dec	r27
 6b0:	c9 f7       	brne	.-14     	; 0x6a4 <__fixunssfsi+0x12>
 6b2:	12 c0       	rjmp	.+36     	; 0x6d8 <__fixunssfsi+0x46>
 6b4:	b1 30       	cpi	r27, 0x01	; 1
 6b6:	81 f0       	breq	.+32     	; 0x6d8 <__fixunssfsi+0x46>
 6b8:	c3 d0       	rcall	.+390    	; 0x840 <__fp_zero>
 6ba:	b1 e0       	ldi	r27, 0x01	; 1
 6bc:	08 95       	ret
 6be:	c0 c0       	rjmp	.+384    	; 0x840 <__fp_zero>
 6c0:	67 2f       	mov	r22, r23
 6c2:	78 2f       	mov	r23, r24
 6c4:	88 27       	eor	r24, r24
 6c6:	b8 5f       	subi	r27, 0xF8	; 248
 6c8:	39 f0       	breq	.+14     	; 0x6d8 <__fixunssfsi+0x46>
 6ca:	b9 3f       	cpi	r27, 0xF9	; 249
 6cc:	cc f3       	brlt	.-14     	; 0x6c0 <__fixunssfsi+0x2e>
 6ce:	86 95       	lsr	r24
 6d0:	77 95       	ror	r23
 6d2:	67 95       	ror	r22
 6d4:	b3 95       	inc	r27
 6d6:	d9 f7       	brne	.-10     	; 0x6ce <__fixunssfsi+0x3c>
 6d8:	3e f4       	brtc	.+14     	; 0x6e8 <__fixunssfsi+0x56>
 6da:	90 95       	com	r25
 6dc:	80 95       	com	r24
 6de:	70 95       	com	r23
 6e0:	61 95       	neg	r22
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	08 95       	ret

000006ea <__floatunsisf>:
 6ea:	e8 94       	clt
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <__floatsisf+0x12>

000006ee <__floatsisf>:
 6ee:	97 fb       	bst	r25, 7
 6f0:	3e f4       	brtc	.+14     	; 0x700 <__floatsisf+0x12>
 6f2:	90 95       	com	r25
 6f4:	80 95       	com	r24
 6f6:	70 95       	com	r23
 6f8:	61 95       	neg	r22
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	99 23       	and	r25, r25
 702:	a9 f0       	breq	.+42     	; 0x72e <__floatsisf+0x40>
 704:	f9 2f       	mov	r31, r25
 706:	96 e9       	ldi	r25, 0x96	; 150
 708:	bb 27       	eor	r27, r27
 70a:	93 95       	inc	r25
 70c:	f6 95       	lsr	r31
 70e:	87 95       	ror	r24
 710:	77 95       	ror	r23
 712:	67 95       	ror	r22
 714:	b7 95       	ror	r27
 716:	f1 11       	cpse	r31, r1
 718:	f8 cf       	rjmp	.-16     	; 0x70a <__floatsisf+0x1c>
 71a:	fa f4       	brpl	.+62     	; 0x75a <__floatsisf+0x6c>
 71c:	bb 0f       	add	r27, r27
 71e:	11 f4       	brne	.+4      	; 0x724 <__floatsisf+0x36>
 720:	60 ff       	sbrs	r22, 0
 722:	1b c0       	rjmp	.+54     	; 0x75a <__floatsisf+0x6c>
 724:	6f 5f       	subi	r22, 0xFF	; 255
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	8f 4f       	sbci	r24, 0xFF	; 255
 72a:	9f 4f       	sbci	r25, 0xFF	; 255
 72c:	16 c0       	rjmp	.+44     	; 0x75a <__floatsisf+0x6c>
 72e:	88 23       	and	r24, r24
 730:	11 f0       	breq	.+4      	; 0x736 <__floatsisf+0x48>
 732:	96 e9       	ldi	r25, 0x96	; 150
 734:	11 c0       	rjmp	.+34     	; 0x758 <__floatsisf+0x6a>
 736:	77 23       	and	r23, r23
 738:	21 f0       	breq	.+8      	; 0x742 <__floatsisf+0x54>
 73a:	9e e8       	ldi	r25, 0x8E	; 142
 73c:	87 2f       	mov	r24, r23
 73e:	76 2f       	mov	r23, r22
 740:	05 c0       	rjmp	.+10     	; 0x74c <__floatsisf+0x5e>
 742:	66 23       	and	r22, r22
 744:	71 f0       	breq	.+28     	; 0x762 <__floatsisf+0x74>
 746:	96 e8       	ldi	r25, 0x86	; 134
 748:	86 2f       	mov	r24, r22
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	2a f0       	brmi	.+10     	; 0x75a <__floatsisf+0x6c>
 750:	9a 95       	dec	r25
 752:	66 0f       	add	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	da f7       	brpl	.-10     	; 0x750 <__floatsisf+0x62>
 75a:	88 0f       	add	r24, r24
 75c:	96 95       	lsr	r25
 75e:	87 95       	ror	r24
 760:	97 f9       	bld	r25, 7
 762:	08 95       	ret

00000764 <__fp_cmp>:
 764:	99 0f       	add	r25, r25
 766:	00 08       	sbc	r0, r0
 768:	55 0f       	add	r21, r21
 76a:	aa 0b       	sbc	r26, r26
 76c:	e0 e8       	ldi	r30, 0x80	; 128
 76e:	fe ef       	ldi	r31, 0xFE	; 254
 770:	16 16       	cp	r1, r22
 772:	17 06       	cpc	r1, r23
 774:	e8 07       	cpc	r30, r24
 776:	f9 07       	cpc	r31, r25
 778:	c0 f0       	brcs	.+48     	; 0x7aa <__fp_cmp+0x46>
 77a:	12 16       	cp	r1, r18
 77c:	13 06       	cpc	r1, r19
 77e:	e4 07       	cpc	r30, r20
 780:	f5 07       	cpc	r31, r21
 782:	98 f0       	brcs	.+38     	; 0x7aa <__fp_cmp+0x46>
 784:	62 1b       	sub	r22, r18
 786:	73 0b       	sbc	r23, r19
 788:	84 0b       	sbc	r24, r20
 78a:	95 0b       	sbc	r25, r21
 78c:	39 f4       	brne	.+14     	; 0x79c <__fp_cmp+0x38>
 78e:	0a 26       	eor	r0, r26
 790:	61 f0       	breq	.+24     	; 0x7aa <__fp_cmp+0x46>
 792:	23 2b       	or	r18, r19
 794:	24 2b       	or	r18, r20
 796:	25 2b       	or	r18, r21
 798:	21 f4       	brne	.+8      	; 0x7a2 <__fp_cmp+0x3e>
 79a:	08 95       	ret
 79c:	0a 26       	eor	r0, r26
 79e:	09 f4       	brne	.+2      	; 0x7a2 <__fp_cmp+0x3e>
 7a0:	a1 40       	sbci	r26, 0x01	; 1
 7a2:	a6 95       	lsr	r26
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	81 1d       	adc	r24, r1
 7a8:	81 1d       	adc	r24, r1
 7aa:	08 95       	ret

000007ac <__fp_inf>:
 7ac:	97 f9       	bld	r25, 7
 7ae:	9f 67       	ori	r25, 0x7F	; 127
 7b0:	80 e8       	ldi	r24, 0x80	; 128
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	08 95       	ret

000007b8 <__fp_nan>:
 7b8:	9f ef       	ldi	r25, 0xFF	; 255
 7ba:	80 ec       	ldi	r24, 0xC0	; 192
 7bc:	08 95       	ret

000007be <__fp_pscA>:
 7be:	00 24       	eor	r0, r0
 7c0:	0a 94       	dec	r0
 7c2:	16 16       	cp	r1, r22
 7c4:	17 06       	cpc	r1, r23
 7c6:	18 06       	cpc	r1, r24
 7c8:	09 06       	cpc	r0, r25
 7ca:	08 95       	ret

000007cc <__fp_pscB>:
 7cc:	00 24       	eor	r0, r0
 7ce:	0a 94       	dec	r0
 7d0:	12 16       	cp	r1, r18
 7d2:	13 06       	cpc	r1, r19
 7d4:	14 06       	cpc	r1, r20
 7d6:	05 06       	cpc	r0, r21
 7d8:	08 95       	ret

000007da <__fp_round>:
 7da:	09 2e       	mov	r0, r25
 7dc:	03 94       	inc	r0
 7de:	00 0c       	add	r0, r0
 7e0:	11 f4       	brne	.+4      	; 0x7e6 <__fp_round+0xc>
 7e2:	88 23       	and	r24, r24
 7e4:	52 f0       	brmi	.+20     	; 0x7fa <__fp_round+0x20>
 7e6:	bb 0f       	add	r27, r27
 7e8:	40 f4       	brcc	.+16     	; 0x7fa <__fp_round+0x20>
 7ea:	bf 2b       	or	r27, r31
 7ec:	11 f4       	brne	.+4      	; 0x7f2 <__fp_round+0x18>
 7ee:	60 ff       	sbrs	r22, 0
 7f0:	04 c0       	rjmp	.+8      	; 0x7fa <__fp_round+0x20>
 7f2:	6f 5f       	subi	r22, 0xFF	; 255
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	08 95       	ret

000007fc <__fp_split3>:
 7fc:	57 fd       	sbrc	r21, 7
 7fe:	90 58       	subi	r25, 0x80	; 128
 800:	44 0f       	add	r20, r20
 802:	55 1f       	adc	r21, r21
 804:	59 f0       	breq	.+22     	; 0x81c <__fp_splitA+0x10>
 806:	5f 3f       	cpi	r21, 0xFF	; 255
 808:	71 f0       	breq	.+28     	; 0x826 <__fp_splitA+0x1a>
 80a:	47 95       	ror	r20

0000080c <__fp_splitA>:
 80c:	88 0f       	add	r24, r24
 80e:	97 fb       	bst	r25, 7
 810:	99 1f       	adc	r25, r25
 812:	61 f0       	breq	.+24     	; 0x82c <__fp_splitA+0x20>
 814:	9f 3f       	cpi	r25, 0xFF	; 255
 816:	79 f0       	breq	.+30     	; 0x836 <__fp_splitA+0x2a>
 818:	87 95       	ror	r24
 81a:	08 95       	ret
 81c:	12 16       	cp	r1, r18
 81e:	13 06       	cpc	r1, r19
 820:	14 06       	cpc	r1, r20
 822:	55 1f       	adc	r21, r21
 824:	f2 cf       	rjmp	.-28     	; 0x80a <__fp_split3+0xe>
 826:	46 95       	lsr	r20
 828:	f1 df       	rcall	.-30     	; 0x80c <__fp_splitA>
 82a:	08 c0       	rjmp	.+16     	; 0x83c <__fp_splitA+0x30>
 82c:	16 16       	cp	r1, r22
 82e:	17 06       	cpc	r1, r23
 830:	18 06       	cpc	r1, r24
 832:	99 1f       	adc	r25, r25
 834:	f1 cf       	rjmp	.-30     	; 0x818 <__fp_splitA+0xc>
 836:	86 95       	lsr	r24
 838:	71 05       	cpc	r23, r1
 83a:	61 05       	cpc	r22, r1
 83c:	08 94       	sec
 83e:	08 95       	ret

00000840 <__fp_zero>:
 840:	e8 94       	clt

00000842 <__fp_szero>:
 842:	bb 27       	eor	r27, r27
 844:	66 27       	eor	r22, r22
 846:	77 27       	eor	r23, r23
 848:	cb 01       	movw	r24, r22
 84a:	97 f9       	bld	r25, 7
 84c:	08 95       	ret

0000084e <__gesf2>:
 84e:	8a df       	rcall	.-236    	; 0x764 <__fp_cmp>
 850:	08 f4       	brcc	.+2      	; 0x854 <__gesf2+0x6>
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	08 95       	ret

00000856 <__mulsf3>:
 856:	0b d0       	rcall	.+22     	; 0x86e <__mulsf3x>
 858:	c0 cf       	rjmp	.-128    	; 0x7da <__fp_round>
 85a:	b1 df       	rcall	.-158    	; 0x7be <__fp_pscA>
 85c:	28 f0       	brcs	.+10     	; 0x868 <__mulsf3+0x12>
 85e:	b6 df       	rcall	.-148    	; 0x7cc <__fp_pscB>
 860:	18 f0       	brcs	.+6      	; 0x868 <__mulsf3+0x12>
 862:	95 23       	and	r25, r21
 864:	09 f0       	breq	.+2      	; 0x868 <__mulsf3+0x12>
 866:	a2 cf       	rjmp	.-188    	; 0x7ac <__fp_inf>
 868:	a7 cf       	rjmp	.-178    	; 0x7b8 <__fp_nan>
 86a:	11 24       	eor	r1, r1
 86c:	ea cf       	rjmp	.-44     	; 0x842 <__fp_szero>

0000086e <__mulsf3x>:
 86e:	c6 df       	rcall	.-116    	; 0x7fc <__fp_split3>
 870:	a0 f3       	brcs	.-24     	; 0x85a <__mulsf3+0x4>

00000872 <__mulsf3_pse>:
 872:	95 9f       	mul	r25, r21
 874:	d1 f3       	breq	.-12     	; 0x86a <__mulsf3+0x14>
 876:	95 0f       	add	r25, r21
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	55 1f       	adc	r21, r21
 87c:	62 9f       	mul	r22, r18
 87e:	f0 01       	movw	r30, r0
 880:	72 9f       	mul	r23, r18
 882:	bb 27       	eor	r27, r27
 884:	f0 0d       	add	r31, r0
 886:	b1 1d       	adc	r27, r1
 888:	63 9f       	mul	r22, r19
 88a:	aa 27       	eor	r26, r26
 88c:	f0 0d       	add	r31, r0
 88e:	b1 1d       	adc	r27, r1
 890:	aa 1f       	adc	r26, r26
 892:	64 9f       	mul	r22, r20
 894:	66 27       	eor	r22, r22
 896:	b0 0d       	add	r27, r0
 898:	a1 1d       	adc	r26, r1
 89a:	66 1f       	adc	r22, r22
 89c:	82 9f       	mul	r24, r18
 89e:	22 27       	eor	r18, r18
 8a0:	b0 0d       	add	r27, r0
 8a2:	a1 1d       	adc	r26, r1
 8a4:	62 1f       	adc	r22, r18
 8a6:	73 9f       	mul	r23, r19
 8a8:	b0 0d       	add	r27, r0
 8aa:	a1 1d       	adc	r26, r1
 8ac:	62 1f       	adc	r22, r18
 8ae:	83 9f       	mul	r24, r19
 8b0:	a0 0d       	add	r26, r0
 8b2:	61 1d       	adc	r22, r1
 8b4:	22 1f       	adc	r18, r18
 8b6:	74 9f       	mul	r23, r20
 8b8:	33 27       	eor	r19, r19
 8ba:	a0 0d       	add	r26, r0
 8bc:	61 1d       	adc	r22, r1
 8be:	23 1f       	adc	r18, r19
 8c0:	84 9f       	mul	r24, r20
 8c2:	60 0d       	add	r22, r0
 8c4:	21 1d       	adc	r18, r1
 8c6:	82 2f       	mov	r24, r18
 8c8:	76 2f       	mov	r23, r22
 8ca:	6a 2f       	mov	r22, r26
 8cc:	11 24       	eor	r1, r1
 8ce:	9f 57       	subi	r25, 0x7F	; 127
 8d0:	50 40       	sbci	r21, 0x00	; 0
 8d2:	8a f0       	brmi	.+34     	; 0x8f6 <__mulsf3_pse+0x84>
 8d4:	e1 f0       	breq	.+56     	; 0x90e <__mulsf3_pse+0x9c>
 8d6:	88 23       	and	r24, r24
 8d8:	4a f0       	brmi	.+18     	; 0x8ec <__mulsf3_pse+0x7a>
 8da:	ee 0f       	add	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	bb 1f       	adc	r27, r27
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	91 50       	subi	r25, 0x01	; 1
 8e8:	50 40       	sbci	r21, 0x00	; 0
 8ea:	a9 f7       	brne	.-22     	; 0x8d6 <__mulsf3_pse+0x64>
 8ec:	9e 3f       	cpi	r25, 0xFE	; 254
 8ee:	51 05       	cpc	r21, r1
 8f0:	70 f0       	brcs	.+28     	; 0x90e <__mulsf3_pse+0x9c>
 8f2:	5c cf       	rjmp	.-328    	; 0x7ac <__fp_inf>
 8f4:	a6 cf       	rjmp	.-180    	; 0x842 <__fp_szero>
 8f6:	5f 3f       	cpi	r21, 0xFF	; 255
 8f8:	ec f3       	brlt	.-6      	; 0x8f4 <__mulsf3_pse+0x82>
 8fa:	98 3e       	cpi	r25, 0xE8	; 232
 8fc:	dc f3       	brlt	.-10     	; 0x8f4 <__mulsf3_pse+0x82>
 8fe:	86 95       	lsr	r24
 900:	77 95       	ror	r23
 902:	67 95       	ror	r22
 904:	b7 95       	ror	r27
 906:	f7 95       	ror	r31
 908:	e7 95       	ror	r30
 90a:	9f 5f       	subi	r25, 0xFF	; 255
 90c:	c1 f7       	brne	.-16     	; 0x8fe <__mulsf3_pse+0x8c>
 90e:	fe 2b       	or	r31, r30
 910:	88 0f       	add	r24, r24
 912:	91 1d       	adc	r25, r1
 914:	96 95       	lsr	r25
 916:	87 95       	ror	r24
 918:	97 f9       	bld	r25, 7
 91a:	08 95       	ret

0000091c <_exit>:
 91c:	f8 94       	cli

0000091e <__stop_program>:
 91e:	ff cf       	rjmp	.-2      	; 0x91e <__stop_program>
